
GPS_STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080047c0  080047c0  000057c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004938  08004938  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004938  08004938  00005938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004940  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000060  080049a0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080049a0  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c62  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001818  00000000  00000000  0000dceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000f508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000532  00000000  00000000  0000fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015305  00000000  00000000  0001010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083b9  00000000  00000000  0002540f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821ae  00000000  00000000  0002d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a8  00000000  00000000  000af9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b1a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080047a8 	.word	0x080047a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080047a8 	.word	0x080047a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <GPS_HAL_Init>:
static char raw_buffer[GPS_BUFFER_SIZE];

static int decodeGGA(char *GGAbuffer, GGASTRUCT *gga);
static int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc);
void GPS_HAL_Init(UART_HandleTypeDef *h)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    // Disable USART1 interrupt
    huart = h;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	@ (8000af0 <GPS_HAL_Init+0x18>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	2000007c 	.word	0x2000007c

08000af4 <GPS_HAL_Receive_Raw_GGA_Data>:

HAL_StatusTypeDef GPS_HAL_Receive_Raw_GGA_Data(char *buffer)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    char data = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	72fb      	strb	r3, [r7, #11]
    int i = TRIES;
 8000b00:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b04:	60fb      	str	r3, [r7, #12]

    while (i > 0)
 8000b06:	e033      	b.n	8000b70 <GPS_HAL_Receive_Raw_GGA_Data+0x7c>
    {
        if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <GPS_HAL_Receive_Raw_GGA_Data+0x8c>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010b 	add.w	r1, r7, #11
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b14:	2201      	movs	r2, #1
 8000b16:	f002 f8af 	bl	8002c78 <HAL_UART_Receive>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <GPS_HAL_Receive_Raw_GGA_Data+0x30>
            return HAL_TIMEOUT; // Error in receiving data
 8000b20:	2303      	movs	r3, #3
 8000b22:	e029      	b.n	8000b78 <GPS_HAL_Receive_Raw_GGA_Data+0x84>

        if (data == 'G')
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	2b47      	cmp	r3, #71	@ 0x47
 8000b28:	d11f      	bne.n	8000b6a <GPS_HAL_Receive_Raw_GGA_Data+0x76>
        {
            if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <GPS_HAL_Receive_Raw_GGA_Data+0x8c>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f107 010b 	add.w	r1, r7, #11
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	f002 f89e 	bl	8002c78 <HAL_UART_Receive>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <GPS_HAL_Receive_Raw_GGA_Data+0x52>
                return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e018      	b.n	8000b78 <GPS_HAL_Receive_Raw_GGA_Data+0x84>

            if (data == 'A')
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2b41      	cmp	r3, #65	@ 0x41
 8000b4a:	d10e      	bne.n	8000b6a <GPS_HAL_Receive_Raw_GGA_Data+0x76>
            {
                if (HAL_UART_Receive(huart, (uint8_t *)buffer, GPS_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <GPS_HAL_Receive_Raw_GGA_Data+0x8c>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b54:	2264      	movs	r2, #100	@ 0x64
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f002 f88e 	bl	8002c78 <HAL_UART_Receive>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <GPS_HAL_Receive_Raw_GGA_Data+0x72>
                    return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e008      	b.n	8000b78 <GPS_HAL_Receive_Raw_GGA_Data+0x84>

                return HAL_OK; // Successfully received GGA data
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <GPS_HAL_Receive_Raw_GGA_Data+0x84>
            }
        }

        i--;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
    while (i > 0)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dcc8      	bgt.n	8000b08 <GPS_HAL_Receive_Raw_GGA_Data+0x14>
    }

    return HAL_TIMEOUT; // Timeout or no valid data received
 8000b76:	2303      	movs	r3, #3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000007c 	.word	0x2000007c

08000b84 <GPS_HAL_Receive_Raw_RMC_Data>:

HAL_StatusTypeDef GPS_HAL_Receive_Raw_RMC_Data(char *buffer)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    char data = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	72fb      	strb	r3, [r7, #11]
    int i = TRIES;
 8000b90:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b94:	60fb      	str	r3, [r7, #12]

    while (i > 0)
 8000b96:	e033      	b.n	8000c00 <GPS_HAL_Receive_Raw_RMC_Data+0x7c>
    {
        if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	f107 010b 	add.w	r1, r7, #11
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f002 f867 	bl	8002c78 <HAL_UART_Receive>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <GPS_HAL_Receive_Raw_RMC_Data+0x30>
            return HAL_TIMEOUT; // Error in receiving data
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e029      	b.n	8000c08 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

        if (data == 'M')
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bb8:	d11f      	bne.n	8000bfa <GPS_HAL_Receive_Raw_RMC_Data+0x76>
        {
            if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	f107 010b 	add.w	r1, r7, #11
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f002 f856 	bl	8002c78 <HAL_UART_Receive>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <GPS_HAL_Receive_Raw_RMC_Data+0x52>
                return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e018      	b.n	8000c08 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

            if (data == 'C')
 8000bd6:	7afb      	ldrb	r3, [r7, #11]
 8000bd8:	2b43      	cmp	r3, #67	@ 0x43
 8000bda:	d10e      	bne.n	8000bfa <GPS_HAL_Receive_Raw_RMC_Data+0x76>
            {
                if (HAL_UART_Receive(huart, (uint8_t *)buffer, GPS_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000be4:	2264      	movs	r2, #100	@ 0x64
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f002 f846 	bl	8002c78 <HAL_UART_Receive>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <GPS_HAL_Receive_Raw_RMC_Data+0x72>
                    return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e008      	b.n	8000c08 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

                return HAL_OK; // Successfully received RMC data
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e006      	b.n	8000c08 <GPS_HAL_Receive_Raw_RMC_Data+0x84>
            }
        }

        i--;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
    while (i > 0)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dcc8      	bgt.n	8000b98 <GPS_HAL_Receive_Raw_RMC_Data+0x14>
    }

    return HAL_TIMEOUT; // Timeout or no valid data received
 8000c06:	2303      	movs	r3, #3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000007c 	.word	0x2000007c

08000c14 <GPS_HAL_Receive_Decode_Data>:

void GPS_HAL_Receive_Decode_Data(GPS_DATA *data)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    if (GPS_HAL_Receive_Raw_GGA_Data(&raw_buffer) == HAL_OK)
 8000c1c:	480d      	ldr	r0, [pc, #52]	@ (8000c54 <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c1e:	f7ff ff69 	bl	8000af4 <GPS_HAL_Receive_Raw_GGA_Data>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <GPS_HAL_Receive_Decode_Data+0x1e>
        decodeGGA(raw_buffer, &data->ggastruct);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c2e:	f000 f813 	bl	8000c58 <decodeGGA>

    if (GPS_HAL_Receive_Raw_RMC_Data(&raw_buffer) == HAL_OK)
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c34:	f7ff ffa6 	bl	8000b84 <GPS_HAL_Receive_Raw_RMC_Data>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d105      	bne.n	8000c4a <GPS_HAL_Receive_Decode_Data+0x36>
        decodeRMC(raw_buffer, &data->rmcstruct);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	332c      	adds	r3, #44	@ 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c46:	f000 fba5 	bl	8001394 <decodeRMC>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000080 	.word	0x20000080

08000c58 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/
static int decodeGGA(char *GGAbuffer, GGASTRUCT *gga)
{
 8000c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c5c:	b08c      	sub	sp, #48	@ 0x30
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
    inx = 0;
 8000c64:	4b5b      	ldr	r3, [pc, #364]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
    char buffer[12];
    int i = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',')
 8000c6e:	e004      	b.n	8000c7a <decodeGGA+0x22>
        inx++; // 1st ','
 8000c70:	4b58      	ldr	r3, [pc, #352]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a57      	ldr	r2, [pc, #348]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c78:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c88:	d1f2      	bne.n	8000c70 <decodeGGA+0x18>
    inx++;
 8000c8a:	4b52      	ldr	r3, [pc, #328]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a50      	ldr	r2, [pc, #320]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c92:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000c94:	e004      	b.n	8000ca0 <decodeGGA+0x48>
        inx++; // After time ','
 8000c96:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd4 <decodeGGA+0x17c>)
 8000c9e:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd4 <decodeGGA+0x17c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cae:	d1f2      	bne.n	8000c96 <decodeGGA+0x3e>
    inx++;
 8000cb0:	4b48      	ldr	r3, [pc, #288]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a47      	ldr	r2, [pc, #284]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cb8:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cba:	e004      	b.n	8000cc6 <decodeGGA+0x6e>
        inx++; // after latitude ','
 8000cbc:	4b45      	ldr	r3, [pc, #276]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a44      	ldr	r2, [pc, #272]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cc4:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cc6:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cd4:	d1f2      	bne.n	8000cbc <decodeGGA+0x64>
    inx++;
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cde:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000ce0:	e004      	b.n	8000cec <decodeGGA+0x94>
        inx++; // after NS ','
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd4 <decodeGGA+0x17c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cea:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cec:	4b39      	ldr	r3, [pc, #228]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cfa:	d1f2      	bne.n	8000ce2 <decodeGGA+0x8a>
    inx++;
 8000cfc:	4b35      	ldr	r3, [pc, #212]	@ (8000dd4 <decodeGGA+0x17c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d04:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d06:	e004      	b.n	8000d12 <decodeGGA+0xba>
        inx++; // after longitude ','
 8000d08:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d10:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d12:	4b30      	ldr	r3, [pc, #192]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d20:	d1f2      	bne.n	8000d08 <decodeGGA+0xb0>
    inx++;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d2a:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d2c:	e004      	b.n	8000d38 <decodeGGA+0xe0>
        inx++;                                                                         // after EW ','
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d36:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d38:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d46:	d1f2      	bne.n	8000d2e <decodeGGA+0xd6>
    inx++;                                                                             // reached the character to identify the fix
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d50:	6013      	str	r3, [r2, #0]
    if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6')) // 0 indicates no fix yet
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b31      	cmp	r3, #49	@ 0x31
 8000d60:	d00f      	beq.n	8000d82 <decodeGGA+0x12a>
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b32      	cmp	r3, #50	@ 0x32
 8000d70:	d007      	beq.n	8000d82 <decodeGGA+0x12a>
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b36      	cmp	r3, #54	@ 0x36
 8000d80:	d106      	bne.n	8000d90 <decodeGGA+0x138>
    {
        gga->isfixValid = 1; // fix available
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2201      	movs	r2, #1
 8000d86:	61da      	str	r2, [r3, #28]
        inx = 0;             // reset the index. We will start from the inx=0 and extract information now
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
    else
    {
        gga->isfixValid = 0; // If the fix is not available
        return 1;            // return error
    }
    while (GGAbuffer[inx] != ',')
 8000d8e:	e009      	b.n	8000da4 <decodeGGA+0x14c>
        gga->isfixValid = 0; // If the fix is not available
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
        return 1;            // return error
 8000d96:	2301      	movs	r3, #1
 8000d98:	e2f2      	b.n	8001380 <decodeGGA+0x728>
        inx++; // 1st ','
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <decodeGGA+0x17c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <decodeGGA+0x17c>)
 8000da2:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <decodeGGA+0x17c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000db2:	d1f2      	bne.n	8000d9a <decodeGGA+0x142>

    /*********************** Get TIME ***************************/
    //(Update the GMT Offset at the top of this file)

    inx++; // reach the first number in time
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <decodeGGA+0x17c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a06      	ldr	r2, [pc, #24]	@ (8000dd4 <decodeGGA+0x17c>)
 8000dbc:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fdb0 	bl	800392c <memset>
    i = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after time ','
 8000dd0:	e016      	b.n	8000e00 <decodeGGA+0x1a8>
 8000dd2:	bf00      	nop
 8000dd4:	200000e4 	.word	0x200000e4
    {
        buffer[i] = GGAbuffer[inx];
 8000dd8:	4ba7      	ldr	r3, [pc, #668]	@ (8001078 <decodeGGA+0x420>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	7819      	ldrb	r1, [r3, #0]
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dea:	4413      	add	r3, r2
 8000dec:	460a      	mov	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
        i++;
 8000df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df2:	3301      	adds	r3, #1
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8000df6:	4ba0      	ldr	r3, [pc, #640]	@ (8001078 <decodeGGA+0x420>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a9e      	ldr	r2, [pc, #632]	@ (8001078 <decodeGGA+0x420>)
 8000dfe:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after time ','
 8000e00:	4b9d      	ldr	r3, [pc, #628]	@ (8001078 <decodeGGA+0x420>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e0e:	d1e3      	bne.n	8000dd8 <decodeGGA+0x180>
    }

    hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fd01 	bl	800381c <atoi>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a97      	ldr	r2, [pc, #604]	@ (800107c <decodeGGA+0x424>)
 8000e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e22:	1312      	asrs	r2, r2, #12
 8000e24:	17db      	asrs	r3, r3, #31
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	4b95      	ldr	r3, [pc, #596]	@ (8001080 <decodeGGA+0x428>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4995      	ldr	r1, [pc, #596]	@ (8001084 <decodeGGA+0x42c>)
 8000e2e:	fb81 0103 	smull	r0, r1, r1, r3
 8000e32:	1149      	asrs	r1, r1, #5
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a93      	ldr	r2, [pc, #588]	@ (8001088 <decodeGGA+0x430>)
 8000e3c:	6013      	str	r3, [r2, #0]

    min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fcea 	bl	800381c <atoi>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a8e      	ldr	r2, [pc, #568]	@ (8001084 <decodeGGA+0x42c>)
 8000e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e50:	1152      	asrs	r2, r2, #5
 8000e52:	17db      	asrs	r3, r3, #31
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a8b      	ldr	r2, [pc, #556]	@ (8001084 <decodeGGA+0x42c>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1151      	asrs	r1, r2, #5
 8000e5e:	17da      	asrs	r2, r3, #31
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	2164      	movs	r1, #100	@ 0x64
 8000e64:	fb01 f202 	mul.w	r2, r1, r2
 8000e68:	1a9a      	subs	r2, r3, r2
 8000e6a:	4b85      	ldr	r3, [pc, #532]	@ (8001080 <decodeGGA+0x428>)
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	4b85      	ldr	r3, [pc, #532]	@ (8001084 <decodeGGA+0x42c>)
 8000e70:	fb83 0301 	smull	r0, r3, r3, r1
 8000e74:	1158      	asrs	r0, r3, #5
 8000e76:	17cb      	asrs	r3, r1, #31
 8000e78:	1ac3      	subs	r3, r0, r3
 8000e7a:	2064      	movs	r0, #100	@ 0x64
 8000e7c:	fb00 f303 	mul.w	r3, r0, r3
 8000e80:	1acb      	subs	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	4a81      	ldr	r2, [pc, #516]	@ (800108c <decodeGGA+0x434>)
 8000e86:	6013      	str	r3, [r2, #0]

    // adjust time.. This part still needs to be tested
    if (min > 59)
 8000e88:	4b80      	ldr	r3, [pc, #512]	@ (800108c <decodeGGA+0x434>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e8e:	dd09      	ble.n	8000ea4 <decodeGGA+0x24c>
    {
        min = min - 60;
 8000e90:	4b7e      	ldr	r3, [pc, #504]	@ (800108c <decodeGGA+0x434>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3b3c      	subs	r3, #60	@ 0x3c
 8000e96:	4a7d      	ldr	r2, [pc, #500]	@ (800108c <decodeGGA+0x434>)
 8000e98:	6013      	str	r3, [r2, #0]
        hr++;
 8000e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8001088 <decodeGGA+0x430>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a79      	ldr	r2, [pc, #484]	@ (8001088 <decodeGGA+0x430>)
 8000ea2:	6013      	str	r3, [r2, #0]
    }
    if (hr < 0)
 8000ea4:	4b78      	ldr	r3, [pc, #480]	@ (8001088 <decodeGGA+0x430>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da09      	bge.n	8000ec0 <decodeGGA+0x268>
    {
        hr = 24 + hr;
 8000eac:	4b76      	ldr	r3, [pc, #472]	@ (8001088 <decodeGGA+0x430>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	4a75      	ldr	r2, [pc, #468]	@ (8001088 <decodeGGA+0x430>)
 8000eb4:	6013      	str	r3, [r2, #0]
        daychange--;
 8000eb6:	4b76      	ldr	r3, [pc, #472]	@ (8001090 <decodeGGA+0x438>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	4a74      	ldr	r2, [pc, #464]	@ (8001090 <decodeGGA+0x438>)
 8000ebe:	6013      	str	r3, [r2, #0]
    }
    if (hr >= 24)
 8000ec0:	4b71      	ldr	r3, [pc, #452]	@ (8001088 <decodeGGA+0x430>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b17      	cmp	r3, #23
 8000ec6:	dd09      	ble.n	8000edc <decodeGGA+0x284>
    {
        hr = hr - 24;
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8001088 <decodeGGA+0x430>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b18      	subs	r3, #24
 8000ece:	4a6e      	ldr	r2, [pc, #440]	@ (8001088 <decodeGGA+0x430>)
 8000ed0:	6013      	str	r3, [r2, #0]
        daychange++;
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <decodeGGA+0x438>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4a6d      	ldr	r2, [pc, #436]	@ (8001090 <decodeGGA+0x438>)
 8000eda:	6013      	str	r3, [r2, #0]
    }

    // Store the time in the GGA structure
    gga->tim.hour = hr;
 8000edc:	4b6a      	ldr	r3, [pc, #424]	@ (8001088 <decodeGGA+0x430>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	611a      	str	r2, [r3, #16]
    gga->tim.min = min;
 8000ee4:	4b69      	ldr	r3, [pc, #420]	@ (800108c <decodeGGA+0x434>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	615a      	str	r2, [r3, #20]
    gga->tim.sec = atoi(buffer) % 100;
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fc93 	bl	800381c <atoi>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4b62      	ldr	r3, [pc, #392]	@ (8001084 <decodeGGA+0x42c>)
 8000efa:	fb83 1302 	smull	r1, r3, r3, r2
 8000efe:	1159      	asrs	r1, r3, #5
 8000f00:	17d3      	asrs	r3, r2, #31
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	2164      	movs	r1, #100	@ 0x64
 8000f06:	fb01 f303 	mul.w	r3, r1, r3
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	6193      	str	r3, [r2, #24]

    /***************** Get LATITUDE  **********************/
    inx++; // Reach the first number in the lattitude
 8000f10:	4b59      	ldr	r3, [pc, #356]	@ (8001078 <decodeGGA+0x420>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a58      	ldr	r2, [pc, #352]	@ (8001078 <decodeGGA+0x420>)
 8000f18:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	220c      	movs	r2, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fd02 	bl	800392c <memset>
    i = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8000f2c:	e013      	b.n	8000f56 <decodeGGA+0x2fe>
    {
        buffer[i] = GGAbuffer[inx];
 8000f2e:	4b52      	ldr	r3, [pc, #328]	@ (8001078 <decodeGGA+0x420>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	7819      	ldrb	r1, [r3, #0]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f40:	4413      	add	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
        i++;
 8000f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f48:	3301      	adds	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001078 <decodeGGA+0x420>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a49      	ldr	r2, [pc, #292]	@ (8001078 <decodeGGA+0x420>)
 8000f54:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8000f56:	4b48      	ldr	r3, [pc, #288]	@ (8001078 <decodeGGA+0x420>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f64:	d1e3      	bne.n	8000f2e <decodeGGA+0x2d6>
    }
    if (strlen(buffer) < 6)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f8f0 	bl	8000150 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d801      	bhi.n	8000f7a <decodeGGA+0x322>
        return 2;                 // If the buffer length is not appropriate, return error
 8000f76:	2302      	movs	r3, #2
 8000f78:	e202      	b.n	8001380 <decodeGGA+0x728>
    int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fc4c 	bl	800381c <atoi>
 8000f84:	4603      	mov	r3, r0
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int j = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 8000f8c:	e002      	b.n	8000f94 <decodeGGA+0x33c>
        j++; // Figure out how many digits before the decimal
 8000f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f90:	3301      	adds	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fa0:	d1f5      	bne.n	8000f8e <decodeGGA+0x336>
    j++;
 8000fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    int declen = (strlen(buffer)) - j;                         // calculate the number of digit after decimal
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f8cf 	bl	8000150 <strlen>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	623b      	str	r3, [r7, #32]
    int dec = atoi((char *)buffer + j);                        // conver the decimal part a a separate number
 8000fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fc2a 	bl	800381c <atoi>
 8000fc8:	61f8      	str	r0, [r7, #28]
    float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8000fca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa18 	bl	8000404 <__aeabi_i2d>
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001094 <decodeGGA+0x43c>)
 8000fda:	f7ff fba7 	bl	800072c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4690      	mov	r8, r2
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	69f8      	ldr	r0, [r7, #28]
 8000fe8:	f7ff fa0c 	bl	8000404 <__aeabi_i2d>
 8000fec:	4604      	mov	r4, r0
 8000fee:	460d      	mov	r5, r1
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa05 	bl	8000404 <__aeabi_i2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4925      	ldr	r1, [pc, #148]	@ (8001098 <decodeGGA+0x440>)
 8001004:	f002 fcc4 	bl	8003990 <pow>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff fb8c 	bl	800072c <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4640      	mov	r0, r8
 800101a:	4649      	mov	r1, r9
 800101c:	f7ff f8a6 	bl	800016c <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fd06 	bl	8000a38 <__aeabi_d2f>
 800102c:	4603      	mov	r3, r0
 800102e:	61bb      	str	r3, [r7, #24]
    gga->lcation.latitude = lat;                               // save the lattitude data into the strucure
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	601a      	str	r2, [r3, #0]
    inx++;
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <decodeGGA+0x420>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <decodeGGA+0x420>)
 800103e:	6013      	str	r3, [r2, #0]
    gga->lcation.NS = GGAbuffer[inx]; // save the N/S into the structure
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <decodeGGA+0x420>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	711a      	strb	r2, [r3, #4]

    /***********************  GET LONGITUDE **********************/
    inx++; // ',' after NS character
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <decodeGGA+0x420>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <decodeGGA+0x420>)
 8001058:	6013      	str	r3, [r2, #0]
    inx++; // Reach the first number in the longitude
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <decodeGGA+0x420>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <decodeGGA+0x420>)
 8001062:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	220c      	movs	r2, #12
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fc5d 	bl	800392c <memset>
    i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8001076:	e025      	b.n	80010c4 <decodeGGA+0x46c>
 8001078:	200000e4 	.word	0x200000e4
 800107c:	68db8bad 	.word	0x68db8bad
 8001080:	20000000 	.word	0x20000000
 8001084:	51eb851f 	.word	0x51eb851f
 8001088:	200000e8 	.word	0x200000e8
 800108c:	200000ec 	.word	0x200000ec
 8001090:	200000fc 	.word	0x200000fc
 8001094:	40590000 	.word	0x40590000
 8001098:	40240000 	.word	0x40240000
    {
        buffer[i] = GGAbuffer[inx];
 800109c:	4b88      	ldr	r3, [pc, #544]	@ (80012c0 <decodeGGA+0x668>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	7819      	ldrb	r1, [r3, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ae:	4413      	add	r3, r2
 80010b0:	460a      	mov	r2, r1
 80010b2:	701a      	strb	r2, [r3, #0]
        i++;
 80010b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b6:	3301      	adds	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 80010ba:	4b81      	ldr	r3, [pc, #516]	@ (80012c0 <decodeGGA+0x668>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a7f      	ldr	r2, [pc, #508]	@ (80012c0 <decodeGGA+0x668>)
 80010c2:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80010c4:	4b7e      	ldr	r3, [pc, #504]	@ (80012c0 <decodeGGA+0x668>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80010d2:	d1e3      	bne.n	800109c <decodeGGA+0x444>
    }
    num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 fb9f 	bl	800381c <atoi>
 80010de:	4603      	mov	r3, r0
 80010e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    j = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80010e6:	e002      	b.n	80010ee <decodeGGA+0x496>
        j++; // Figure out how many digits before the decimal
 80010e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ea:	3301      	adds	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80010fa:	d1f5      	bne.n	80010e8 <decodeGGA+0x490>
    j++;
 80010fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fe:	3301      	adds	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    declen = (strlen(buffer)) - j;                       // calculate the number of digit after decimal
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f822 	bl	8000150 <strlen>
 800110c:	4602      	mov	r2, r0
 800110e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	623b      	str	r3, [r7, #32]
    dec = atoi((char *)buffer + j);                      // conver the decimal part a a separate number
 8001114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001116:	f107 020c 	add.w	r2, r7, #12
 800111a:	4413      	add	r3, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fb7d 	bl	800381c <atoi>
 8001122:	61f8      	str	r0, [r7, #28]
    lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8001124:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f96b 	bl	8000404 <__aeabi_i2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b64      	ldr	r3, [pc, #400]	@ (80012c4 <decodeGGA+0x66c>)
 8001134:	f7ff fafa 	bl	800072c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4690      	mov	r8, r2
 800113e:	4699      	mov	r9, r3
 8001140:	69f8      	ldr	r0, [r7, #28]
 8001142:	f7ff f95f 	bl	8000404 <__aeabi_i2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	3302      	adds	r3, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f958 	bl	8000404 <__aeabi_i2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	495a      	ldr	r1, [pc, #360]	@ (80012c8 <decodeGGA+0x670>)
 800115e:	f002 fc17 	bl	8003990 <pow>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff fadf 	bl	800072c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4640      	mov	r0, r8
 8001174:	4649      	mov	r1, r9
 8001176:	f7fe fff9 	bl	800016c <__adddf3>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc59 	bl	8000a38 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
    gga->lcation.longitude = lat;                        // save the longitude data into the strucure
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	609a      	str	r2, [r3, #8]
    inx++;
 8001190:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <decodeGGA+0x668>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <decodeGGA+0x668>)
 8001198:	6013      	str	r3, [r2, #0]
    gga->lcation.EW = GGAbuffer[inx]; // save the E/W into the structure
 800119a:	4b49      	ldr	r3, [pc, #292]	@ (80012c0 <decodeGGA+0x668>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	731a      	strb	r2, [r3, #12]

    /**************************************************/
    // skip positition fix
    inx++; // ',' after E/W
 80011aa:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <decodeGGA+0x668>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a43      	ldr	r2, [pc, #268]	@ (80012c0 <decodeGGA+0x668>)
 80011b2:	6013      	str	r3, [r2, #0]
    inx++; // position fix
 80011b4:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <decodeGGA+0x668>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a41      	ldr	r2, [pc, #260]	@ (80012c0 <decodeGGA+0x668>)
 80011bc:	6013      	str	r3, [r2, #0]
    inx++; // ',' after position fix;
 80011be:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <decodeGGA+0x668>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <decodeGGA+0x668>)
 80011c6:	6013      	str	r3, [r2, #0]

    // number of sattelites
    inx++; // Reach the first number in the satellites
 80011c8:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <decodeGGA+0x668>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a3c      	ldr	r2, [pc, #240]	@ (80012c0 <decodeGGA+0x668>)
 80011d0:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	220c      	movs	r2, #12
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fba6 	bl	800392c <memset>
    i = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80011e4:	e013      	b.n	800120e <decodeGGA+0x5b6>
    {
        buffer[i] = GGAbuffer[inx];
 80011e6:	4b36      	ldr	r3, [pc, #216]	@ (80012c0 <decodeGGA+0x668>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f8:	4413      	add	r3, r2
 80011fa:	460a      	mov	r2, r1
 80011fc:	701a      	strb	r2, [r3, #0]
        i++;
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	3301      	adds	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8001204:	4b2e      	ldr	r3, [pc, #184]	@ (80012c0 <decodeGGA+0x668>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a2d      	ldr	r2, [pc, #180]	@ (80012c0 <decodeGGA+0x668>)
 800120c:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <decodeGGA+0x668>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b2c      	cmp	r3, #44	@ 0x2c
 800121c:	d1e3      	bne.n	80011e6 <decodeGGA+0x58e>
    }
    gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fafa 	bl	800381c <atoi>
 8001228:	4602      	mov	r2, r0
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28

    /***************** skip HDOP  *********************/
    inx++;
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <decodeGGA+0x668>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <decodeGGA+0x668>)
 8001236:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8001238:	e004      	b.n	8001244 <decodeGGA+0x5ec>
        inx++;
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <decodeGGA+0x668>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <decodeGGA+0x668>)
 8001242:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <decodeGGA+0x668>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b2c      	cmp	r3, #44	@ 0x2c
 8001252:	d1f2      	bne.n	800123a <decodeGGA+0x5e2>

    /*************** Altitude calculation ********************/
    inx++;
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <decodeGGA+0x668>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a19      	ldr	r2, [pc, #100]	@ (80012c0 <decodeGGA+0x668>)
 800125c:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	220c      	movs	r2, #12
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fb60 	bl	800392c <memset>
    i = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',')
 8001270:	e013      	b.n	800129a <decodeGGA+0x642>
    {
        buffer[i] = GGAbuffer[inx];
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <decodeGGA+0x668>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	7819      	ldrb	r1, [r3, #0]
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
        i++;
 800128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128c:	3301      	adds	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <decodeGGA+0x668>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <decodeGGA+0x668>)
 8001298:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <decodeGGA+0x668>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b2c      	cmp	r3, #44	@ 0x2c
 80012a8:	d1e3      	bne.n	8001272 <decodeGGA+0x61a>
    }
    num = (atoi(buffer));
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fab4 	bl	800381c <atoi>
 80012b4:	4603      	mov	r3, r0
 80012b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    j = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80012bc:	e009      	b.n	80012d2 <decodeGGA+0x67a>
 80012be:	bf00      	nop
 80012c0:	200000e4 	.word	0x200000e4
 80012c4:	40590000 	.word	0x40590000
 80012c8:	40240000 	.word	0x40240000
        j++;
 80012cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ce:	3301      	adds	r3, #1
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80012de:	d1f5      	bne.n	80012cc <decodeGGA+0x674>
    j++;
 80012e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e2:	3301      	adds	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    declen = (strlen(buffer)) - j;
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff30 	bl	8000150 <strlen>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	623b      	str	r3, [r7, #32]
    dec = atoi((char *)buffer + j);
 80012f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	4413      	add	r3, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fa8b 	bl	800381c <atoi>
 8001306:	61f8      	str	r0, [r7, #28]
    lat = (num) + (dec / pow(10, (declen)));
 8001308:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f879 	bl	8000404 <__aeabi_i2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	69f8      	ldr	r0, [r7, #28]
 8001318:	f7ff f874 	bl	8000404 <__aeabi_i2d>
 800131c:	4680      	mov	r8, r0
 800131e:	4689      	mov	r9, r1
 8001320:	6a38      	ldr	r0, [r7, #32]
 8001322:	f7ff f86f 	bl	8000404 <__aeabi_i2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	4917      	ldr	r1, [pc, #92]	@ (800138c <decodeGGA+0x734>)
 8001330:	f002 fb2e 	bl	8003990 <pow>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4640      	mov	r0, r8
 800133a:	4649      	mov	r1, r9
 800133c:	f7ff f9f6 	bl	800072c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ff10 	bl	800016c <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb70 	bl	8000a38 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	61bb      	str	r3, [r7, #24]
    gga->alt.altitude = lat;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	621a      	str	r2, [r3, #32]

    inx++;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <decodeGGA+0x738>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <decodeGGA+0x738>)
 800136a:	6013      	str	r3, [r2, #0]
    gga->alt.unit = GGAbuffer[inx];
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <decodeGGA+0x738>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3730      	adds	r7, #48	@ 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	40240000 	.word	0x40240000
 8001390:	200000e4 	.word	0x200000e4

08001394 <decodeRMC>:

static int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001394:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001398:	b090      	sub	sp, #64	@ 0x40
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
    inx = 0;
 80013a0:	4b92      	ldr	r3, [pc, #584]	@ (80015ec <decodeRMC+0x258>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    char buffer[12];
    int i = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (RMCbuffer[inx] != ',')
 80013aa:	e004      	b.n	80013b6 <decodeRMC+0x22>
        inx++; // 1st ,
 80013ac:	4b8f      	ldr	r3, [pc, #572]	@ (80015ec <decodeRMC+0x258>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a8e      	ldr	r2, [pc, #568]	@ (80015ec <decodeRMC+0x258>)
 80013b4:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013b6:	4b8d      	ldr	r3, [pc, #564]	@ (80015ec <decodeRMC+0x258>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b2c      	cmp	r3, #44	@ 0x2c
 80013c4:	d1f2      	bne.n	80013ac <decodeRMC+0x18>
    inx++;
 80013c6:	4b89      	ldr	r3, [pc, #548]	@ (80015ec <decodeRMC+0x258>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a87      	ldr	r2, [pc, #540]	@ (80015ec <decodeRMC+0x258>)
 80013ce:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013d0:	e004      	b.n	80013dc <decodeRMC+0x48>
        inx++; // After time ,
 80013d2:	4b86      	ldr	r3, [pc, #536]	@ (80015ec <decodeRMC+0x258>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a84      	ldr	r2, [pc, #528]	@ (80015ec <decodeRMC+0x258>)
 80013da:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013dc:	4b83      	ldr	r3, [pc, #524]	@ (80015ec <decodeRMC+0x258>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b2c      	cmp	r3, #44	@ 0x2c
 80013ea:	d1f2      	bne.n	80013d2 <decodeRMC+0x3e>
    inx++;
 80013ec:	4b7f      	ldr	r3, [pc, #508]	@ (80015ec <decodeRMC+0x258>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a7e      	ldr	r2, [pc, #504]	@ (80015ec <decodeRMC+0x258>)
 80013f4:	6013      	str	r3, [r2, #0]
    if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80013f6:	4b7d      	ldr	r3, [pc, #500]	@ (80015ec <decodeRMC+0x258>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b41      	cmp	r3, #65	@ 0x41
 8001404:	d10d      	bne.n	8001422 <decodeRMC+0x8e>
    {
        rmc->isValid = 1;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	615a      	str	r2, [r3, #20]
    else
    {
        rmc->isValid = 0;
        return 1;
    }
    inx++;
 800140c:	4b77      	ldr	r3, [pc, #476]	@ (80015ec <decodeRMC+0x258>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a76      	ldr	r2, [pc, #472]	@ (80015ec <decodeRMC+0x258>)
 8001414:	6013      	str	r3, [r2, #0]
    inx++;
 8001416:	4b75      	ldr	r3, [pc, #468]	@ (80015ec <decodeRMC+0x258>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a73      	ldr	r2, [pc, #460]	@ (80015ec <decodeRMC+0x258>)
 800141e:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001420:	e009      	b.n	8001436 <decodeRMC+0xa2>
        rmc->isValid = 0;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
        return 1;
 8001428:	2301      	movs	r3, #1
 800142a:	e1d5      	b.n	80017d8 <decodeRMC+0x444>
        inx++; // after latitude,
 800142c:	4b6f      	ldr	r3, [pc, #444]	@ (80015ec <decodeRMC+0x258>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a6e      	ldr	r2, [pc, #440]	@ (80015ec <decodeRMC+0x258>)
 8001434:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001436:	4b6d      	ldr	r3, [pc, #436]	@ (80015ec <decodeRMC+0x258>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b2c      	cmp	r3, #44	@ 0x2c
 8001444:	d1f2      	bne.n	800142c <decodeRMC+0x98>
    inx++;
 8001446:	4b69      	ldr	r3, [pc, #420]	@ (80015ec <decodeRMC+0x258>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a67      	ldr	r2, [pc, #412]	@ (80015ec <decodeRMC+0x258>)
 800144e:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001450:	e004      	b.n	800145c <decodeRMC+0xc8>
        inx++; // after NS ,
 8001452:	4b66      	ldr	r3, [pc, #408]	@ (80015ec <decodeRMC+0x258>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a64      	ldr	r2, [pc, #400]	@ (80015ec <decodeRMC+0x258>)
 800145a:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800145c:	4b63      	ldr	r3, [pc, #396]	@ (80015ec <decodeRMC+0x258>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b2c      	cmp	r3, #44	@ 0x2c
 800146a:	d1f2      	bne.n	8001452 <decodeRMC+0xbe>
    inx++;
 800146c:	4b5f      	ldr	r3, [pc, #380]	@ (80015ec <decodeRMC+0x258>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a5e      	ldr	r2, [pc, #376]	@ (80015ec <decodeRMC+0x258>)
 8001474:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001476:	e004      	b.n	8001482 <decodeRMC+0xee>
        inx++; // after longitude ,
 8001478:	4b5c      	ldr	r3, [pc, #368]	@ (80015ec <decodeRMC+0x258>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a5b      	ldr	r2, [pc, #364]	@ (80015ec <decodeRMC+0x258>)
 8001480:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001482:	4b5a      	ldr	r3, [pc, #360]	@ (80015ec <decodeRMC+0x258>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001490:	d1f2      	bne.n	8001478 <decodeRMC+0xe4>
    inx++;
 8001492:	4b56      	ldr	r3, [pc, #344]	@ (80015ec <decodeRMC+0x258>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a54      	ldr	r2, [pc, #336]	@ (80015ec <decodeRMC+0x258>)
 800149a:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800149c:	e004      	b.n	80014a8 <decodeRMC+0x114>
        inx++; // after EW ,
 800149e:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <decodeRMC+0x258>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a51      	ldr	r2, [pc, #324]	@ (80015ec <decodeRMC+0x258>)
 80014a6:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80014a8:	4b50      	ldr	r3, [pc, #320]	@ (80015ec <decodeRMC+0x258>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b2c      	cmp	r3, #44	@ 0x2c
 80014b6:	d1f2      	bne.n	800149e <decodeRMC+0x10a>

    // Get Speed
    inx++;
 80014b8:	4b4c      	ldr	r3, [pc, #304]	@ (80015ec <decodeRMC+0x258>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a4b      	ldr	r2, [pc, #300]	@ (80015ec <decodeRMC+0x258>)
 80014c0:	6013      	str	r3, [r2, #0]
    i = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	220c      	movs	r2, #12
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fa2c 	bl	800392c <memset>
    while (RMCbuffer[inx] != ',')
 80014d4:	e013      	b.n	80014fe <decodeRMC+0x16a>
    {
        buffer[i] = RMCbuffer[inx];
 80014d6:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <decodeRMC+0x258>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	7819      	ldrb	r1, [r3, #0]
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014e8:	4413      	add	r3, r2
 80014ea:	460a      	mov	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
        i++;
 80014ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f0:	3301      	adds	r3, #1
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <decodeRMC+0x258>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a3c      	ldr	r2, [pc, #240]	@ (80015ec <decodeRMC+0x258>)
 80014fc:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <decodeRMC+0x258>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b2c      	cmp	r3, #44	@ 0x2c
 800150c:	d1e3      	bne.n	80014d6 <decodeRMC+0x142>
    }

    if (strlen(buffer) > 0)
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d055      	beq.n	80015c4 <decodeRMC+0x230>
    {                                 // if the speed have some data
        int16_t num = (atoi(buffer)); // convert the data into the number
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f97d 	bl	800381c <atoi>
 8001522:	4603      	mov	r3, r0
 8001524:	867b      	strh	r3, [r7, #50]	@ 0x32
        int j = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (buffer[j] != '.')
 800152a:	e002      	b.n	8001532 <decodeRMC+0x19e>
            j++; // same as above
 800152c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800152e:	3301      	adds	r3, #1
 8001530:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (buffer[j] != '.')
 8001532:	f107 0208 	add.w	r2, r7, #8
 8001536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2e      	cmp	r3, #46	@ 0x2e
 800153e:	d1f5      	bne.n	800152c <decodeRMC+0x198>
        j++;
 8001540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001542:	3301      	adds	r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
        int declen = (strlen(buffer)) - j;
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fe00 	bl	8000150 <strlen>
 8001550:	4602      	mov	r2, r0
 8001552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int dec = atoi((char *)buffer + j);
 8001558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155a:	f107 0208 	add.w	r2, r7, #8
 800155e:	4413      	add	r3, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f95b 	bl	800381c <atoi>
 8001566:	62b8      	str	r0, [r7, #40]	@ 0x28
        float lat = num + (dec / pow(10, (declen)));
 8001568:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff49 	bl	8000404 <__aeabi_i2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001578:	f7fe ff44 	bl	8000404 <__aeabi_i2d>
 800157c:	4680      	mov	r8, r0
 800157e:	4689      	mov	r9, r1
 8001580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001582:	f7fe ff3f 	bl	8000404 <__aeabi_i2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	4918      	ldr	r1, [pc, #96]	@ (80015f0 <decodeRMC+0x25c>)
 8001590:	f002 f9fe 	bl	8003990 <pow>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4640      	mov	r0, r8
 800159a:	4649      	mov	r1, r9
 800159c:	f7ff f8c6 	bl	800072c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fde0 	bl	800016c <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa40 	bl	8000a38 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
        rmc->speed = lat;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e003      	b.n	80015cc <decodeRMC+0x238>
    }
    else
        rmc->speed = 0;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]

    // Get Course
    inx++;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <decodeRMC+0x258>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <decodeRMC+0x258>)
 80015d4:	6013      	str	r3, [r2, #0]
    i = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	220c      	movs	r2, #12
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 f9a2 	bl	800392c <memset>
    while (RMCbuffer[inx] != ',')
 80015e8:	e018      	b.n	800161c <decodeRMC+0x288>
 80015ea:	bf00      	nop
 80015ec:	200000e4 	.word	0x200000e4
 80015f0:	40240000 	.word	0x40240000
    {
        buffer[i] = RMCbuffer[inx];
 80015f4:	4b7b      	ldr	r3, [pc, #492]	@ (80017e4 <decodeRMC+0x450>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001606:	4413      	add	r3, r2
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
        i++;
 800160c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160e:	3301      	adds	r3, #1
 8001610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 8001612:	4b74      	ldr	r3, [pc, #464]	@ (80017e4 <decodeRMC+0x450>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	4a72      	ldr	r2, [pc, #456]	@ (80017e4 <decodeRMC+0x450>)
 800161a:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800161c:	4b71      	ldr	r3, [pc, #452]	@ (80017e4 <decodeRMC+0x450>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b2c      	cmp	r3, #44	@ 0x2c
 800162a:	d1e3      	bne.n	80015f4 <decodeRMC+0x260>
    }

    if (strlen(buffer) > 0)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d055      	beq.n	80016e2 <decodeRMC+0x34e>
    {                                 // if the course have some data
        int16_t num = (atoi(buffer)); // convert the course data into the number
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f8ee 	bl	800381c <atoi>
 8001640:	4603      	mov	r3, r0
 8001642:	847b      	strh	r3, [r7, #34]	@ 0x22
        int j = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
        while (buffer[j] != '.')
 8001648:	e002      	b.n	8001650 <decodeRMC+0x2bc>
            j++; // same as above
 800164a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164c:	3301      	adds	r3, #1
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
        while (buffer[j] != '.')
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b2e      	cmp	r3, #46	@ 0x2e
 800165c:	d1f5      	bne.n	800164a <decodeRMC+0x2b6>
        j++;
 800165e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001660:	3301      	adds	r3, #1
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
        int declen = (strlen(buffer)) - j;
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fd71 	bl	8000150 <strlen>
 800166e:	4602      	mov	r2, r0
 8001670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	61fb      	str	r3, [r7, #28]
        int dec = atoi((char *)buffer + j);
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	4413      	add	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f002 f8cc 	bl	800381c <atoi>
 8001684:	61b8      	str	r0, [r7, #24]
        float lat = num + (dec / pow(10, (declen)));
 8001686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feba 	bl	8000404 <__aeabi_i2d>
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
 8001694:	69b8      	ldr	r0, [r7, #24]
 8001696:	f7fe feb5 	bl	8000404 <__aeabi_i2d>
 800169a:	4680      	mov	r8, r0
 800169c:	4689      	mov	r9, r1
 800169e:	69f8      	ldr	r0, [r7, #28]
 80016a0:	f7fe feb0 	bl	8000404 <__aeabi_i2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	494e      	ldr	r1, [pc, #312]	@ (80017e8 <decodeRMC+0x454>)
 80016ae:	f002 f96f 	bl	8003990 <pow>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4620      	mov	r0, r4
 80016c4:	4629      	mov	r1, r5
 80016c6:	f7fe fd51 	bl	800016c <__adddf3>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff f9b1 	bl	8000a38 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	617b      	str	r3, [r7, #20]
        rmc->course = lat;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	e003      	b.n	80016ea <decodeRMC+0x356>
    }
    else
    {
        rmc->course = 0;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
    }

    // Get Date
    inx++;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <decodeRMC+0x450>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a3c      	ldr	r2, [pc, #240]	@ (80017e4 <decodeRMC+0x450>)
 80016f2:	6013      	str	r3, [r2, #0]
    i = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	220c      	movs	r2, #12
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f913 	bl	800392c <memset>
    while (RMCbuffer[inx] != ',')
 8001706:	e013      	b.n	8001730 <decodeRMC+0x39c>
    {
        buffer[i] = RMCbuffer[inx];
 8001708:	4b36      	ldr	r3, [pc, #216]	@ (80017e4 <decodeRMC+0x450>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	7819      	ldrb	r1, [r3, #0]
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800171a:	4413      	add	r3, r2
 800171c:	460a      	mov	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
        i++;
 8001720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001722:	3301      	adds	r3, #1
 8001724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 8001726:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <decodeRMC+0x450>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <decodeRMC+0x450>)
 800172e:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <decodeRMC+0x450>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b2c      	cmp	r3, #44	@ 0x2c
 800173e:	d1e3      	bne.n	8001708 <decodeRMC+0x374>
    }

    // Date in the format 280222
    day = atoi(buffer) / 10000;       // extract 28
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f869 	bl	800381c <atoi>
 800174a:	4603      	mov	r3, r0
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <decodeRMC+0x458>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	1312      	asrs	r2, r2, #12
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a25      	ldr	r2, [pc, #148]	@ (80017f0 <decodeRMC+0x45c>)
 800175a:	6013      	str	r3, [r2, #0]
    mon = (atoi(buffer) / 100) % 100; // extract 02
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f85b 	bl	800381c <atoi>
 8001766:	4603      	mov	r3, r0
 8001768:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <decodeRMC+0x460>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	1152      	asrs	r2, r2, #5
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <decodeRMC+0x460>)
 8001776:	fb83 1302 	smull	r1, r3, r3, r2
 800177a:	1159      	asrs	r1, r3, #5
 800177c:	17d3      	asrs	r3, r2, #31
 800177e:	1acb      	subs	r3, r1, r3
 8001780:	2164      	movs	r1, #100	@ 0x64
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <decodeRMC+0x464>)
 800178a:	6013      	str	r3, [r2, #0]
    yr = atoi(buffer) % 100;          // extract 22
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f002 f843 	bl	800381c <atoi>
 8001796:	4602      	mov	r2, r0
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <decodeRMC+0x460>)
 800179a:	fb83 1302 	smull	r1, r3, r3, r2
 800179e:	1159      	asrs	r1, r3, #5
 80017a0:	17d3      	asrs	r3, r2, #31
 80017a2:	1acb      	subs	r3, r1, r3
 80017a4:	2164      	movs	r1, #100	@ 0x64
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a13      	ldr	r2, [pc, #76]	@ (80017fc <decodeRMC+0x468>)
 80017ae:	6013      	str	r3, [r2, #0]

    day = day + daychange; // correction due to GMT shift
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <decodeRMC+0x45c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <decodeRMC+0x46c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <decodeRMC+0x45c>)
 80017bc:	6013      	str	r3, [r2, #0]

    // save the data into the structure
    rmc->date.Day = day;
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <decodeRMC+0x45c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	601a      	str	r2, [r3, #0]
    rmc->date.Mon = mon;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <decodeRMC+0x464>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]
    rmc->date.Yr = yr;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <decodeRMC+0x468>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	609a      	str	r2, [r3, #8]

    return 0;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3740      	adds	r7, #64	@ 0x40
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e2:	bf00      	nop
 80017e4:	200000e4 	.word	0x200000e4
 80017e8:	40240000 	.word	0x40240000
 80017ec:	68db8bad 	.word	0x68db8bad
 80017f0:	200000f0 	.word	0x200000f0
 80017f4:	51eb851f 	.word	0x51eb851f
 80017f8:	200000f4 	.word	0x200000f4
 80017fc:	200000f8 	.word	0x200000f8
 8001800:	200000fc 	.word	0x200000fc

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b092      	sub	sp, #72	@ 0x48
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180a:	f000 fa0b 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180e:	f000 f815 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001812:	f000 f8ad 	bl	8001970 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001816:	f000 f857 	bl	80018c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800181a:	f000 f87f 	bl	800191c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  GPS_HAL_Init(&huart1);
 800181e:	4806      	ldr	r0, [pc, #24]	@ (8001838 <main+0x34>)
 8001820:	f7ff f95a 	bl	8000ad8 <GPS_HAL_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    GPS_HAL_Receive_Decode_Data(&data);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f9f4 	bl	8000c14 <GPS_HAL_Receive_Decode_Data>
    // HAL_UART_Transmit(&huart2, &buffer_raw, GPS_BUFFER_SIZE, HAL_MAX_DELAY);
    HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001830:	f000 fa5a 	bl	8001ce8 <HAL_Delay>
    GPS_HAL_Receive_Decode_Data(&data);
 8001834:	bf00      	nop
 8001836:	e7f5      	b.n	8001824 <main+0x20>
 8001838:	20000100 	.word	0x20000100

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b090      	sub	sp, #64	@ 0x40
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	2228      	movs	r2, #40	@ 0x28
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f002 f86e 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001870:	2302      	movs	r3, #2
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800187a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fd97 	bl	80023b8 <HAL_RCC_OscConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001890:	f000 f890 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	230f      	movs	r3, #15
 8001896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001898:	2302      	movs	r3, #2
 800189a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f804 	bl	80028bc <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018ba:	f000 f87b 	bl	80019b4 <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3740      	adds	r7, #64	@ 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART1_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART1_UART_Init+0x4c>)
 8001900:	f001 f96a 	bl	8002bd8 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f000 f853 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000100 	.word	0x20000100
 8001918:	40013800 	.word	0x40013800

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <MX_USART2_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_USART2_UART_Init+0x4c>)
 8001954:	f001 f940 	bl	8002bd8 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f829 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000148 	.word	0x20000148
 800196c:	40004400 	.word	0x40004400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <MX_GPIO_Init+0x40>)
 800197c:	f043 0320 	orr.w	r3, r3, #32
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <MX_GPIO_Init+0x40>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <MX_GPIO_Init+0x40>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <Error_Handler+0x8>

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_MspInit+0x5c>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_MspInit+0x60>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_MspInit+0x60>)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000

08001a24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b3c <HAL_UART_MspInit+0x118>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d13a      	bne.n	8001aba <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a3d      	ldr	r2, [pc, #244]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a37      	ldr	r2, [pc, #220]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	4619      	mov	r1, r3
 8001a88:	482e      	ldr	r0, [pc, #184]	@ (8001b44 <HAL_UART_MspInit+0x120>)
 8001a8a:	f000 fb11 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4828      	ldr	r0, [pc, #160]	@ (8001b44 <HAL_UART_MspInit+0x120>)
 8001aa4:	f000 fb04 	bl	80020b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2025      	movs	r0, #37	@ 0x25
 8001aae:	f000 fa16 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab2:	2025      	movs	r0, #37	@ 0x25
 8001ab4:	f000 fa2f 	bl	8001f16 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab8:	e03c      	b.n	8001b34 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a22      	ldr	r2, [pc, #136]	@ (8001b48 <HAL_UART_MspInit+0x124>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d137      	bne.n	8001b34 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ace:	61d3      	str	r3, [r2, #28]
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_UART_MspInit+0x11c>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af4:	2304      	movs	r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4619      	mov	r1, r3
 8001b06:	480f      	ldr	r0, [pc, #60]	@ (8001b44 <HAL_UART_MspInit+0x120>)
 8001b08:	f000 fad2 	bl	80020b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <HAL_UART_MspInit+0x120>)
 8001b20:	f000 fac6 	bl	80020b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2100      	movs	r1, #0
 8001b28:	2026      	movs	r0, #38	@ 0x26
 8001b2a:	f000 f9d8 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b2e:	2026      	movs	r0, #38	@ 0x26
 8001b30:	f000 f9f1 	bl	8001f16 <HAL_NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	@ 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40004400 	.word	0x40004400

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <NMI_Handler+0x4>

08001b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <MemManage_Handler+0x4>

08001b64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 f888 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <USART1_IRQHandler+0x10>)
 8001baa:	f001 f8fd 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000100 	.word	0x20000100

08001bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <USART2_IRQHandler+0x10>)
 8001bbe:	f001 f8f3 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000148 	.word	0x20000148

08001bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff fff8 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bde:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf4:	4c09      	ldr	r4, [pc, #36]	@ (8001c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f001 fea1 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff fdfd 	bl	8001804 <main>
  bx lr
 8001c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c14:	08004940 	.word	0x08004940
  ldr r2, =_sbss
 8001c18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c1c:	200002cc 	.word	0x200002cc

08001c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_2_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_Init+0x28>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <HAL_Init+0x28>)
 8001c2e:	f043 0310 	orr.w	r3, r3, #16
 8001c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f947 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff febe 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f95f 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c8c:	f000 f927 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	20000008 	.word	0x20000008

08001cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_IncTick+0x1c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a03      	ldr	r2, [pc, #12]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	20000190 	.word	0x20000190

08001cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b02      	ldr	r3, [pc, #8]	@ (8001ce4 <HAL_GetTick+0x10>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	20000190 	.word	0x20000190

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffe0 	bl	8001cd4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4906      	ldr	r1, [pc, #24]	@ (8001dc8 <__NVIC_EnableIRQ+0x34>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea8:	f7ff ff90 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff2d 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff42 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff35 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d008      	beq.n	8001f74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e020      	b.n	8001fb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020e 	bic.w	r2, r2, #14
 8001f82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d005      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e051      	b.n	8002088 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 020e 	bic.w	r2, r2, #14
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_DMA_Abort_IT+0xd4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d029      	beq.n	8002062 <HAL_DMA_Abort_IT+0xa2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	@ (8002098 <HAL_DMA_Abort_IT+0xd8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_Abort_IT+0x9e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_DMA_Abort_IT+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_Abort_IT+0x98>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1e      	ldr	r2, [pc, #120]	@ (80020a0 <HAL_DMA_Abort_IT+0xe0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d012      	beq.n	8002052 <HAL_DMA_Abort_IT+0x92>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_DMA_Abort_IT+0xe4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00a      	beq.n	800204c <HAL_DMA_Abort_IT+0x8c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_DMA_Abort_IT+0xe8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d102      	bne.n	8002046 <HAL_DMA_Abort_IT+0x86>
 8002040:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002044:	e00e      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 8002046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800204a:	e00b      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 800204c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002050:	e008      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 8002052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002056:	e005      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 8002058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205c:	e002      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 800205e:	2310      	movs	r3, #16
 8002060:	e000      	b.n	8002064 <HAL_DMA_Abort_IT+0xa4>
 8002062:	2301      	movs	r3, #1
 8002064:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <HAL_DMA_Abort_IT+0xec>)
 8002066:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    } 
  }
  return status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020008 	.word	0x40020008
 8002098:	4002001c 	.word	0x4002001c
 800209c:	40020030 	.word	0x40020030
 80020a0:	40020044 	.word	0x40020044
 80020a4:	40020058 	.word	0x40020058
 80020a8:	4002006c 	.word	0x4002006c
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b08b      	sub	sp, #44	@ 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e169      	b.n	8002398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c4:	2201      	movs	r2, #1
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8158 	bne.w	8002392 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002350 <HAL_GPIO_Init+0x2a0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d05e      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020ec:	4a98      	ldr	r2, [pc, #608]	@ (8002350 <HAL_GPIO_Init+0x2a0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d875      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020f2:	4a98      	ldr	r2, [pc, #608]	@ (8002354 <HAL_GPIO_Init+0x2a4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d058      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020f8:	4a96      	ldr	r2, [pc, #600]	@ (8002354 <HAL_GPIO_Init+0x2a4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d86f      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020fe:	4a96      	ldr	r2, [pc, #600]	@ (8002358 <HAL_GPIO_Init+0x2a8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d052      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002104:	4a94      	ldr	r2, [pc, #592]	@ (8002358 <HAL_GPIO_Init+0x2a8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d869      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800210a:	4a94      	ldr	r2, [pc, #592]	@ (800235c <HAL_GPIO_Init+0x2ac>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04c      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002110:	4a92      	ldr	r2, [pc, #584]	@ (800235c <HAL_GPIO_Init+0x2ac>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d863      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002116:	4a92      	ldr	r2, [pc, #584]	@ (8002360 <HAL_GPIO_Init+0x2b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d046      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 800211c:	4a90      	ldr	r2, [pc, #576]	@ (8002360 <HAL_GPIO_Init+0x2b0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d85d      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002122:	2b12      	cmp	r3, #18
 8002124:	d82a      	bhi.n	800217c <HAL_GPIO_Init+0xcc>
 8002126:	2b12      	cmp	r3, #18
 8002128:	d859      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800212a:	a201      	add	r2, pc, #4	@ (adr r2, 8002130 <HAL_GPIO_Init+0x80>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	080021ab 	.word	0x080021ab
 8002134:	08002185 	.word	0x08002185
 8002138:	08002197 	.word	0x08002197
 800213c:	080021d9 	.word	0x080021d9
 8002140:	080021df 	.word	0x080021df
 8002144:	080021df 	.word	0x080021df
 8002148:	080021df 	.word	0x080021df
 800214c:	080021df 	.word	0x080021df
 8002150:	080021df 	.word	0x080021df
 8002154:	080021df 	.word	0x080021df
 8002158:	080021df 	.word	0x080021df
 800215c:	080021df 	.word	0x080021df
 8002160:	080021df 	.word	0x080021df
 8002164:	080021df 	.word	0x080021df
 8002168:	080021df 	.word	0x080021df
 800216c:	080021df 	.word	0x080021df
 8002170:	080021df 	.word	0x080021df
 8002174:	0800218d 	.word	0x0800218d
 8002178:	080021a1 	.word	0x080021a1
 800217c:	4a79      	ldr	r2, [pc, #484]	@ (8002364 <HAL_GPIO_Init+0x2b4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002182:	e02c      	b.n	80021de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e029      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	3304      	adds	r3, #4
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e024      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	3308      	adds	r3, #8
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e01f      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	330c      	adds	r3, #12
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e01a      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021b2:	2304      	movs	r3, #4
 80021b4:	623b      	str	r3, [r7, #32]
          break;
 80021b6:	e013      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	611a      	str	r2, [r3, #16]
          break;
 80021ca:	e009      	b.n	80021e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021cc:	2308      	movs	r3, #8
 80021ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	615a      	str	r2, [r3, #20]
          break;
 80021d6:	e003      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          break;
 80021de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2bff      	cmp	r3, #255	@ 0xff
 80021e4:	d801      	bhi.n	80021ea <HAL_GPIO_Init+0x13a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_Init+0x13e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2bff      	cmp	r3, #255	@ 0xff
 80021f4:	d802      	bhi.n	80021fc <HAL_GPIO_Init+0x14c>
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x152>
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	3b08      	subs	r3, #8
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	210f      	movs	r1, #15
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80b1 	beq.w	8002392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002230:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a4c      	ldr	r2, [pc, #304]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2bc>)
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a40      	ldr	r2, [pc, #256]	@ (8002370 <HAL_GPIO_Init+0x2c0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_GPIO_Init+0x1ec>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3f      	ldr	r2, [pc, #252]	@ (8002374 <HAL_GPIO_Init+0x2c4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1e8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3e      	ldr	r2, [pc, #248]	@ (8002378 <HAL_GPIO_Init+0x2c8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1e4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3d      	ldr	r2, [pc, #244]	@ (800237c <HAL_GPIO_Init+0x2cc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1e0>
 800228c:	2303      	movs	r3, #3
 800228e:	e006      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002290:	2304      	movs	r3, #4
 8002292:	e004      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002294:	2302      	movs	r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 800229c:	2300      	movs	r3, #0
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4093      	lsls	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ae:	492f      	ldr	r1, [pc, #188]	@ (800236c <HAL_GPIO_Init+0x2bc>)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	492c      	ldr	r1, [pc, #176]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4928      	ldr	r1, [pc, #160]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4922      	ldr	r1, [pc, #136]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	491e      	ldr	r1, [pc, #120]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4918      	ldr	r1, [pc, #96]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002326:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	4914      	ldr	r1, [pc, #80]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d021      	beq.n	8002384 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	490e      	ldr	r1, [pc, #56]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e021      	b.n	8002392 <HAL_GPIO_Init+0x2e2>
 800234e:	bf00      	nop
 8002350:	10320000 	.word	0x10320000
 8002354:	10310000 	.word	0x10310000
 8002358:	10220000 	.word	0x10220000
 800235c:	10210000 	.word	0x10210000
 8002360:	10120000 	.word	0x10120000
 8002364:	10110000 	.word	0x10110000
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000
 8002370:	40010800 	.word	0x40010800
 8002374:	40010c00 	.word	0x40010c00
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	43db      	mvns	r3, r3
 800238c:	4909      	ldr	r1, [pc, #36]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 800238e:	4013      	ands	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	3301      	adds	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f47f ae8e 	bne.w	80020c4 <HAL_GPIO_Init+0x14>
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	372c      	adds	r7, #44	@ 0x2c
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40010400 	.word	0x40010400

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d8:	4b92      	ldr	r3, [pc, #584]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
 80023f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d10b      	bne.n	8002416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b89      	ldr	r3, [pc, #548]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x12c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d168      	bne.n	80024e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e24c      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x76>
 8002420:	4b80      	ldr	r3, [pc, #512]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a7f      	ldr	r2, [pc, #508]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b7b      	ldr	r3, [pc, #492]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b78      	ldr	r3, [pc, #480]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0xbc>
 800245a:	4b72      	ldr	r3, [pc, #456]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xd4>
 8002474:	4b6b      	ldr	r3, [pc, #428]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6a      	ldr	r2, [pc, #424]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b68      	ldr	r3, [pc, #416]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a67      	ldr	r2, [pc, #412]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff fc1e 	bl	8001cd4 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff fc1a 	bl	8001cd4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e200      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xe4>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fc0a 	bl	8001cd4 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fc06 	bl	8001cd4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ec      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x10c>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024fe:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
 800250a:	4b46      	ldr	r3, [pc, #280]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b43      	ldr	r3, [pc, #268]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b3d      	ldr	r3, [pc, #244]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4939      	ldr	r1, [pc, #228]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e03a      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7ff fbbf 	bl	8001cd4 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7ff fbbb 	bl	8001cd4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1a1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4927      	ldr	r1, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <HAL_RCC_OscConfig+0x270>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fb9e 	bl	8001cd4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7ff fb9a 	bl	8001cd4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e180      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03a      	beq.n	800263c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7ff fb7e 	bl	8001cd4 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff fb7a 	bl	8001cd4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e160      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 face 	bl	8002b9c <RCC_Delay>
 8002600:	e01c      	b.n	800263c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_RCC_OscConfig+0x274>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002608:	f7ff fb64 	bl	8001cd4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fb60 	bl	8001cd4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d908      	bls.n	8002630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e146      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	42420000 	.word	0x42420000
 800262c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b92      	ldr	r3, [pc, #584]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e9      	bne.n	8002610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a6 	beq.w	8002796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b88      	ldr	r3, [pc, #544]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a87      	ldr	r2, [pc, #540]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b82      	ldr	r3, [pc, #520]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b7f      	ldr	r3, [pc, #508]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7e      	ldr	r2, [pc, #504]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb21 	bl	8001cd4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002696:	f7ff fb1d 	bl	8001cd4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	@ 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e103      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x4c8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x312>
 80026bc:	4b6f      	ldr	r3, [pc, #444]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e02d      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x334>
 80026d2:	4b6a      	ldr	r3, [pc, #424]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b67      	ldr	r3, [pc, #412]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a66      	ldr	r2, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	e01c      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x356>
 80026f4:	4b61      	ldr	r3, [pc, #388]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a60      	ldr	r2, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	4b5e      	ldr	r3, [pc, #376]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a5d      	ldr	r2, [pc, #372]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x36e>
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b58      	ldr	r3, [pc, #352]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a57      	ldr	r2, [pc, #348]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff fad1 	bl	8001cd4 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7ff facd 	bl	8001cd4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCC_OscConfig+0x37e>
 8002758:	e014      	b.n	8002784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff fabb 	bl	8001cd4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff fab7 	bl	8001cd4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e09b      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ee      	bne.n	8002762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002784:	7dfb      	ldrb	r3, [r7, #23]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a3b      	ldr	r2, [pc, #236]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a0:	4b36      	ldr	r3, [pc, #216]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d061      	beq.n	8002870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d146      	bne.n	8002842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b4:	4b33      	ldr	r3, [pc, #204]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff fa8b 	bl	8001cd4 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7ff fa87 	bl	8001cd4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ea:	4b24      	ldr	r3, [pc, #144]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4921      	ldr	r1, [pc, #132]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a19      	ldr	r1, [r3, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	430b      	orrs	r3, r1
 800280e:	491b      	ldr	r1, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7ff fa5b 	bl	8001cd4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7ff fa57 	bl	8001cd4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x46a>
 8002840:	e035      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fa44 	bl	8001cd4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002850:	f7ff fa40 	bl	8001cd4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e026      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x498>
 800286e:	e01e      	b.n	80028ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e019      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_RCC_OscConfig+0x500>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7ff f992 	bl	8001cd4 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7ff f98e 	bl	8001cd4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	@ (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f8f0 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	080047c0 	.word	0x080047c0
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	20000008 	.word	0x20000008

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8002abe:	e027      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac2:	613b      	str	r3, [r7, #16]
      break;
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0c9b      	lsrs	r3, r3, #18
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0c5b      	lsrs	r3, r3, #17
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002af2:	fb03 f202 	mul.w	r2, r3, r2
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	613b      	str	r3, [r7, #16]
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	693b      	ldr	r3, [r7, #16]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	080047d8 	.word	0x080047d8
 8002b30:	080047e8 	.word	0x080047e8
 8002b34:	003d0900 	.word	0x003d0900

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	@ (8002b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b50:	f7ff fff2 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	080047d0 	.word	0x080047d0

08002b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0adb      	lsrs	r3, r3, #11
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	080047d0 	.word	0x080047d0

08002b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <RCC_Delay+0x34>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <RCC_Delay+0x38>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a5b      	lsrs	r3, r3, #9
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb8:	bf00      	nop
  }
  while (Delay --);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	60fa      	str	r2, [r7, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f9      	bne.n	8002bb8 <RCC_Delay+0x1c>
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe ff10 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	@ 0x24
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fd6f 	bl	8003700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	f040 8081 	bne.w	8002d9c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_UART_Receive+0x2e>
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2222      	movs	r2, #34	@ 0x22
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cbe:	f7ff f809 	bl	8001cd4 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd8:	d108      	bne.n	8002cec <HAL_UART_Receive+0x74>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	e003      	b.n	8002cf4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cf4:	e047      	b.n	8002d86 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2120      	movs	r1, #32
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb09 	bl	8003318 <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e042      	b.n	8002d9e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	3302      	adds	r3, #2
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e01f      	b.n	8002d78 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d007      	beq.n	8002d52 <HAL_UART_Receive+0xda>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_UART_Receive+0xe8>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e008      	b.n	8002d72 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1b2      	bne.n	8002cf6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0ba      	sub	sp, #232	@ 0xe8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_UART_IRQHandler+0x66>
 8002dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fbbc 	bl	8003584 <UART_Receive_IT>
      return;
 8002e0c:	e25b      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80de 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x22c>
 8002e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80d1 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_UART_IRQHandler+0xae>
 8002e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_UART_IRQHandler+0xd2>
 8002e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_UART_IRQHandler+0xf6>
 8002e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_UART_IRQHandler+0x126>
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 81f2 	beq.w	80032bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x14e>
 8002ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fb47 	bl	8003584 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_UART_IRQHandler+0x17a>
 8002f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d04f      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa51 	bl	80033ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d041      	beq.n	8002fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3314      	adds	r3, #20
 8002f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1d9      	bne.n	8002f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d013      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003188 <HAL_UART_IRQHandler+0x3e0>)
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f812 	bl	8001fc0 <HAL_DMA_Abort_IT>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fac:	4610      	mov	r0, r2
 8002fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	e00e      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f99c 	bl	80032f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	e00a      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f998 	bl	80032f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	e006      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f994 	bl	80032f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fce:	e175      	b.n	80032bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	bf00      	nop
    return;
 8002fd2:	e173      	b.n	80032bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	f040 814f 	bne.w	800327c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8148 	beq.w	800327c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8141 	beq.w	800327c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80b6 	beq.w	800318c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800302c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8145 	beq.w	80032c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800303a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800303e:	429a      	cmp	r2, r3
 8003040:	f080 813e 	bcs.w	80032c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800304a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b20      	cmp	r3, #32
 8003054:	f000 8088 	beq.w	8003168 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800306e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003076:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003084:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003090:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800309c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1d9      	bne.n	8003058 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3314      	adds	r3, #20
 80030c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e1      	bne.n	80030a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ea:	e853 3f00 	ldrex	r3, [r3]
 80030ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003104:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003106:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800310a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e3      	bne.n	80030e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003138:	f023 0310 	bic.w	r3, r3, #16
 800313c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800314a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800314c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e3      	bne.n	8003126 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fef1 	bl	8001f4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003176:	b29b      	uxth	r3, r3
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8bf 	bl	8003302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003184:	e09c      	b.n	80032c0 <HAL_UART_IRQHandler+0x518>
 8003186:	bf00      	nop
 8003188:	0800348f 	.word	0x0800348f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 808e 	beq.w	80032c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8089 	beq.w	80032c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e3      	bne.n	80031b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	623b      	str	r3, [r7, #32]
   return(result);
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3314      	adds	r3, #20
 800320a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800320e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e3      	bne.n	80031ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0310 	bic.w	r3, r3, #16
 8003246:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003254:	61fa      	str	r2, [r7, #28]
 8003256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	617b      	str	r3, [r7, #20]
   return(result);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e3      	bne.n	8003230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800326e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f844 	bl	8003302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800327a:	e023      	b.n	80032c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_UART_IRQHandler+0x4f4>
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f90e 	bl	80034b6 <UART_Transmit_IT>
    return;
 800329a:	e014      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_UART_IRQHandler+0x51e>
 80032a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f94d 	bl	8003554 <UART_EndTransmit_IT>
    return;
 80032ba:	e004      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80032bc:	bf00      	nop
 80032be:	e002      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032c4:	bf00      	nop
  }
}
 80032c6:	37e8      	adds	r7, #232	@ 0xe8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003328:	e03b      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003330:	d037      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fe fccf 	bl	8001cd4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <UART_WaitOnFlagUntilTimeout+0x30>
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03a      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d023      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b80      	cmp	r3, #128	@ 0x80
 800335e:	d020      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	d01d      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d116      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f81d 	bl	80033ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2208      	movs	r2, #8
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e00f      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4013      	ands	r3, r2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d0b4      	beq.n	800332a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b095      	sub	sp, #84	@ 0x54
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80033f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	61fb      	str	r3, [r7, #28]
   return(result);
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800342c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e5      	bne.n	8003406 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	2b01      	cmp	r3, #1
 8003440:	d119      	bne.n	8003476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	60bb      	str	r3, [r7, #8]
   return(result);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f023 0310 	bic.w	r3, r3, #16
 8003458:	647b      	str	r3, [r7, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003462:	61ba      	str	r2, [r7, #24]
 8003464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6979      	ldr	r1, [r7, #20]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	613b      	str	r3, [r7, #16]
   return(result);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e5      	bne.n	8003442 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003484:	bf00      	nop
 8003486:	3754      	adds	r7, #84	@ 0x54
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff ff21 	bl	80032f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b21      	cmp	r3, #33	@ 0x21
 80034c8:	d13e      	bne.n	8003548 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d2:	d114      	bne.n	80034fe <UART_Transmit_IT+0x48>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d110      	bne.n	80034fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	621a      	str	r2, [r3, #32]
 80034fc:	e008      	b.n	8003510 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6211      	str	r1, [r2, #32]
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4619      	mov	r1, r3
 800351e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fea9 	bl	80032cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	@ 0x30
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b22      	cmp	r3, #34	@ 0x22
 8003596:	f040 80ae 	bne.w	80036f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a2:	d117      	bne.n	80035d4 <UART_Receive_IT+0x50>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d113      	bne.n	80035d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035d2:	e026      	b.n	8003622 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e6:	d007      	beq.n	80035f8 <UART_Receive_IT+0x74>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <UART_Receive_IT+0x82>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	e008      	b.n	8003618 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003612:	b2da      	uxtb	r2, r3
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4619      	mov	r1, r3
 8003630:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003632:	2b00      	cmp	r3, #0
 8003634:	d15d      	bne.n	80036f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0220 	bic.w	r2, r2, #32
 8003644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d135      	bne.n	80036e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f023 0310 	bic.w	r3, r3, #16
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a2:	623a      	str	r2, [r7, #32]
 80036a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	69f9      	ldr	r1, [r7, #28]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d10a      	bne.n	80036da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036de:	4619      	mov	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fe0e 	bl	8003302 <HAL_UARTEx_RxEventCallback>
 80036e6:	e002      	b.n	80036ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fdf8 	bl	80032de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e002      	b.n	80036f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3730      	adds	r7, #48	@ 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800373a:	f023 030c 	bic.w	r3, r3, #12
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	430b      	orrs	r3, r1
 8003746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2c      	ldr	r2, [pc, #176]	@ (8003814 <UART_SetConfig+0x114>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7ff fa04 	bl	8002b74 <HAL_RCC_GetPCLK2Freq>
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	e002      	b.n	8003776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003770:	f7ff f9ec 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8003774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <UART_SetConfig+0x118>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	0119      	lsls	r1, r3, #4
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	009a      	lsls	r2, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <UART_SetConfig+0x118>)
 80037ae:	fba3 0302 	umull	r0, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2064      	movs	r0, #100	@ 0x64
 80037b6:	fb00 f303 	mul.w	r3, r0, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	3332      	adds	r3, #50	@ 0x32
 80037c0:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <UART_SetConfig+0x118>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037cc:	4419      	add	r1, r3
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <UART_SetConfig+0x118>)
 80037e6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2064      	movs	r0, #100	@ 0x64
 80037ee:	fb00 f303 	mul.w	r3, r0, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	@ 0x32
 80037f8:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <UART_SetConfig+0x118>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	440a      	add	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40013800 	.word	0x40013800
 8003818:	51eb851f 	.word	0x51eb851f

0800381c <atoi>:
 800381c:	220a      	movs	r2, #10
 800381e:	2100      	movs	r1, #0
 8003820:	f000 b87a 	b.w	8003918 <strtol>

08003824 <_strtol_l.isra.0>:
 8003824:	2b24      	cmp	r3, #36	@ 0x24
 8003826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382a:	4686      	mov	lr, r0
 800382c:	4690      	mov	r8, r2
 800382e:	d801      	bhi.n	8003834 <_strtol_l.isra.0+0x10>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <_strtol_l.isra.0+0x1e>
 8003834:	f000 f882 	bl	800393c <__errno>
 8003838:	2316      	movs	r3, #22
 800383a:	6003      	str	r3, [r0, #0]
 800383c:	2000      	movs	r0, #0
 800383e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003842:	460d      	mov	r5, r1
 8003844:	4833      	ldr	r0, [pc, #204]	@ (8003914 <_strtol_l.isra.0+0xf0>)
 8003846:	462a      	mov	r2, r5
 8003848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800384c:	5d06      	ldrb	r6, [r0, r4]
 800384e:	f016 0608 	ands.w	r6, r6, #8
 8003852:	d1f8      	bne.n	8003846 <_strtol_l.isra.0+0x22>
 8003854:	2c2d      	cmp	r4, #45	@ 0x2d
 8003856:	d110      	bne.n	800387a <_strtol_l.isra.0+0x56>
 8003858:	2601      	movs	r6, #1
 800385a:	782c      	ldrb	r4, [r5, #0]
 800385c:	1c95      	adds	r5, r2, #2
 800385e:	f033 0210 	bics.w	r2, r3, #16
 8003862:	d115      	bne.n	8003890 <_strtol_l.isra.0+0x6c>
 8003864:	2c30      	cmp	r4, #48	@ 0x30
 8003866:	d10d      	bne.n	8003884 <_strtol_l.isra.0+0x60>
 8003868:	782a      	ldrb	r2, [r5, #0]
 800386a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800386e:	2a58      	cmp	r2, #88	@ 0x58
 8003870:	d108      	bne.n	8003884 <_strtol_l.isra.0+0x60>
 8003872:	786c      	ldrb	r4, [r5, #1]
 8003874:	3502      	adds	r5, #2
 8003876:	2310      	movs	r3, #16
 8003878:	e00a      	b.n	8003890 <_strtol_l.isra.0+0x6c>
 800387a:	2c2b      	cmp	r4, #43	@ 0x2b
 800387c:	bf04      	itt	eq
 800387e:	782c      	ldrbeq	r4, [r5, #0]
 8003880:	1c95      	addeq	r5, r2, #2
 8003882:	e7ec      	b.n	800385e <_strtol_l.isra.0+0x3a>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f6      	bne.n	8003876 <_strtol_l.isra.0+0x52>
 8003888:	2c30      	cmp	r4, #48	@ 0x30
 800388a:	bf14      	ite	ne
 800388c:	230a      	movne	r3, #10
 800388e:	2308      	moveq	r3, #8
 8003890:	2200      	movs	r2, #0
 8003892:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003896:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800389a:	fbbc f9f3 	udiv	r9, ip, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80038a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80038a8:	2f09      	cmp	r7, #9
 80038aa:	d80f      	bhi.n	80038cc <_strtol_l.isra.0+0xa8>
 80038ac:	463c      	mov	r4, r7
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	dd1b      	ble.n	80038ea <_strtol_l.isra.0+0xc6>
 80038b2:	1c57      	adds	r7, r2, #1
 80038b4:	d007      	beq.n	80038c6 <_strtol_l.isra.0+0xa2>
 80038b6:	4581      	cmp	r9, r0
 80038b8:	d314      	bcc.n	80038e4 <_strtol_l.isra.0+0xc0>
 80038ba:	d101      	bne.n	80038c0 <_strtol_l.isra.0+0x9c>
 80038bc:	45a2      	cmp	sl, r4
 80038be:	db11      	blt.n	80038e4 <_strtol_l.isra.0+0xc0>
 80038c0:	2201      	movs	r2, #1
 80038c2:	fb00 4003 	mla	r0, r0, r3, r4
 80038c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038ca:	e7eb      	b.n	80038a4 <_strtol_l.isra.0+0x80>
 80038cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80038d0:	2f19      	cmp	r7, #25
 80038d2:	d801      	bhi.n	80038d8 <_strtol_l.isra.0+0xb4>
 80038d4:	3c37      	subs	r4, #55	@ 0x37
 80038d6:	e7ea      	b.n	80038ae <_strtol_l.isra.0+0x8a>
 80038d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80038dc:	2f19      	cmp	r7, #25
 80038de:	d804      	bhi.n	80038ea <_strtol_l.isra.0+0xc6>
 80038e0:	3c57      	subs	r4, #87	@ 0x57
 80038e2:	e7e4      	b.n	80038ae <_strtol_l.isra.0+0x8a>
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038e8:	e7ed      	b.n	80038c6 <_strtol_l.isra.0+0xa2>
 80038ea:	1c53      	adds	r3, r2, #1
 80038ec:	d108      	bne.n	8003900 <_strtol_l.isra.0+0xdc>
 80038ee:	2322      	movs	r3, #34	@ 0x22
 80038f0:	4660      	mov	r0, ip
 80038f2:	f8ce 3000 	str.w	r3, [lr]
 80038f6:	f1b8 0f00 	cmp.w	r8, #0
 80038fa:	d0a0      	beq.n	800383e <_strtol_l.isra.0+0x1a>
 80038fc:	1e69      	subs	r1, r5, #1
 80038fe:	e006      	b.n	800390e <_strtol_l.isra.0+0xea>
 8003900:	b106      	cbz	r6, 8003904 <_strtol_l.isra.0+0xe0>
 8003902:	4240      	negs	r0, r0
 8003904:	f1b8 0f00 	cmp.w	r8, #0
 8003908:	d099      	beq.n	800383e <_strtol_l.isra.0+0x1a>
 800390a:	2a00      	cmp	r2, #0
 800390c:	d1f6      	bne.n	80038fc <_strtol_l.isra.0+0xd8>
 800390e:	f8c8 1000 	str.w	r1, [r8]
 8003912:	e794      	b.n	800383e <_strtol_l.isra.0+0x1a>
 8003914:	080047eb 	.word	0x080047eb

08003918 <strtol>:
 8003918:	4613      	mov	r3, r2
 800391a:	460a      	mov	r2, r1
 800391c:	4601      	mov	r1, r0
 800391e:	4802      	ldr	r0, [pc, #8]	@ (8003928 <strtol+0x10>)
 8003920:	6800      	ldr	r0, [r0, #0]
 8003922:	f7ff bf7f 	b.w	8003824 <_strtol_l.isra.0>
 8003926:	bf00      	nop
 8003928:	20000010 	.word	0x20000010

0800392c <memset>:
 800392c:	4603      	mov	r3, r0
 800392e:	4402      	add	r2, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	f803 1b01 	strb.w	r1, [r3], #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <__errno>:
 800393c:	4b01      	ldr	r3, [pc, #4]	@ (8003944 <__errno+0x8>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000010 	.word	0x20000010

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	2600      	movs	r6, #0
 800394c:	4d0c      	ldr	r5, [pc, #48]	@ (8003980 <__libc_init_array+0x38>)
 800394e:	4c0d      	ldr	r4, [pc, #52]	@ (8003984 <__libc_init_array+0x3c>)
 8003950:	1b64      	subs	r4, r4, r5
 8003952:	10a4      	asrs	r4, r4, #2
 8003954:	42a6      	cmp	r6, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	f000 ff26 	bl	80047a8 <_init>
 800395c:	2600      	movs	r6, #0
 800395e:	4d0a      	ldr	r5, [pc, #40]	@ (8003988 <__libc_init_array+0x40>)
 8003960:	4c0a      	ldr	r4, [pc, #40]	@ (800398c <__libc_init_array+0x44>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	42a6      	cmp	r6, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003970:	4798      	blx	r3
 8003972:	3601      	adds	r6, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f855 3b04 	ldr.w	r3, [r5], #4
 800397a:	4798      	blx	r3
 800397c:	3601      	adds	r6, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08004938 	.word	0x08004938
 8003984:	08004938 	.word	0x08004938
 8003988:	08004938 	.word	0x08004938
 800398c:	0800493c 	.word	0x0800493c

08003990 <pow>:
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4680      	mov	r8, r0
 800399a:	4689      	mov	r9, r1
 800399c:	f000 f868 	bl	8003a70 <__ieee754_pow>
 80039a0:	4622      	mov	r2, r4
 80039a2:	4606      	mov	r6, r0
 80039a4:	460f      	mov	r7, r1
 80039a6:	462b      	mov	r3, r5
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7fd f82e 	bl	8000a0c <__aeabi_dcmpun>
 80039b0:	bbc8      	cbnz	r0, 8003a26 <pow+0x96>
 80039b2:	2200      	movs	r2, #0
 80039b4:	2300      	movs	r3, #0
 80039b6:	4640      	mov	r0, r8
 80039b8:	4649      	mov	r1, r9
 80039ba:	f7fc fff5 	bl	80009a8 <__aeabi_dcmpeq>
 80039be:	b1b8      	cbz	r0, 80039f0 <pow+0x60>
 80039c0:	2200      	movs	r2, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	4620      	mov	r0, r4
 80039c6:	4629      	mov	r1, r5
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d141      	bne.n	8003a54 <pow+0xc4>
 80039d0:	4620      	mov	r0, r4
 80039d2:	4629      	mov	r1, r5
 80039d4:	f000 f844 	bl	8003a60 <finite>
 80039d8:	b328      	cbz	r0, 8003a26 <pow+0x96>
 80039da:	2200      	movs	r2, #0
 80039dc:	2300      	movs	r3, #0
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7fc ffeb 	bl	80009bc <__aeabi_dcmplt>
 80039e6:	b1f0      	cbz	r0, 8003a26 <pow+0x96>
 80039e8:	f7ff ffa8 	bl	800393c <__errno>
 80039ec:	2322      	movs	r3, #34	@ 0x22
 80039ee:	e019      	b.n	8003a24 <pow+0x94>
 80039f0:	4630      	mov	r0, r6
 80039f2:	4639      	mov	r1, r7
 80039f4:	f000 f834 	bl	8003a60 <finite>
 80039f8:	b9c8      	cbnz	r0, 8003a2e <pow+0x9e>
 80039fa:	4640      	mov	r0, r8
 80039fc:	4649      	mov	r1, r9
 80039fe:	f000 f82f 	bl	8003a60 <finite>
 8003a02:	b1a0      	cbz	r0, 8003a2e <pow+0x9e>
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f000 f82a 	bl	8003a60 <finite>
 8003a0c:	b178      	cbz	r0, 8003a2e <pow+0x9e>
 8003a0e:	4632      	mov	r2, r6
 8003a10:	463b      	mov	r3, r7
 8003a12:	4630      	mov	r0, r6
 8003a14:	4639      	mov	r1, r7
 8003a16:	f7fc fff9 	bl	8000a0c <__aeabi_dcmpun>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0e4      	beq.n	80039e8 <pow+0x58>
 8003a1e:	f7ff ff8d 	bl	800393c <__errno>
 8003a22:	2321      	movs	r3, #33	@ 0x21
 8003a24:	6003      	str	r3, [r0, #0]
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2300      	movs	r3, #0
 8003a32:	4630      	mov	r0, r6
 8003a34:	4639      	mov	r1, r7
 8003a36:	f7fc ffb7 	bl	80009a8 <__aeabi_dcmpeq>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d0f3      	beq.n	8003a26 <pow+0x96>
 8003a3e:	4640      	mov	r0, r8
 8003a40:	4649      	mov	r1, r9
 8003a42:	f000 f80d 	bl	8003a60 <finite>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0ed      	beq.n	8003a26 <pow+0x96>
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f000 f807 	bl	8003a60 <finite>
 8003a52:	e7c8      	b.n	80039e6 <pow+0x56>
 8003a54:	2600      	movs	r6, #0
 8003a56:	4f01      	ldr	r7, [pc, #4]	@ (8003a5c <pow+0xcc>)
 8003a58:	e7e5      	b.n	8003a26 <pow+0x96>
 8003a5a:	bf00      	nop
 8003a5c:	3ff00000 	.word	0x3ff00000

08003a60 <finite>:
 8003a60:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8003a64:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003a68:	0fc0      	lsrs	r0, r0, #31
 8003a6a:	4770      	bx	lr
 8003a6c:	0000      	movs	r0, r0
	...

08003a70 <__ieee754_pow>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	b091      	sub	sp, #68	@ 0x44
 8003a76:	e9cd 2300 	strd	r2, r3, [sp]
 8003a7a:	468b      	mov	fp, r1
 8003a7c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8003a80:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8003a84:	4682      	mov	sl, r0
 8003a86:	ea57 0001 	orrs.w	r0, r7, r1
 8003a8a:	d112      	bne.n	8003ab2 <__ieee754_pow+0x42>
 8003a8c:	4653      	mov	r3, sl
 8003a8e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8003a92:	18db      	adds	r3, r3, r3
 8003a94:	4152      	adcs	r2, r2
 8003a96:	4298      	cmp	r0, r3
 8003a98:	4b93      	ldr	r3, [pc, #588]	@ (8003ce8 <__ieee754_pow+0x278>)
 8003a9a:	4193      	sbcs	r3, r2
 8003a9c:	f080 84cd 	bcs.w	800443a <__ieee754_pow+0x9ca>
 8003aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	4659      	mov	r1, fp
 8003aa8:	f7fc fb60 	bl	800016c <__adddf3>
 8003aac:	b011      	add	sp, #68	@ 0x44
 8003aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	@ (8003cec <__ieee754_pow+0x27c>)
 8003ab4:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8003ab8:	429d      	cmp	r5, r3
 8003aba:	465e      	mov	r6, fp
 8003abc:	46d1      	mov	r9, sl
 8003abe:	d80b      	bhi.n	8003ad8 <__ieee754_pow+0x68>
 8003ac0:	d105      	bne.n	8003ace <__ieee754_pow+0x5e>
 8003ac2:	f1ba 0f00 	cmp.w	sl, #0
 8003ac6:	d1eb      	bne.n	8003aa0 <__ieee754_pow+0x30>
 8003ac8:	42af      	cmp	r7, r5
 8003aca:	d8e9      	bhi.n	8003aa0 <__ieee754_pow+0x30>
 8003acc:	e001      	b.n	8003ad2 <__ieee754_pow+0x62>
 8003ace:	429f      	cmp	r7, r3
 8003ad0:	d802      	bhi.n	8003ad8 <__ieee754_pow+0x68>
 8003ad2:	429f      	cmp	r7, r3
 8003ad4:	d10f      	bne.n	8003af6 <__ieee754_pow+0x86>
 8003ad6:	b171      	cbz	r1, 8003af6 <__ieee754_pow+0x86>
 8003ad8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8003adc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8003ae0:	ea56 0609 	orrs.w	r6, r6, r9
 8003ae4:	d1dc      	bne.n	8003aa0 <__ieee754_pow+0x30>
 8003ae6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003af0:	4152      	adcs	r2, r2
 8003af2:	429e      	cmp	r6, r3
 8003af4:	e7d0      	b.n	8003a98 <__ieee754_pow+0x28>
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	462b      	mov	r3, r5
 8003afa:	da42      	bge.n	8003b82 <__ieee754_pow+0x112>
 8003afc:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf0 <__ieee754_pow+0x280>)
 8003afe:	4297      	cmp	r7, r2
 8003b00:	d856      	bhi.n	8003bb0 <__ieee754_pow+0x140>
 8003b02:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003b06:	4297      	cmp	r7, r2
 8003b08:	f240 84a6 	bls.w	8004458 <__ieee754_pow+0x9e8>
 8003b0c:	153a      	asrs	r2, r7, #20
 8003b0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003b12:	2a14      	cmp	r2, #20
 8003b14:	dd18      	ble.n	8003b48 <__ieee754_pow+0xd8>
 8003b16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003b1a:	fa21 f402 	lsr.w	r4, r1, r2
 8003b1e:	fa04 f202 	lsl.w	r2, r4, r2
 8003b22:	428a      	cmp	r2, r1
 8003b24:	f040 8498 	bne.w	8004458 <__ieee754_pow+0x9e8>
 8003b28:	f004 0401 	and.w	r4, r4, #1
 8003b2c:	f1c4 0402 	rsb	r4, r4, #2
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d159      	bne.n	8003be8 <__ieee754_pow+0x178>
 8003b34:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8003b38:	d149      	bne.n	8003bce <__ieee754_pow+0x15e>
 8003b3a:	4652      	mov	r2, sl
 8003b3c:	465b      	mov	r3, fp
 8003b3e:	4650      	mov	r0, sl
 8003b40:	4659      	mov	r1, fp
 8003b42:	f7fc fcc9 	bl	80004d8 <__aeabi_dmul>
 8003b46:	e7b1      	b.n	8003aac <__ieee754_pow+0x3c>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d14c      	bne.n	8003be6 <__ieee754_pow+0x176>
 8003b4c:	f1c2 0214 	rsb	r2, r2, #20
 8003b50:	fa47 f402 	asr.w	r4, r7, r2
 8003b54:	fa04 f202 	lsl.w	r2, r4, r2
 8003b58:	42ba      	cmp	r2, r7
 8003b5a:	f040 847a 	bne.w	8004452 <__ieee754_pow+0x9e2>
 8003b5e:	f004 0401 	and.w	r4, r4, #1
 8003b62:	f1c4 0402 	rsb	r4, r4, #2
 8003b66:	4a63      	ldr	r2, [pc, #396]	@ (8003cf4 <__ieee754_pow+0x284>)
 8003b68:	4297      	cmp	r7, r2
 8003b6a:	d1e3      	bne.n	8003b34 <__ieee754_pow+0xc4>
 8003b6c:	f1b8 0f00 	cmp.w	r8, #0
 8003b70:	f280 846b 	bge.w	800444a <__ieee754_pow+0x9da>
 8003b74:	4652      	mov	r2, sl
 8003b76:	465b      	mov	r3, fp
 8003b78:	2000      	movs	r0, #0
 8003b7a:	495e      	ldr	r1, [pc, #376]	@ (8003cf4 <__ieee754_pow+0x284>)
 8003b7c:	f7fc fdd6 	bl	800072c <__aeabi_ddiv>
 8003b80:	e794      	b.n	8003aac <__ieee754_pow+0x3c>
 8003b82:	2400      	movs	r4, #0
 8003b84:	bb81      	cbnz	r1, 8003be8 <__ieee754_pow+0x178>
 8003b86:	4a59      	ldr	r2, [pc, #356]	@ (8003cec <__ieee754_pow+0x27c>)
 8003b88:	4297      	cmp	r7, r2
 8003b8a:	d1ec      	bne.n	8003b66 <__ieee754_pow+0xf6>
 8003b8c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8003b90:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8003b94:	ea53 0309 	orrs.w	r3, r3, r9
 8003b98:	f000 844f 	beq.w	800443a <__ieee754_pow+0x9ca>
 8003b9c:	4b56      	ldr	r3, [pc, #344]	@ (8003cf8 <__ieee754_pow+0x288>)
 8003b9e:	429d      	cmp	r5, r3
 8003ba0:	d908      	bls.n	8003bb4 <__ieee754_pow+0x144>
 8003ba2:	f1b8 0f00 	cmp.w	r8, #0
 8003ba6:	f280 844c 	bge.w	8004442 <__ieee754_pow+0x9d2>
 8003baa:	2000      	movs	r0, #0
 8003bac:	2100      	movs	r1, #0
 8003bae:	e77d      	b.n	8003aac <__ieee754_pow+0x3c>
 8003bb0:	2402      	movs	r4, #2
 8003bb2:	e7e7      	b.n	8003b84 <__ieee754_pow+0x114>
 8003bb4:	f1b8 0f00 	cmp.w	r8, #0
 8003bb8:	f04f 0000 	mov.w	r0, #0
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	f6bf af74 	bge.w	8003aac <__ieee754_pow+0x3c>
 8003bc4:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003bc8:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003bcc:	e76e      	b.n	8003aac <__ieee754_pow+0x3c>
 8003bce:	4a4b      	ldr	r2, [pc, #300]	@ (8003cfc <__ieee754_pow+0x28c>)
 8003bd0:	4590      	cmp	r8, r2
 8003bd2:	d109      	bne.n	8003be8 <__ieee754_pow+0x178>
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	db07      	blt.n	8003be8 <__ieee754_pow+0x178>
 8003bd8:	4650      	mov	r0, sl
 8003bda:	4659      	mov	r1, fp
 8003bdc:	b011      	add	sp, #68	@ 0x44
 8003bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be2:	f000 bd0f 	b.w	8004604 <__ieee754_sqrt>
 8003be6:	2400      	movs	r4, #0
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	f000 fc69 	bl	80044c4 <fabs>
 8003bf2:	9b02      	ldr	r3, [sp, #8]
 8003bf4:	f1b9 0f00 	cmp.w	r9, #0
 8003bf8:	d127      	bne.n	8003c4a <__ieee754_pow+0x1da>
 8003bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8003cf4 <__ieee754_pow+0x284>)
 8003bfc:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8003c00:	4594      	cmp	ip, r2
 8003c02:	d000      	beq.n	8003c06 <__ieee754_pow+0x196>
 8003c04:	bb0d      	cbnz	r5, 8003c4a <__ieee754_pow+0x1da>
 8003c06:	f1b8 0f00 	cmp.w	r8, #0
 8003c0a:	da05      	bge.n	8003c18 <__ieee754_pow+0x1a8>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	2000      	movs	r0, #0
 8003c12:	4938      	ldr	r1, [pc, #224]	@ (8003cf4 <__ieee754_pow+0x284>)
 8003c14:	f7fc fd8a 	bl	800072c <__aeabi_ddiv>
 8003c18:	2e00      	cmp	r6, #0
 8003c1a:	f6bf af47 	bge.w	8003aac <__ieee754_pow+0x3c>
 8003c1e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003c22:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003c26:	4325      	orrs	r5, r4
 8003c28:	d108      	bne.n	8003c3c <__ieee754_pow+0x1cc>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7fc fa99 	bl	8000168 <__aeabi_dsub>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	e79f      	b.n	8003b7c <__ieee754_pow+0x10c>
 8003c3c:	2c01      	cmp	r4, #1
 8003c3e:	f47f af35 	bne.w	8003aac <__ieee754_pow+0x3c>
 8003c42:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c46:	4619      	mov	r1, r3
 8003c48:	e730      	b.n	8003aac <__ieee754_pow+0x3c>
 8003c4a:	0ff2      	lsrs	r2, r6, #31
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	ea52 0c04 	orrs.w	ip, r2, r4
 8003c52:	d102      	bne.n	8003c5a <__ieee754_pow+0x1ea>
 8003c54:	4652      	mov	r2, sl
 8003c56:	465b      	mov	r3, fp
 8003c58:	e7e9      	b.n	8003c2e <__ieee754_pow+0x1be>
 8003c5a:	f04f 0900 	mov.w	r9, #0
 8003c5e:	3c01      	subs	r4, #1
 8003c60:	4314      	orrs	r4, r2
 8003c62:	bf14      	ite	ne
 8003c64:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8003cf4 <__ieee754_pow+0x284>
 8003c68:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8003d00 <__ieee754_pow+0x290>
 8003c6c:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8003c70:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8003c74:	f240 8104 	bls.w	8003e80 <__ieee754_pow+0x410>
 8003c78:	4b22      	ldr	r3, [pc, #136]	@ (8003d04 <__ieee754_pow+0x294>)
 8003c7a:	429f      	cmp	r7, r3
 8003c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <__ieee754_pow+0x288>)
 8003c7e:	d913      	bls.n	8003ca8 <__ieee754_pow+0x238>
 8003c80:	429d      	cmp	r5, r3
 8003c82:	d808      	bhi.n	8003c96 <__ieee754_pow+0x226>
 8003c84:	f1b8 0f00 	cmp.w	r8, #0
 8003c88:	da08      	bge.n	8003c9c <__ieee754_pow+0x22c>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	b011      	add	sp, #68	@ 0x44
 8003c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c92:	f000 bcb1 	b.w	80045f8 <__math_oflow>
 8003c96:	f1b8 0f00 	cmp.w	r8, #0
 8003c9a:	dcf6      	bgt.n	8003c8a <__ieee754_pow+0x21a>
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	b011      	add	sp, #68	@ 0x44
 8003ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	f000 bca3 	b.w	80045ee <__math_uflow>
 8003ca8:	429d      	cmp	r5, r3
 8003caa:	d20c      	bcs.n	8003cc6 <__ieee754_pow+0x256>
 8003cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f7fc fe82 	bl	80009bc <__aeabi_dcmplt>
 8003cb8:	3800      	subs	r0, #0
 8003cba:	bf18      	it	ne
 8003cbc:	2001      	movne	r0, #1
 8003cbe:	f1b8 0f00 	cmp.w	r8, #0
 8003cc2:	daec      	bge.n	8003c9e <__ieee754_pow+0x22e>
 8003cc4:	e7e2      	b.n	8003c8c <__ieee754_pow+0x21c>
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <__ieee754_pow+0x284>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	429d      	cmp	r5, r3
 8003ccc:	d91c      	bls.n	8003d08 <__ieee754_pow+0x298>
 8003cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f7fc fe72 	bl	80009bc <__aeabi_dcmplt>
 8003cd8:	3800      	subs	r0, #0
 8003cda:	bf18      	it	ne
 8003cdc:	2001      	movne	r0, #1
 8003cde:	f1b8 0f00 	cmp.w	r8, #0
 8003ce2:	dcd3      	bgt.n	8003c8c <__ieee754_pow+0x21c>
 8003ce4:	e7db      	b.n	8003c9e <__ieee754_pow+0x22e>
 8003ce6:	bf00      	nop
 8003ce8:	fff00000 	.word	0xfff00000
 8003cec:	7ff00000 	.word	0x7ff00000
 8003cf0:	433fffff 	.word	0x433fffff
 8003cf4:	3ff00000 	.word	0x3ff00000
 8003cf8:	3fefffff 	.word	0x3fefffff
 8003cfc:	3fe00000 	.word	0x3fe00000
 8003d00:	bff00000 	.word	0xbff00000
 8003d04:	43f00000 	.word	0x43f00000
 8003d08:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <__ieee754_pow+0x400>)
 8003d0a:	f7fc fa2d 	bl	8000168 <__aeabi_dsub>
 8003d0e:	a350      	add	r3, pc, #320	@ (adr r3, 8003e50 <__ieee754_pow+0x3e0>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4604      	mov	r4, r0
 8003d16:	460d      	mov	r5, r1
 8003d18:	f7fc fbde 	bl	80004d8 <__aeabi_dmul>
 8003d1c:	a34e      	add	r3, pc, #312	@ (adr r3, 8003e58 <__ieee754_pow+0x3e8>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	4606      	mov	r6, r0
 8003d24:	460f      	mov	r7, r1
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7fc fbd5 	bl	80004d8 <__aeabi_dmul>
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4682      	mov	sl, r0
 8003d32:	468b      	mov	fp, r1
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	4b4e      	ldr	r3, [pc, #312]	@ (8003e74 <__ieee754_pow+0x404>)
 8003d3a:	f7fc fbcd 	bl	80004d8 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	a147      	add	r1, pc, #284	@ (adr r1, 8003e60 <__ieee754_pow+0x3f0>)
 8003d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d48:	f7fc fa0e 	bl	8000168 <__aeabi_dsub>
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
 8003d50:	f7fc fbc2 	bl	80004d8 <__aeabi_dmul>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	2000      	movs	r0, #0
 8003d5a:	4947      	ldr	r1, [pc, #284]	@ (8003e78 <__ieee754_pow+0x408>)
 8003d5c:	f7fc fa04 	bl	8000168 <__aeabi_dsub>
 8003d60:	4622      	mov	r2, r4
 8003d62:	4680      	mov	r8, r0
 8003d64:	4689      	mov	r9, r1
 8003d66:	462b      	mov	r3, r5
 8003d68:	4620      	mov	r0, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f7fc fbb4 	bl	80004d8 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f7fc fbae 	bl	80004d8 <__aeabi_dmul>
 8003d7c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003e68 <__ieee754_pow+0x3f8>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fba9 	bl	80004d8 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4650      	mov	r0, sl
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	f7fc f9eb 	bl	8000168 <__aeabi_dsub>
 8003d92:	2400      	movs	r4, #0
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4680      	mov	r8, r0
 8003d9a:	4689      	mov	r9, r1
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	4639      	mov	r1, r7
 8003da0:	f7fc f9e4 	bl	800016c <__adddf3>
 8003da4:	4632      	mov	r2, r6
 8003da6:	463b      	mov	r3, r7
 8003da8:	4620      	mov	r0, r4
 8003daa:	460d      	mov	r5, r1
 8003dac:	f7fc f9dc 	bl	8000168 <__aeabi_dsub>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc f9d6 	bl	8000168 <__aeabi_dsub>
 8003dbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9304      	str	r3, [sp, #16]
 8003dc8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003dcc:	4606      	mov	r6, r0
 8003dce:	460f      	mov	r7, r1
 8003dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dd4:	465b      	mov	r3, fp
 8003dd6:	4652      	mov	r2, sl
 8003dd8:	f7fc f9c6 	bl	8000168 <__aeabi_dsub>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	462b      	mov	r3, r5
 8003de0:	f7fc fb7a 	bl	80004d8 <__aeabi_dmul>
 8003de4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003de8:	4680      	mov	r8, r0
 8003dea:	4689      	mov	r9, r1
 8003dec:	4630      	mov	r0, r6
 8003dee:	4639      	mov	r1, r7
 8003df0:	f7fc fb72 	bl	80004d8 <__aeabi_dmul>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc f9b6 	bl	800016c <__adddf3>
 8003e00:	465b      	mov	r3, fp
 8003e02:	4606      	mov	r6, r0
 8003e04:	460f      	mov	r7, r1
 8003e06:	4652      	mov	r2, sl
 8003e08:	4620      	mov	r0, r4
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	f7fc fb64 	bl	80004d8 <__aeabi_dmul>
 8003e10:	460b      	mov	r3, r1
 8003e12:	4602      	mov	r2, r0
 8003e14:	4680      	mov	r8, r0
 8003e16:	4689      	mov	r9, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc f9a6 	bl	800016c <__adddf3>
 8003e20:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <__ieee754_pow+0x40c>)
 8003e22:	4604      	mov	r4, r0
 8003e24:	4299      	cmp	r1, r3
 8003e26:	460d      	mov	r5, r1
 8003e28:	468b      	mov	fp, r1
 8003e2a:	f340 81fd 	ble.w	8004228 <__ieee754_pow+0x7b8>
 8003e2e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003e32:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003e36:	4303      	orrs	r3, r0
 8003e38:	f000 81dc 	beq.w	80041f4 <__ieee754_pow+0x784>
 8003e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2300      	movs	r3, #0
 8003e44:	f7fc fdba 	bl	80009bc <__aeabi_dcmplt>
 8003e48:	3800      	subs	r0, #0
 8003e4a:	bf18      	it	ne
 8003e4c:	2001      	movne	r0, #1
 8003e4e:	e71d      	b.n	8003c8c <__ieee754_pow+0x21c>
 8003e50:	60000000 	.word	0x60000000
 8003e54:	3ff71547 	.word	0x3ff71547
 8003e58:	f85ddf44 	.word	0xf85ddf44
 8003e5c:	3e54ae0b 	.word	0x3e54ae0b
 8003e60:	55555555 	.word	0x55555555
 8003e64:	3fd55555 	.word	0x3fd55555
 8003e68:	652b82fe 	.word	0x652b82fe
 8003e6c:	3ff71547 	.word	0x3ff71547
 8003e70:	3ff00000 	.word	0x3ff00000
 8003e74:	3fd00000 	.word	0x3fd00000
 8003e78:	3fe00000 	.word	0x3fe00000
 8003e7c:	408fffff 	.word	0x408fffff
 8003e80:	4ad3      	ldr	r2, [pc, #844]	@ (80041d0 <__ieee754_pow+0x760>)
 8003e82:	4032      	ands	r2, r6
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	f040 817a 	bne.w	800417e <__ieee754_pow+0x70e>
 8003e8a:	4bd2      	ldr	r3, [pc, #840]	@ (80041d4 <__ieee754_pow+0x764>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f7fc fb23 	bl	80004d8 <__aeabi_dmul>
 8003e92:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8003e96:	460b      	mov	r3, r1
 8003e98:	151a      	asrs	r2, r3, #20
 8003e9a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003e9e:	4422      	add	r2, r4
 8003ea0:	920a      	str	r2, [sp, #40]	@ 0x28
 8003ea2:	4acd      	ldr	r2, [pc, #820]	@ (80041d8 <__ieee754_pow+0x768>)
 8003ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8003eac:	4293      	cmp	r3, r2
 8003eae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003eb2:	dd08      	ble.n	8003ec6 <__ieee754_pow+0x456>
 8003eb4:	4ac9      	ldr	r2, [pc, #804]	@ (80041dc <__ieee754_pow+0x76c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f340 8163 	ble.w	8004182 <__ieee754_pow+0x712>
 8003ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ebe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	00f3      	lsls	r3, r6, #3
 8003eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ecc:	4bc4      	ldr	r3, [pc, #784]	@ (80041e0 <__ieee754_pow+0x770>)
 8003ece:	4629      	mov	r1, r5
 8003ed0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003ede:	4623      	mov	r3, r4
 8003ee0:	4682      	mov	sl, r0
 8003ee2:	f7fc f941 	bl	8000168 <__aeabi_dsub>
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	462b      	mov	r3, r5
 8003eea:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003eee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ef2:	f7fc f93b 	bl	800016c <__adddf3>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	2000      	movs	r0, #0
 8003efc:	49b9      	ldr	r1, [pc, #740]	@ (80041e4 <__ieee754_pow+0x774>)
 8003efe:	f7fc fc15 	bl	800072c <__aeabi_ddiv>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003f0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f0e:	f7fc fae3 	bl	80004d8 <__aeabi_dmul>
 8003f12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f16:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003f1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2200      	movs	r2, #0
 8003f22:	46ab      	mov	fp, r5
 8003f24:	106d      	asrs	r5, r5, #1
 8003f26:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003f30:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003f34:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003f38:	4640      	mov	r0, r8
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	461d      	mov	r5, r3
 8003f40:	f7fc faca 	bl	80004d8 <__aeabi_dmul>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f4c:	f7fc f90c 	bl	8000168 <__aeabi_dsub>
 8003f50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f54:	4606      	mov	r6, r0
 8003f56:	460f      	mov	r7, r1
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc f904 	bl	8000168 <__aeabi_dsub>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4650      	mov	r0, sl
 8003f66:	4659      	mov	r1, fp
 8003f68:	f7fc f8fe 	bl	8000168 <__aeabi_dsub>
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	f7fc fab2 	bl	80004d8 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4630      	mov	r0, r6
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f7fc f8f4 	bl	8000168 <__aeabi_dsub>
 8003f80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003f84:	f7fc faa8 	bl	80004d8 <__aeabi_dmul>
 8003f88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7fc faa0 	bl	80004d8 <__aeabi_dmul>
 8003f98:	a37b      	add	r3, pc, #492	@ (adr r3, 8004188 <__ieee754_pow+0x718>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	f7fc fa99 	bl	80004d8 <__aeabi_dmul>
 8003fa6:	a37a      	add	r3, pc, #488	@ (adr r3, 8004190 <__ieee754_pow+0x720>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f7fc f8de 	bl	800016c <__adddf3>
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	f7fc fa90 	bl	80004d8 <__aeabi_dmul>
 8003fb8:	a377      	add	r3, pc, #476	@ (adr r3, 8004198 <__ieee754_pow+0x728>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc f8d5 	bl	800016c <__adddf3>
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	f7fc fa87 	bl	80004d8 <__aeabi_dmul>
 8003fca:	a375      	add	r3, pc, #468	@ (adr r3, 80041a0 <__ieee754_pow+0x730>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc f8cc 	bl	800016c <__adddf3>
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	f7fc fa7e 	bl	80004d8 <__aeabi_dmul>
 8003fdc:	a372      	add	r3, pc, #456	@ (adr r3, 80041a8 <__ieee754_pow+0x738>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f8c3 	bl	800016c <__adddf3>
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	f7fc fa75 	bl	80004d8 <__aeabi_dmul>
 8003fee:	a370      	add	r3, pc, #448	@ (adr r3, 80041b0 <__ieee754_pow+0x740>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc f8ba 	bl	800016c <__adddf3>
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4606      	mov	r6, r0
 8003ffc:	460f      	mov	r7, r1
 8003ffe:	462b      	mov	r3, r5
 8004000:	4620      	mov	r0, r4
 8004002:	4629      	mov	r1, r5
 8004004:	f7fc fa68 	bl	80004d8 <__aeabi_dmul>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4630      	mov	r0, r6
 800400e:	4639      	mov	r1, r7
 8004010:	f7fc fa62 	bl	80004d8 <__aeabi_dmul>
 8004014:	4604      	mov	r4, r0
 8004016:	460d      	mov	r5, r1
 8004018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	f7fc f8a4 	bl	800016c <__adddf3>
 8004024:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004028:	f7fc fa56 	bl	80004d8 <__aeabi_dmul>
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	f7fc f89c 	bl	800016c <__adddf3>
 8004034:	4642      	mov	r2, r8
 8004036:	4682      	mov	sl, r0
 8004038:	468b      	mov	fp, r1
 800403a:	464b      	mov	r3, r9
 800403c:	4640      	mov	r0, r8
 800403e:	4649      	mov	r1, r9
 8004040:	f7fc fa4a 	bl	80004d8 <__aeabi_dmul>
 8004044:	2200      	movs	r2, #0
 8004046:	4b68      	ldr	r3, [pc, #416]	@ (80041e8 <__ieee754_pow+0x778>)
 8004048:	4606      	mov	r6, r0
 800404a:	460f      	mov	r7, r1
 800404c:	f7fc f88e 	bl	800016c <__adddf3>
 8004050:	4652      	mov	r2, sl
 8004052:	465b      	mov	r3, fp
 8004054:	f7fc f88a 	bl	800016c <__adddf3>
 8004058:	2400      	movs	r4, #0
 800405a:	460d      	mov	r5, r1
 800405c:	4622      	mov	r2, r4
 800405e:	460b      	mov	r3, r1
 8004060:	4640      	mov	r0, r8
 8004062:	4649      	mov	r1, r9
 8004064:	f7fc fa38 	bl	80004d8 <__aeabi_dmul>
 8004068:	2200      	movs	r2, #0
 800406a:	4680      	mov	r8, r0
 800406c:	4689      	mov	r9, r1
 800406e:	4620      	mov	r0, r4
 8004070:	4629      	mov	r1, r5
 8004072:	4b5d      	ldr	r3, [pc, #372]	@ (80041e8 <__ieee754_pow+0x778>)
 8004074:	f7fc f878 	bl	8000168 <__aeabi_dsub>
 8004078:	4632      	mov	r2, r6
 800407a:	463b      	mov	r3, r7
 800407c:	f7fc f874 	bl	8000168 <__aeabi_dsub>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4650      	mov	r0, sl
 8004086:	4659      	mov	r1, fp
 8004088:	f7fc f86e 	bl	8000168 <__aeabi_dsub>
 800408c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004090:	f7fc fa22 	bl	80004d8 <__aeabi_dmul>
 8004094:	4622      	mov	r2, r4
 8004096:	4606      	mov	r6, r0
 8004098:	460f      	mov	r7, r1
 800409a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800409e:	462b      	mov	r3, r5
 80040a0:	f7fc fa1a 	bl	80004d8 <__aeabi_dmul>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4630      	mov	r0, r6
 80040aa:	4639      	mov	r1, r7
 80040ac:	f7fc f85e 	bl	800016c <__adddf3>
 80040b0:	2400      	movs	r4, #0
 80040b2:	4606      	mov	r6, r0
 80040b4:	460f      	mov	r7, r1
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4640      	mov	r0, r8
 80040bc:	4649      	mov	r1, r9
 80040be:	f7fc f855 	bl	800016c <__adddf3>
 80040c2:	a33d      	add	r3, pc, #244	@ (adr r3, 80041b8 <__ieee754_pow+0x748>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	4620      	mov	r0, r4
 80040ca:	460d      	mov	r5, r1
 80040cc:	f7fc fa04 	bl	80004d8 <__aeabi_dmul>
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040d8:	4620      	mov	r0, r4
 80040da:	4629      	mov	r1, r5
 80040dc:	f7fc f844 	bl	8000168 <__aeabi_dsub>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4630      	mov	r0, r6
 80040e6:	4639      	mov	r1, r7
 80040e8:	f7fc f83e 	bl	8000168 <__aeabi_dsub>
 80040ec:	a334      	add	r3, pc, #208	@ (adr r3, 80041c0 <__ieee754_pow+0x750>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc f9f1 	bl	80004d8 <__aeabi_dmul>
 80040f6:	a334      	add	r3, pc, #208	@ (adr r3, 80041c8 <__ieee754_pow+0x758>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	4606      	mov	r6, r0
 80040fe:	460f      	mov	r7, r1
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc f9e8 	bl	80004d8 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4630      	mov	r0, r6
 800410e:	4639      	mov	r1, r7
 8004110:	f7fc f82c 	bl	800016c <__adddf3>
 8004114:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004116:	4b35      	ldr	r3, [pc, #212]	@ (80041ec <__ieee754_pow+0x77c>)
 8004118:	2400      	movs	r4, #0
 800411a:	4413      	add	r3, r2
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f7fc f824 	bl	800016c <__adddf3>
 8004124:	4682      	mov	sl, r0
 8004126:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004128:	468b      	mov	fp, r1
 800412a:	f7fc f96b 	bl	8000404 <__aeabi_i2d>
 800412e:	4606      	mov	r6, r0
 8004130:	460f      	mov	r7, r1
 8004132:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004134:	4b2e      	ldr	r3, [pc, #184]	@ (80041f0 <__ieee754_pow+0x780>)
 8004136:	4413      	add	r3, r2
 8004138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800413c:	4652      	mov	r2, sl
 800413e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004142:	465b      	mov	r3, fp
 8004144:	f7fc f812 	bl	800016c <__adddf3>
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	f7fc f80e 	bl	800016c <__adddf3>
 8004150:	4632      	mov	r2, r6
 8004152:	463b      	mov	r3, r7
 8004154:	f7fc f80a 	bl	800016c <__adddf3>
 8004158:	4632      	mov	r2, r6
 800415a:	463b      	mov	r3, r7
 800415c:	4620      	mov	r0, r4
 800415e:	460d      	mov	r5, r1
 8004160:	f7fc f802 	bl	8000168 <__aeabi_dsub>
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	f7fb fffe 	bl	8000168 <__aeabi_dsub>
 800416c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004170:	f7fb fffa 	bl	8000168 <__aeabi_dsub>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4650      	mov	r0, sl
 800417a:	4659      	mov	r1, fp
 800417c:	e61c      	b.n	8003db8 <__ieee754_pow+0x348>
 800417e:	2400      	movs	r4, #0
 8004180:	e68a      	b.n	8003e98 <__ieee754_pow+0x428>
 8004182:	2601      	movs	r6, #1
 8004184:	e6a0      	b.n	8003ec8 <__ieee754_pow+0x458>
 8004186:	bf00      	nop
 8004188:	4a454eef 	.word	0x4a454eef
 800418c:	3fca7e28 	.word	0x3fca7e28
 8004190:	93c9db65 	.word	0x93c9db65
 8004194:	3fcd864a 	.word	0x3fcd864a
 8004198:	a91d4101 	.word	0xa91d4101
 800419c:	3fd17460 	.word	0x3fd17460
 80041a0:	518f264d 	.word	0x518f264d
 80041a4:	3fd55555 	.word	0x3fd55555
 80041a8:	db6fabff 	.word	0xdb6fabff
 80041ac:	3fdb6db6 	.word	0x3fdb6db6
 80041b0:	33333303 	.word	0x33333303
 80041b4:	3fe33333 	.word	0x3fe33333
 80041b8:	e0000000 	.word	0xe0000000
 80041bc:	3feec709 	.word	0x3feec709
 80041c0:	dc3a03fd 	.word	0xdc3a03fd
 80041c4:	3feec709 	.word	0x3feec709
 80041c8:	145b01f5 	.word	0x145b01f5
 80041cc:	be3e2fe0 	.word	0xbe3e2fe0
 80041d0:	7ff00000 	.word	0x7ff00000
 80041d4:	43400000 	.word	0x43400000
 80041d8:	0003988e 	.word	0x0003988e
 80041dc:	000bb679 	.word	0x000bb679
 80041e0:	08004910 	.word	0x08004910
 80041e4:	3ff00000 	.word	0x3ff00000
 80041e8:	40080000 	.word	0x40080000
 80041ec:	080048f0 	.word	0x080048f0
 80041f0:	08004900 	.word	0x08004900
 80041f4:	a39a      	add	r3, pc, #616	@ (adr r3, 8004460 <__ieee754_pow+0x9f0>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	4630      	mov	r0, r6
 80041fc:	4639      	mov	r1, r7
 80041fe:	f7fb ffb5 	bl	800016c <__adddf3>
 8004202:	4642      	mov	r2, r8
 8004204:	e9cd 0100 	strd	r0, r1, [sp]
 8004208:	464b      	mov	r3, r9
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fb ffab 	bl	8000168 <__aeabi_dsub>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800421a:	f7fc fbed 	bl	80009f8 <__aeabi_dcmpgt>
 800421e:	2800      	cmp	r0, #0
 8004220:	f47f ae0c 	bne.w	8003e3c <__ieee754_pow+0x3cc>
 8004224:	4ba0      	ldr	r3, [pc, #640]	@ (80044a8 <__ieee754_pow+0xa38>)
 8004226:	e022      	b.n	800426e <__ieee754_pow+0x7fe>
 8004228:	4ca0      	ldr	r4, [pc, #640]	@ (80044ac <__ieee754_pow+0xa3c>)
 800422a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800422e:	42a3      	cmp	r3, r4
 8004230:	d919      	bls.n	8004266 <__ieee754_pow+0x7f6>
 8004232:	4b9f      	ldr	r3, [pc, #636]	@ (80044b0 <__ieee754_pow+0xa40>)
 8004234:	440b      	add	r3, r1
 8004236:	4303      	orrs	r3, r0
 8004238:	d009      	beq.n	800424e <__ieee754_pow+0x7de>
 800423a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	2300      	movs	r3, #0
 8004242:	f7fc fbbb 	bl	80009bc <__aeabi_dcmplt>
 8004246:	3800      	subs	r0, #0
 8004248:	bf18      	it	ne
 800424a:	2001      	movne	r0, #1
 800424c:	e527      	b.n	8003c9e <__ieee754_pow+0x22e>
 800424e:	4642      	mov	r2, r8
 8004250:	464b      	mov	r3, r9
 8004252:	f7fb ff89 	bl	8000168 <__aeabi_dsub>
 8004256:	4632      	mov	r2, r6
 8004258:	463b      	mov	r3, r7
 800425a:	f7fc fbc3 	bl	80009e4 <__aeabi_dcmpge>
 800425e:	2800      	cmp	r0, #0
 8004260:	d1eb      	bne.n	800423a <__ieee754_pow+0x7ca>
 8004262:	4b94      	ldr	r3, [pc, #592]	@ (80044b4 <__ieee754_pow+0xa44>)
 8004264:	e003      	b.n	800426e <__ieee754_pow+0x7fe>
 8004266:	4a94      	ldr	r2, [pc, #592]	@ (80044b8 <__ieee754_pow+0xa48>)
 8004268:	4293      	cmp	r3, r2
 800426a:	f240 80e1 	bls.w	8004430 <__ieee754_pow+0x9c0>
 800426e:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8004272:	151b      	asrs	r3, r3, #20
 8004274:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8004278:	fa4a fa03 	asr.w	sl, sl, r3
 800427c:	44da      	add	sl, fp
 800427e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004282:	488e      	ldr	r0, [pc, #568]	@ (80044bc <__ieee754_pow+0xa4c>)
 8004284:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004288:	4108      	asrs	r0, r1
 800428a:	ea00 030a 	and.w	r3, r0, sl
 800428e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004292:	f1c1 0114 	rsb	r1, r1, #20
 8004296:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800429a:	4640      	mov	r0, r8
 800429c:	fa4a fa01 	asr.w	sl, sl, r1
 80042a0:	f1bb 0f00 	cmp.w	fp, #0
 80042a4:	4649      	mov	r1, r9
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	bfb8      	it	lt
 80042ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80042b0:	f7fb ff5a 	bl	8000168 <__aeabi_dsub>
 80042b4:	4680      	mov	r8, r0
 80042b6:	4689      	mov	r9, r1
 80042b8:	2400      	movs	r4, #0
 80042ba:	4632      	mov	r2, r6
 80042bc:	463b      	mov	r3, r7
 80042be:	4640      	mov	r0, r8
 80042c0:	4649      	mov	r1, r9
 80042c2:	f7fb ff53 	bl	800016c <__adddf3>
 80042c6:	a368      	add	r3, pc, #416	@ (adr r3, 8004468 <__ieee754_pow+0x9f8>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	4620      	mov	r0, r4
 80042ce:	460d      	mov	r5, r1
 80042d0:	f7fc f902 	bl	80004d8 <__aeabi_dmul>
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	e9cd 0100 	strd	r0, r1, [sp]
 80042dc:	4620      	mov	r0, r4
 80042de:	4629      	mov	r1, r5
 80042e0:	f7fb ff42 	bl	8000168 <__aeabi_dsub>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4630      	mov	r0, r6
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fb ff3c 	bl	8000168 <__aeabi_dsub>
 80042f0:	a35f      	add	r3, pc, #380	@ (adr r3, 8004470 <__ieee754_pow+0xa00>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fc f8ef 	bl	80004d8 <__aeabi_dmul>
 80042fa:	a35f      	add	r3, pc, #380	@ (adr r3, 8004478 <__ieee754_pow+0xa08>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	4680      	mov	r8, r0
 8004302:	4689      	mov	r9, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fc f8e6 	bl	80004d8 <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4640      	mov	r0, r8
 8004312:	4649      	mov	r1, r9
 8004314:	f7fb ff2a 	bl	800016c <__adddf3>
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004324:	f7fb ff22 	bl	800016c <__adddf3>
 8004328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800432c:	4680      	mov	r8, r0
 800432e:	4689      	mov	r9, r1
 8004330:	f7fb ff1a 	bl	8000168 <__aeabi_dsub>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4620      	mov	r0, r4
 800433a:	4629      	mov	r1, r5
 800433c:	f7fb ff14 	bl	8000168 <__aeabi_dsub>
 8004340:	4642      	mov	r2, r8
 8004342:	4606      	mov	r6, r0
 8004344:	460f      	mov	r7, r1
 8004346:	464b      	mov	r3, r9
 8004348:	4640      	mov	r0, r8
 800434a:	4649      	mov	r1, r9
 800434c:	f7fc f8c4 	bl	80004d8 <__aeabi_dmul>
 8004350:	a34b      	add	r3, pc, #300	@ (adr r3, 8004480 <__ieee754_pow+0xa10>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	4604      	mov	r4, r0
 8004358:	460d      	mov	r5, r1
 800435a:	f7fc f8bd 	bl	80004d8 <__aeabi_dmul>
 800435e:	a34a      	add	r3, pc, #296	@ (adr r3, 8004488 <__ieee754_pow+0xa18>)
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f7fb ff00 	bl	8000168 <__aeabi_dsub>
 8004368:	4622      	mov	r2, r4
 800436a:	462b      	mov	r3, r5
 800436c:	f7fc f8b4 	bl	80004d8 <__aeabi_dmul>
 8004370:	a347      	add	r3, pc, #284	@ (adr r3, 8004490 <__ieee754_pow+0xa20>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fb fef9 	bl	800016c <__adddf3>
 800437a:	4622      	mov	r2, r4
 800437c:	462b      	mov	r3, r5
 800437e:	f7fc f8ab 	bl	80004d8 <__aeabi_dmul>
 8004382:	a345      	add	r3, pc, #276	@ (adr r3, 8004498 <__ieee754_pow+0xa28>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f7fb feee 	bl	8000168 <__aeabi_dsub>
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	f7fc f8a2 	bl	80004d8 <__aeabi_dmul>
 8004394:	a342      	add	r3, pc, #264	@ (adr r3, 80044a0 <__ieee754_pow+0xa30>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f7fb fee7 	bl	800016c <__adddf3>
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f7fc f899 	bl	80004d8 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fb fedb 	bl	8000168 <__aeabi_dsub>
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4640      	mov	r0, r8
 80043bc:	4649      	mov	r1, r9
 80043be:	f7fc f88b 	bl	80004d8 <__aeabi_dmul>
 80043c2:	2200      	movs	r2, #0
 80043c4:	e9cd 0100 	strd	r0, r1, [sp]
 80043c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb feca 	bl	8000168 <__aeabi_dsub>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043dc:	f7fc f9a6 	bl	800072c <__aeabi_ddiv>
 80043e0:	4632      	mov	r2, r6
 80043e2:	4604      	mov	r4, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	463b      	mov	r3, r7
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fc f874 	bl	80004d8 <__aeabi_dmul>
 80043f0:	4632      	mov	r2, r6
 80043f2:	463b      	mov	r3, r7
 80043f4:	f7fb feba 	bl	800016c <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4620      	mov	r0, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f7fb feb2 	bl	8000168 <__aeabi_dsub>
 8004404:	4642      	mov	r2, r8
 8004406:	464b      	mov	r3, r9
 8004408:	f7fb feae 	bl	8000168 <__aeabi_dsub>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	2000      	movs	r0, #0
 8004412:	492b      	ldr	r1, [pc, #172]	@ (80044c0 <__ieee754_pow+0xa50>)
 8004414:	f7fb fea8 	bl	8000168 <__aeabi_dsub>
 8004418:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800441c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8004420:	da09      	bge.n	8004436 <__ieee754_pow+0x9c6>
 8004422:	4652      	mov	r2, sl
 8004424:	f000 f854 	bl	80044d0 <scalbn>
 8004428:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800442c:	f7ff bb89 	b.w	8003b42 <__ieee754_pow+0xd2>
 8004430:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004434:	e740      	b.n	80042b8 <__ieee754_pow+0x848>
 8004436:	4621      	mov	r1, r4
 8004438:	e7f6      	b.n	8004428 <__ieee754_pow+0x9b8>
 800443a:	2000      	movs	r0, #0
 800443c:	4920      	ldr	r1, [pc, #128]	@ (80044c0 <__ieee754_pow+0xa50>)
 800443e:	f7ff bb35 	b.w	8003aac <__ieee754_pow+0x3c>
 8004442:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004446:	f7ff bb31 	b.w	8003aac <__ieee754_pow+0x3c>
 800444a:	4650      	mov	r0, sl
 800444c:	4659      	mov	r1, fp
 800444e:	f7ff bb2d 	b.w	8003aac <__ieee754_pow+0x3c>
 8004452:	460c      	mov	r4, r1
 8004454:	f7ff bb87 	b.w	8003b66 <__ieee754_pow+0xf6>
 8004458:	2400      	movs	r4, #0
 800445a:	f7ff bb69 	b.w	8003b30 <__ieee754_pow+0xc0>
 800445e:	bf00      	nop
 8004460:	652b82fe 	.word	0x652b82fe
 8004464:	3c971547 	.word	0x3c971547
 8004468:	00000000 	.word	0x00000000
 800446c:	3fe62e43 	.word	0x3fe62e43
 8004470:	fefa39ef 	.word	0xfefa39ef
 8004474:	3fe62e42 	.word	0x3fe62e42
 8004478:	0ca86c39 	.word	0x0ca86c39
 800447c:	be205c61 	.word	0xbe205c61
 8004480:	72bea4d0 	.word	0x72bea4d0
 8004484:	3e663769 	.word	0x3e663769
 8004488:	c5d26bf1 	.word	0xc5d26bf1
 800448c:	3ebbbd41 	.word	0x3ebbbd41
 8004490:	af25de2c 	.word	0xaf25de2c
 8004494:	3f11566a 	.word	0x3f11566a
 8004498:	16bebd93 	.word	0x16bebd93
 800449c:	3f66c16c 	.word	0x3f66c16c
 80044a0:	5555553e 	.word	0x5555553e
 80044a4:	3fc55555 	.word	0x3fc55555
 80044a8:	40900000 	.word	0x40900000
 80044ac:	4090cbff 	.word	0x4090cbff
 80044b0:	3f6f3400 	.word	0x3f6f3400
 80044b4:	4090cc00 	.word	0x4090cc00
 80044b8:	3fe00000 	.word	0x3fe00000
 80044bc:	fff00000 	.word	0xfff00000
 80044c0:	3ff00000 	.word	0x3ff00000

080044c4 <fabs>:
 80044c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80044c8:	4619      	mov	r1, r3
 80044ca:	4770      	bx	lr
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <scalbn>:
 80044d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80044da:	4683      	mov	fp, r0
 80044dc:	468c      	mov	ip, r1
 80044de:	460b      	mov	r3, r1
 80044e0:	b982      	cbnz	r2, 8004504 <scalbn+0x34>
 80044e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80044e6:	4303      	orrs	r3, r0
 80044e8:	d035      	beq.n	8004556 <scalbn+0x86>
 80044ea:	4b2d      	ldr	r3, [pc, #180]	@ (80045a0 <scalbn+0xd0>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	f7fb fff3 	bl	80004d8 <__aeabi_dmul>
 80044f2:	4b2c      	ldr	r3, [pc, #176]	@ (80045a4 <scalbn+0xd4>)
 80044f4:	4683      	mov	fp, r0
 80044f6:	429e      	cmp	r6, r3
 80044f8:	468c      	mov	ip, r1
 80044fa:	da0d      	bge.n	8004518 <scalbn+0x48>
 80044fc:	a324      	add	r3, pc, #144	@ (adr r3, 8004590 <scalbn+0xc0>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	e019      	b.n	8004538 <scalbn+0x68>
 8004504:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004508:	42ba      	cmp	r2, r7
 800450a:	d109      	bne.n	8004520 <scalbn+0x50>
 800450c:	4602      	mov	r2, r0
 800450e:	f7fb fe2d 	bl	800016c <__adddf3>
 8004512:	4683      	mov	fp, r0
 8004514:	468c      	mov	ip, r1
 8004516:	e01e      	b.n	8004556 <scalbn+0x86>
 8004518:	460b      	mov	r3, r1
 800451a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800451e:	3a36      	subs	r2, #54	@ 0x36
 8004520:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004524:	428e      	cmp	r6, r1
 8004526:	dd0a      	ble.n	800453e <scalbn+0x6e>
 8004528:	a31b      	add	r3, pc, #108	@ (adr r3, 8004598 <scalbn+0xc8>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	4665      	mov	r5, ip
 8004530:	f363 051e 	bfi	r5, r3, #0, #31
 8004534:	4629      	mov	r1, r5
 8004536:	481c      	ldr	r0, [pc, #112]	@ (80045a8 <scalbn+0xd8>)
 8004538:	f7fb ffce 	bl	80004d8 <__aeabi_dmul>
 800453c:	e7e9      	b.n	8004512 <scalbn+0x42>
 800453e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004542:	4432      	add	r2, r6
 8004544:	428a      	cmp	r2, r1
 8004546:	dcef      	bgt.n	8004528 <scalbn+0x58>
 8004548:	2a00      	cmp	r2, #0
 800454a:	dd08      	ble.n	800455e <scalbn+0x8e>
 800454c:	f36f 531e 	bfc	r3, #20, #11
 8004550:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004554:	46ac      	mov	ip, r5
 8004556:	4658      	mov	r0, fp
 8004558:	4661      	mov	r1, ip
 800455a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800455e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004562:	da09      	bge.n	8004578 <scalbn+0xa8>
 8004564:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004568:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800456c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004570:	480e      	ldr	r0, [pc, #56]	@ (80045ac <scalbn+0xdc>)
 8004572:	f041 011f 	orr.w	r1, r1, #31
 8004576:	e7c1      	b.n	80044fc <scalbn+0x2c>
 8004578:	3236      	adds	r2, #54	@ 0x36
 800457a:	f36f 531e 	bfc	r3, #20, #11
 800457e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004582:	4658      	mov	r0, fp
 8004584:	4629      	mov	r1, r5
 8004586:	2200      	movs	r2, #0
 8004588:	4b09      	ldr	r3, [pc, #36]	@ (80045b0 <scalbn+0xe0>)
 800458a:	e7d5      	b.n	8004538 <scalbn+0x68>
 800458c:	f3af 8000 	nop.w
 8004590:	c2f8f359 	.word	0xc2f8f359
 8004594:	01a56e1f 	.word	0x01a56e1f
 8004598:	8800759c 	.word	0x8800759c
 800459c:	7e37e43c 	.word	0x7e37e43c
 80045a0:	43500000 	.word	0x43500000
 80045a4:	ffff3cb0 	.word	0xffff3cb0
 80045a8:	8800759c 	.word	0x8800759c
 80045ac:	c2f8f359 	.word	0xc2f8f359
 80045b0:	3c900000 	.word	0x3c900000

080045b4 <with_errno>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4604      	mov	r4, r0
 80045b8:	460d      	mov	r5, r1
 80045ba:	4616      	mov	r6, r2
 80045bc:	f7ff f9be 	bl	800393c <__errno>
 80045c0:	4629      	mov	r1, r5
 80045c2:	6006      	str	r6, [r0, #0]
 80045c4:	4620      	mov	r0, r4
 80045c6:	bd70      	pop	{r4, r5, r6, pc}

080045c8 <xflow>:
 80045c8:	b513      	push	{r0, r1, r4, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	b10c      	cbz	r4, 80045d6 <xflow+0xe>
 80045d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80045d6:	e9cd 2300 	strd	r2, r3, [sp]
 80045da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045de:	f7fb ff7b 	bl	80004d8 <__aeabi_dmul>
 80045e2:	2222      	movs	r2, #34	@ 0x22
 80045e4:	b002      	add	sp, #8
 80045e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ea:	f7ff bfe3 	b.w	80045b4 <with_errno>

080045ee <__math_uflow>:
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80045f4:	f7ff bfe8 	b.w	80045c8 <xflow>

080045f8 <__math_oflow>:
 80045f8:	2200      	movs	r2, #0
 80045fa:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80045fe:	f7ff bfe3 	b.w	80045c8 <xflow>
	...

08004604 <__ieee754_sqrt>:
 8004604:	4a65      	ldr	r2, [pc, #404]	@ (800479c <__ieee754_sqrt+0x198>)
 8004606:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	438a      	bics	r2, r1
 800460c:	4606      	mov	r6, r0
 800460e:	460f      	mov	r7, r1
 8004610:	460b      	mov	r3, r1
 8004612:	4604      	mov	r4, r0
 8004614:	d10e      	bne.n	8004634 <__ieee754_sqrt+0x30>
 8004616:	4602      	mov	r2, r0
 8004618:	f7fb ff5e 	bl	80004d8 <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fb fda2 	bl	800016c <__adddf3>
 8004628:	4606      	mov	r6, r0
 800462a:	460f      	mov	r7, r1
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	2900      	cmp	r1, #0
 8004636:	dc0c      	bgt.n	8004652 <__ieee754_sqrt+0x4e>
 8004638:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800463c:	4302      	orrs	r2, r0
 800463e:	d0f5      	beq.n	800462c <__ieee754_sqrt+0x28>
 8004640:	b189      	cbz	r1, 8004666 <__ieee754_sqrt+0x62>
 8004642:	4602      	mov	r2, r0
 8004644:	f7fb fd90 	bl	8000168 <__aeabi_dsub>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	f7fc f86e 	bl	800072c <__aeabi_ddiv>
 8004650:	e7ea      	b.n	8004628 <__ieee754_sqrt+0x24>
 8004652:	150a      	asrs	r2, r1, #20
 8004654:	d115      	bne.n	8004682 <__ieee754_sqrt+0x7e>
 8004656:	2100      	movs	r1, #0
 8004658:	e009      	b.n	800466e <__ieee754_sqrt+0x6a>
 800465a:	0ae3      	lsrs	r3, r4, #11
 800465c:	3a15      	subs	r2, #21
 800465e:	0564      	lsls	r4, r4, #21
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0fa      	beq.n	800465a <__ieee754_sqrt+0x56>
 8004664:	e7f7      	b.n	8004656 <__ieee754_sqrt+0x52>
 8004666:	460a      	mov	r2, r1
 8004668:	e7fa      	b.n	8004660 <__ieee754_sqrt+0x5c>
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	3101      	adds	r1, #1
 800466e:	02d8      	lsls	r0, r3, #11
 8004670:	d5fb      	bpl.n	800466a <__ieee754_sqrt+0x66>
 8004672:	1e48      	subs	r0, r1, #1
 8004674:	1a12      	subs	r2, r2, r0
 8004676:	f1c1 0020 	rsb	r0, r1, #32
 800467a:	fa24 f000 	lsr.w	r0, r4, r0
 800467e:	4303      	orrs	r3, r0
 8004680:	408c      	lsls	r4, r1
 8004682:	2700      	movs	r7, #0
 8004684:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8004688:	2116      	movs	r1, #22
 800468a:	07d2      	lsls	r2, r2, #31
 800468c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004690:	463a      	mov	r2, r7
 8004692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800469a:	bf5c      	itt	pl
 800469c:	005b      	lslpl	r3, r3, #1
 800469e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80046a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80046a6:	bf58      	it	pl
 80046a8:	0064      	lslpl	r4, r4, #1
 80046aa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80046ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80046b2:	0064      	lsls	r4, r4, #1
 80046b4:	1815      	adds	r5, r2, r0
 80046b6:	429d      	cmp	r5, r3
 80046b8:	bfde      	ittt	le
 80046ba:	182a      	addle	r2, r5, r0
 80046bc:	1b5b      	suble	r3, r3, r5
 80046be:	183f      	addle	r7, r7, r0
 80046c0:	0fe5      	lsrs	r5, r4, #31
 80046c2:	3901      	subs	r1, #1
 80046c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80046c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80046cc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80046d0:	d1f0      	bne.n	80046b4 <__ieee754_sqrt+0xb0>
 80046d2:	460d      	mov	r5, r1
 80046d4:	2620      	movs	r6, #32
 80046d6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80046da:	4293      	cmp	r3, r2
 80046dc:	eb00 0c01 	add.w	ip, r0, r1
 80046e0:	dc02      	bgt.n	80046e8 <__ieee754_sqrt+0xe4>
 80046e2:	d113      	bne.n	800470c <__ieee754_sqrt+0x108>
 80046e4:	45a4      	cmp	ip, r4
 80046e6:	d811      	bhi.n	800470c <__ieee754_sqrt+0x108>
 80046e8:	f1bc 0f00 	cmp.w	ip, #0
 80046ec:	eb0c 0100 	add.w	r1, ip, r0
 80046f0:	da3e      	bge.n	8004770 <__ieee754_sqrt+0x16c>
 80046f2:	2900      	cmp	r1, #0
 80046f4:	db3c      	blt.n	8004770 <__ieee754_sqrt+0x16c>
 80046f6:	f102 0e01 	add.w	lr, r2, #1
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	4672      	mov	r2, lr
 80046fe:	45a4      	cmp	ip, r4
 8004700:	bf88      	it	hi
 8004702:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8004706:	eba4 040c 	sub.w	r4, r4, ip
 800470a:	4405      	add	r5, r0
 800470c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8004710:	3e01      	subs	r6, #1
 8004712:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8004716:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800471a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800471e:	d1dc      	bne.n	80046da <__ieee754_sqrt+0xd6>
 8004720:	431c      	orrs	r4, r3
 8004722:	d01a      	beq.n	800475a <__ieee754_sqrt+0x156>
 8004724:	4c1e      	ldr	r4, [pc, #120]	@ (80047a0 <__ieee754_sqrt+0x19c>)
 8004726:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80047a4 <__ieee754_sqrt+0x1a0>
 800472a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800472e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004732:	f7fb fd19 	bl	8000168 <__aeabi_dsub>
 8004736:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4650      	mov	r0, sl
 8004740:	4659      	mov	r1, fp
 8004742:	f7fc f945 	bl	80009d0 <__aeabi_dcmple>
 8004746:	b140      	cbz	r0, 800475a <__ieee754_sqrt+0x156>
 8004748:	e9d4 0100 	ldrd	r0, r1, [r4]
 800474c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004750:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8004754:	d10e      	bne.n	8004774 <__ieee754_sqrt+0x170>
 8004756:	4635      	mov	r5, r6
 8004758:	3701      	adds	r7, #1
 800475a:	107b      	asrs	r3, r7, #1
 800475c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8004760:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8004764:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8004768:	086b      	lsrs	r3, r5, #1
 800476a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800476e:	e75b      	b.n	8004628 <__ieee754_sqrt+0x24>
 8004770:	4696      	mov	lr, r2
 8004772:	e7c2      	b.n	80046fa <__ieee754_sqrt+0xf6>
 8004774:	f7fb fcfa 	bl	800016c <__adddf3>
 8004778:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fc f91a 	bl	80009bc <__aeabi_dcmplt>
 8004788:	b120      	cbz	r0, 8004794 <__ieee754_sqrt+0x190>
 800478a:	1cab      	adds	r3, r5, #2
 800478c:	bf08      	it	eq
 800478e:	3701      	addeq	r7, #1
 8004790:	3502      	adds	r5, #2
 8004792:	e7e2      	b.n	800475a <__ieee754_sqrt+0x156>
 8004794:	1c6b      	adds	r3, r5, #1
 8004796:	f023 0501 	bic.w	r5, r3, #1
 800479a:	e7de      	b.n	800475a <__ieee754_sqrt+0x156>
 800479c:	7ff00000 	.word	0x7ff00000
 80047a0:	08004928 	.word	0x08004928
 80047a4:	08004920 	.word	0x08004920

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr
