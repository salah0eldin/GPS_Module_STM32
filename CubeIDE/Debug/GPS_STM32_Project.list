
GPS_STM32_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08003d18  08003d18  00004d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e88  08003e88  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e90  08003e90  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e90  08003e90  00004e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  08003ef4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003ef4  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ebb  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e5  00000000  00000000  0000bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000d428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004bc  00000000  00000000  0000da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a89  00000000  00000000  0000df1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007652  00000000  00000000  000249a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f89  00000000  00000000  0002bff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adf80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e4c  00000000  00000000  000adfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000afe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d00 	.word	0x08003d00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08003d00 	.word	0x08003d00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <GPS_HAL_Init>:
static char raw_buffer[GPS_BUFFER_SIZE];

static int decodeGGA(char *GGAbuffer, GGASTRUCT *gga);
static int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc);
void GPS_HAL_Init(UART_HandleTypeDef *h)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    // Disable USART1 interrupt
    huart = h;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	@ (8000af0 <GPS_HAL_Init+0x18>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000078 	.word	0x20000078

08000af4 <GPS_HAL_Receive_Raw_GGA_Data>:

HAL_StatusTypeDef GPS_HAL_Receive_Raw_GGA_Data(char *buffer)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    char data = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	72fb      	strb	r3, [r7, #11]
    int i = TRIES;
 8000b00:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b04:	60fb      	str	r3, [r7, #12]

    while (i > 0)
 8000b06:	e036      	b.n	8000b76 <GPS_HAL_Receive_Raw_GGA_Data+0x82>
    {
        if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <GPS_HAL_Receive_Raw_GGA_Data+0x94>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010b 	add.w	r1, r7, #11
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b14:	2201      	movs	r2, #1
 8000b16:	f001 ff4f 	bl	80029b8 <HAL_UART_Receive>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <GPS_HAL_Receive_Raw_GGA_Data+0x30>
            return HAL_TIMEOUT; // Error in receiving data
 8000b20:	2303      	movs	r3, #3
 8000b22:	e02c      	b.n	8000b7e <GPS_HAL_Receive_Raw_GGA_Data+0x8a>

        if (data == 'G')
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	2b47      	cmp	r3, #71	@ 0x47
 8000b28:	d122      	bne.n	8000b70 <GPS_HAL_Receive_Raw_GGA_Data+0x7c>
        {
            if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <GPS_HAL_Receive_Raw_GGA_Data+0x94>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f107 010b 	add.w	r1, r7, #11
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b36:	2201      	movs	r2, #1
 8000b38:	f001 ff3e 	bl	80029b8 <HAL_UART_Receive>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <GPS_HAL_Receive_Raw_GGA_Data+0x52>
                return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e01b      	b.n	8000b7e <GPS_HAL_Receive_Raw_GGA_Data+0x8a>

            if (data == 'A' || data == 'G')
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2b41      	cmp	r3, #65	@ 0x41
 8000b4a:	d002      	beq.n	8000b52 <GPS_HAL_Receive_Raw_GGA_Data+0x5e>
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	2b47      	cmp	r3, #71	@ 0x47
 8000b50:	d10e      	bne.n	8000b70 <GPS_HAL_Receive_Raw_GGA_Data+0x7c>
            {
                if (HAL_UART_Receive(huart, (uint8_t *)buffer, GPS_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <GPS_HAL_Receive_Raw_GGA_Data+0x94>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b5a:	2264      	movs	r2, #100	@ 0x64
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	f001 ff2b 	bl	80029b8 <HAL_UART_Receive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <GPS_HAL_Receive_Raw_GGA_Data+0x78>
                    return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e008      	b.n	8000b7e <GPS_HAL_Receive_Raw_GGA_Data+0x8a>

                return HAL_OK; // Successfully received GGA data
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e006      	b.n	8000b7e <GPS_HAL_Receive_Raw_GGA_Data+0x8a>
            }
        }

        i--;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
    while (i > 0)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dcc5      	bgt.n	8000b08 <GPS_HAL_Receive_Raw_GGA_Data+0x14>
    }

    return HAL_TIMEOUT; // Timeout or no valid data received
 8000b7c:	2303      	movs	r3, #3
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000078 	.word	0x20000078

08000b8c <GPS_HAL_Receive_Raw_RMC_Data>:

HAL_StatusTypeDef GPS_HAL_Receive_Raw_RMC_Data(char *buffer)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    char data = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	72fb      	strb	r3, [r7, #11]
    int i = TRIES;
 8000b98:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b9c:	60fb      	str	r3, [r7, #12]

    while (i > 0)
 8000b9e:	e033      	b.n	8000c08 <GPS_HAL_Receive_Raw_RMC_Data+0x7c>
    {
        if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f107 010b 	add.w	r1, r7, #11
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bac:	2201      	movs	r2, #1
 8000bae:	f001 ff03 	bl	80029b8 <HAL_UART_Receive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <GPS_HAL_Receive_Raw_RMC_Data+0x30>
            return HAL_TIMEOUT; // Error in receiving data
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e029      	b.n	8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

        if (data == 'M')
 8000bbc:	7afb      	ldrb	r3, [r7, #11]
 8000bbe:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bc0:	d11f      	bne.n	8000c02 <GPS_HAL_Receive_Raw_RMC_Data+0x76>
        {
            if (HAL_UART_Receive(huart, (uint8_t *)&data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	f107 010b 	add.w	r1, r7, #11
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f001 fef2 	bl	80029b8 <HAL_UART_Receive>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <GPS_HAL_Receive_Raw_RMC_Data+0x52>
                return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e018      	b.n	8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

            if (data == 'C')
 8000bde:	7afb      	ldrb	r3, [r7, #11]
 8000be0:	2b43      	cmp	r3, #67	@ 0x43
 8000be2:	d10e      	bne.n	8000c02 <GPS_HAL_Receive_Raw_RMC_Data+0x76>
            {
                if (HAL_UART_Receive(huart, (uint8_t *)buffer, GPS_BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <GPS_HAL_Receive_Raw_RMC_Data+0x8c>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bec:	2264      	movs	r2, #100	@ 0x64
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f001 fee2 	bl	80029b8 <HAL_UART_Receive>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <GPS_HAL_Receive_Raw_RMC_Data+0x72>
                    return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e008      	b.n	8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x84>

                return HAL_OK; // Successfully received RMC data
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e006      	b.n	8000c10 <GPS_HAL_Receive_Raw_RMC_Data+0x84>
            }
        }

        i--;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
    while (i > 0)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	dcc8      	bgt.n	8000ba0 <GPS_HAL_Receive_Raw_RMC_Data+0x14>
    }

    return HAL_TIMEOUT; // Timeout or no valid data received
 8000c0e:	2303      	movs	r3, #3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000078 	.word	0x20000078

08000c1c <GPS_HAL_Receive_Decode_Data>:

void GPS_HAL_Receive_Decode_Data(GPS_DATA *data)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    if (GPS_HAL_Receive_Raw_GGA_Data(&raw_buffer) == HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c26:	f7ff ff65 	bl	8000af4 <GPS_HAL_Receive_Raw_GGA_Data>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d104      	bne.n	8000c3a <GPS_HAL_Receive_Decode_Data+0x1e>
        decodeGGA(raw_buffer, &data->ggastruct);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c36:	f000 f813 	bl	8000c60 <decodeGGA>

    if (GPS_HAL_Receive_Raw_RMC_Data(&raw_buffer) == HAL_OK)
 8000c3a:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c3c:	f7ff ffa6 	bl	8000b8c <GPS_HAL_Receive_Raw_RMC_Data>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <GPS_HAL_Receive_Decode_Data+0x36>
        decodeRMC(raw_buffer, &data->rmcstruct);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	332c      	adds	r3, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <GPS_HAL_Receive_Decode_Data+0x40>)
 8000c4e:	f000 fba5 	bl	800139c <decodeRMC>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000007c 	.word	0x2000007c

08000c60 <decodeGGA>:
   @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/
static int decodeGGA(char *GGAbuffer, GGASTRUCT *gga)
{
 8000c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c64:	b08c      	sub	sp, #48	@ 0x30
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
    inx = 0;
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ddc <decodeGGA+0x17c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
    char buffer[12];
    int i = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',')
 8000c76:	e004      	b.n	8000c82 <decodeGGA+0x22>
        inx++; // 1st ','
 8000c78:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <decodeGGA+0x17c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a57      	ldr	r2, [pc, #348]	@ (8000ddc <decodeGGA+0x17c>)
 8000c80:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000c82:	4b56      	ldr	r3, [pc, #344]	@ (8000ddc <decodeGGA+0x17c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c90:	d1f2      	bne.n	8000c78 <decodeGGA+0x18>
    inx++;
 8000c92:	4b52      	ldr	r3, [pc, #328]	@ (8000ddc <decodeGGA+0x17c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	4a50      	ldr	r2, [pc, #320]	@ (8000ddc <decodeGGA+0x17c>)
 8000c9a:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000c9c:	e004      	b.n	8000ca8 <decodeGGA+0x48>
        inx++; // After time ','
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ddc <decodeGGA+0x17c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8000ddc <decodeGGA+0x17c>)
 8000ca6:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8000ddc <decodeGGA+0x17c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cb6:	d1f2      	bne.n	8000c9e <decodeGGA+0x3e>
    inx++;
 8000cb8:	4b48      	ldr	r3, [pc, #288]	@ (8000ddc <decodeGGA+0x17c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a47      	ldr	r2, [pc, #284]	@ (8000ddc <decodeGGA+0x17c>)
 8000cc0:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cc2:	e004      	b.n	8000cce <decodeGGA+0x6e>
        inx++; // after latitude ','
 8000cc4:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <decodeGGA+0x17c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <decodeGGA+0x17c>)
 8000ccc:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cce:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <decodeGGA+0x17c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cdc:	d1f2      	bne.n	8000cc4 <decodeGGA+0x64>
    inx++;
 8000cde:	4b3f      	ldr	r3, [pc, #252]	@ (8000ddc <decodeGGA+0x17c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ddc <decodeGGA+0x17c>)
 8000ce6:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000ce8:	e004      	b.n	8000cf4 <decodeGGA+0x94>
        inx++; // after NS ','
 8000cea:	4b3c      	ldr	r3, [pc, #240]	@ (8000ddc <decodeGGA+0x17c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8000ddc <decodeGGA+0x17c>)
 8000cf2:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000cf4:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <decodeGGA+0x17c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d02:	d1f2      	bne.n	8000cea <decodeGGA+0x8a>
    inx++;
 8000d04:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <decodeGGA+0x17c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a34      	ldr	r2, [pc, #208]	@ (8000ddc <decodeGGA+0x17c>)
 8000d0c:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d0e:	e004      	b.n	8000d1a <decodeGGA+0xba>
        inx++; // after longitude ','
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <decodeGGA+0x17c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a31      	ldr	r2, [pc, #196]	@ (8000ddc <decodeGGA+0x17c>)
 8000d18:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <decodeGGA+0x17c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d28:	d1f2      	bne.n	8000d10 <decodeGGA+0xb0>
    inx++;
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <decodeGGA+0x17c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a2a      	ldr	r2, [pc, #168]	@ (8000ddc <decodeGGA+0x17c>)
 8000d32:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d34:	e004      	b.n	8000d40 <decodeGGA+0xe0>
        inx++;                                                                         // after EW ','
 8000d36:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <decodeGGA+0x17c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a27      	ldr	r2, [pc, #156]	@ (8000ddc <decodeGGA+0x17c>)
 8000d3e:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <decodeGGA+0x17c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d4e:	d1f2      	bne.n	8000d36 <decodeGGA+0xd6>
    inx++;                                                                             // reached the character to identify the fix
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <decodeGGA+0x17c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <decodeGGA+0x17c>)
 8000d58:	6013      	str	r3, [r2, #0]
    if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6')) // 0 indicates no fix yet
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <decodeGGA+0x17c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b31      	cmp	r3, #49	@ 0x31
 8000d68:	d00f      	beq.n	8000d8a <decodeGGA+0x12a>
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <decodeGGA+0x17c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b32      	cmp	r3, #50	@ 0x32
 8000d78:	d007      	beq.n	8000d8a <decodeGGA+0x12a>
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <decodeGGA+0x17c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b36      	cmp	r3, #54	@ 0x36
 8000d88:	d106      	bne.n	8000d98 <decodeGGA+0x138>
    {
        gga->isfixValid = 1; // fix available
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	61da      	str	r2, [r3, #28]
        inx = 0;             // reset the index. We will start from the inx=0 and extract information now
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <decodeGGA+0x17c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
    else
    {
        gga->isfixValid = 0; // If the fix is not available
        return 1;            // return error
    }
    while (GGAbuffer[inx] != ',')
 8000d96:	e009      	b.n	8000dac <decodeGGA+0x14c>
        gga->isfixValid = 0; // If the fix is not available
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
        return 1;            // return error
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e2f2      	b.n	8001388 <decodeGGA+0x728>
        inx++; // 1st ','
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <decodeGGA+0x17c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <decodeGGA+0x17c>)
 8000daa:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <decodeGGA+0x17c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dba:	d1f2      	bne.n	8000da2 <decodeGGA+0x142>

    /*********************** Get TIME ***************************/
    //(Update the GMT Offset at the top of this file)

    inx++; // reach the first number in time
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <decodeGGA+0x17c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <decodeGGA+0x17c>)
 8000dc4:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	220c      	movs	r2, #12
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f85a 	bl	8002e88 <memset>
    i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after time ','
 8000dd8:	e016      	b.n	8000e08 <decodeGGA+0x1a8>
 8000dda:	bf00      	nop
 8000ddc:	200000e4 	.word	0x200000e4
    {
        buffer[i] = GGAbuffer[inx];
 8000de0:	4ba7      	ldr	r3, [pc, #668]	@ (8001080 <decodeGGA+0x420>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	7819      	ldrb	r1, [r3, #0]
 8000dec:	f107 020c 	add.w	r2, r7, #12
 8000df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df2:	4413      	add	r3, r2
 8000df4:	460a      	mov	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
        i++;
 8000df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8000dfe:	4ba0      	ldr	r3, [pc, #640]	@ (8001080 <decodeGGA+0x420>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a9e      	ldr	r2, [pc, #632]	@ (8001080 <decodeGGA+0x420>)
 8000e06:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after time ','
 8000e08:	4b9d      	ldr	r3, [pc, #628]	@ (8001080 <decodeGGA+0x420>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e16:	d1e3      	bne.n	8000de0 <decodeGGA+0x180>
    }

    hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 ffab 	bl	8002d78 <atoi>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a97      	ldr	r2, [pc, #604]	@ (8001084 <decodeGGA+0x424>)
 8000e26:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2a:	1312      	asrs	r2, r2, #12
 8000e2c:	17db      	asrs	r3, r3, #31
 8000e2e:	1ad2      	subs	r2, r2, r3
 8000e30:	4b95      	ldr	r3, [pc, #596]	@ (8001088 <decodeGGA+0x428>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4995      	ldr	r1, [pc, #596]	@ (800108c <decodeGGA+0x42c>)
 8000e36:	fb81 0103 	smull	r0, r1, r1, r3
 8000e3a:	1149      	asrs	r1, r1, #5
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	4a93      	ldr	r2, [pc, #588]	@ (8001090 <decodeGGA+0x430>)
 8000e44:	6013      	str	r3, [r2, #0]

    min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 ff94 	bl	8002d78 <atoi>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a8e      	ldr	r2, [pc, #568]	@ (800108c <decodeGGA+0x42c>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1152      	asrs	r2, r2, #5
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	4a8b      	ldr	r2, [pc, #556]	@ (800108c <decodeGGA+0x42c>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1151      	asrs	r1, r2, #5
 8000e66:	17da      	asrs	r2, r3, #31
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	2164      	movs	r1, #100	@ 0x64
 8000e6c:	fb01 f202 	mul.w	r2, r1, r2
 8000e70:	1a9a      	subs	r2, r3, r2
 8000e72:	4b85      	ldr	r3, [pc, #532]	@ (8001088 <decodeGGA+0x428>)
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	4b85      	ldr	r3, [pc, #532]	@ (800108c <decodeGGA+0x42c>)
 8000e78:	fb83 0301 	smull	r0, r3, r3, r1
 8000e7c:	1158      	asrs	r0, r3, #5
 8000e7e:	17cb      	asrs	r3, r1, #31
 8000e80:	1ac3      	subs	r3, r0, r3
 8000e82:	2064      	movs	r0, #100	@ 0x64
 8000e84:	fb00 f303 	mul.w	r3, r0, r3
 8000e88:	1acb      	subs	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a81      	ldr	r2, [pc, #516]	@ (8001094 <decodeGGA+0x434>)
 8000e8e:	6013      	str	r3, [r2, #0]

    // adjust time.. This part still needs to be tested
    if (min > 59)
 8000e90:	4b80      	ldr	r3, [pc, #512]	@ (8001094 <decodeGGA+0x434>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e96:	dd09      	ble.n	8000eac <decodeGGA+0x24c>
    {
        min = min - 60;
 8000e98:	4b7e      	ldr	r3, [pc, #504]	@ (8001094 <decodeGGA+0x434>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3b3c      	subs	r3, #60	@ 0x3c
 8000e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001094 <decodeGGA+0x434>)
 8000ea0:	6013      	str	r3, [r2, #0]
        hr++;
 8000ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8001090 <decodeGGA+0x430>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a79      	ldr	r2, [pc, #484]	@ (8001090 <decodeGGA+0x430>)
 8000eaa:	6013      	str	r3, [r2, #0]
    }
    if (hr < 0)
 8000eac:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <decodeGGA+0x430>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da09      	bge.n	8000ec8 <decodeGGA+0x268>
    {
        hr = 24 + hr;
 8000eb4:	4b76      	ldr	r3, [pc, #472]	@ (8001090 <decodeGGA+0x430>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3318      	adds	r3, #24
 8000eba:	4a75      	ldr	r2, [pc, #468]	@ (8001090 <decodeGGA+0x430>)
 8000ebc:	6013      	str	r3, [r2, #0]
        daychange--;
 8000ebe:	4b76      	ldr	r3, [pc, #472]	@ (8001098 <decodeGGA+0x438>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a74      	ldr	r2, [pc, #464]	@ (8001098 <decodeGGA+0x438>)
 8000ec6:	6013      	str	r3, [r2, #0]
    }
    if (hr >= 24)
 8000ec8:	4b71      	ldr	r3, [pc, #452]	@ (8001090 <decodeGGA+0x430>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b17      	cmp	r3, #23
 8000ece:	dd09      	ble.n	8000ee4 <decodeGGA+0x284>
    {
        hr = hr - 24;
 8000ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <decodeGGA+0x430>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3b18      	subs	r3, #24
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8001090 <decodeGGA+0x430>)
 8000ed8:	6013      	str	r3, [r2, #0]
        daychange++;
 8000eda:	4b6f      	ldr	r3, [pc, #444]	@ (8001098 <decodeGGA+0x438>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a6d      	ldr	r2, [pc, #436]	@ (8001098 <decodeGGA+0x438>)
 8000ee2:	6013      	str	r3, [r2, #0]
    }

    // Store the time in the GGA structure
    gga->tim.hour = hr;
 8000ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8001090 <decodeGGA+0x430>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	611a      	str	r2, [r3, #16]
    gga->tim.min = min;
 8000eec:	4b69      	ldr	r3, [pc, #420]	@ (8001094 <decodeGGA+0x434>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	615a      	str	r2, [r3, #20]
    gga->tim.sec = atoi(buffer) % 100;
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 ff3d 	bl	8002d78 <atoi>
 8000efe:	4602      	mov	r2, r0
 8000f00:	4b62      	ldr	r3, [pc, #392]	@ (800108c <decodeGGA+0x42c>)
 8000f02:	fb83 1302 	smull	r1, r3, r3, r2
 8000f06:	1159      	asrs	r1, r3, #5
 8000f08:	17d3      	asrs	r3, r2, #31
 8000f0a:	1acb      	subs	r3, r1, r3
 8000f0c:	2164      	movs	r1, #100	@ 0x64
 8000f0e:	fb01 f303 	mul.w	r3, r1, r3
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	6193      	str	r3, [r2, #24]

    /***************** Get LATITUDE  **********************/
    inx++; // Reach the first number in the lattitude
 8000f18:	4b59      	ldr	r3, [pc, #356]	@ (8001080 <decodeGGA+0x420>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a58      	ldr	r2, [pc, #352]	@ (8001080 <decodeGGA+0x420>)
 8000f20:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	220c      	movs	r2, #12
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 ffac 	bl	8002e88 <memset>
    i = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8000f34:	e013      	b.n	8000f5e <decodeGGA+0x2fe>
    {
        buffer[i] = GGAbuffer[inx];
 8000f36:	4b52      	ldr	r3, [pc, #328]	@ (8001080 <decodeGGA+0x420>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	7819      	ldrb	r1, [r3, #0]
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f48:	4413      	add	r3, r2
 8000f4a:	460a      	mov	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
        i++;
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8000f54:	4b4a      	ldr	r3, [pc, #296]	@ (8001080 <decodeGGA+0x420>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <decodeGGA+0x420>)
 8000f5c:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8000f5e:	4b48      	ldr	r3, [pc, #288]	@ (8001080 <decodeGGA+0x420>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f6c:	d1e3      	bne.n	8000f36 <decodeGGA+0x2d6>
    }
    if (strlen(buffer) < 6)
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff f8ec 	bl	8000150 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d801      	bhi.n	8000f82 <decodeGGA+0x322>
        return 2;                 // If the buffer length is not appropriate, return error
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e202      	b.n	8001388 <decodeGGA+0x728>
    int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fef6 	bl	8002d78 <atoi>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int j = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 8000f94:	e002      	b.n	8000f9c <decodeGGA+0x33c>
        j++; // Figure out how many digits before the decimal
 8000f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f98:	3301      	adds	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fa8:	d1f5      	bne.n	8000f96 <decodeGGA+0x336>
    j++;
 8000faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fac:	3301      	adds	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    int declen = (strlen(buffer)) - j;                         // calculate the number of digit after decimal
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff f8cb 	bl	8000150 <strlen>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	623b      	str	r3, [r7, #32]
    int dec = atoi((char *)buffer + j);                        // conver the decimal part a a separate number
 8000fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4413      	add	r3, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fed4 	bl	8002d78 <atoi>
 8000fd0:	61f8      	str	r0, [r7, #28]
    float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8000fd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa14 	bl	8000404 <__aeabi_i2d>
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <decodeGGA+0x43c>)
 8000fe2:	f7ff fba3 	bl	800072c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4690      	mov	r8, r2
 8000fec:	4699      	mov	r9, r3
 8000fee:	69f8      	ldr	r0, [r7, #28]
 8000ff0:	f7ff fa08 	bl	8000404 <__aeabi_i2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa01 	bl	8000404 <__aeabi_i2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4925      	ldr	r1, [pc, #148]	@ (80010a0 <decodeGGA+0x440>)
 800100c:	f001 ff6e 	bl	8002eec <pow>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fb88 	bl	800072c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4640      	mov	r0, r8
 8001022:	4649      	mov	r1, r9
 8001024:	f7ff f8a2 	bl	800016c <__adddf3>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fd02 	bl	8000a38 <__aeabi_d2f>
 8001034:	4603      	mov	r3, r0
 8001036:	61bb      	str	r3, [r7, #24]
    gga->lcation.latitude = lat;                               // save the lattitude data into the strucure
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	601a      	str	r2, [r3, #0]
    inx++;
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <decodeGGA+0x420>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <decodeGGA+0x420>)
 8001046:	6013      	str	r3, [r2, #0]
    gga->lcation.NS = GGAbuffer[inx]; // save the N/S into the structure
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <decodeGGA+0x420>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	711a      	strb	r2, [r3, #4]

    /***********************  GET LONGITUDE **********************/
    inx++; // ',' after NS character
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <decodeGGA+0x420>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <decodeGGA+0x420>)
 8001060:	6013      	str	r3, [r2, #0]
    inx++; // Reach the first number in the longitude
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <decodeGGA+0x420>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <decodeGGA+0x420>)
 800106a:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	220c      	movs	r2, #12
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f001 ff07 	bl	8002e88 <memset>
    i = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800107e:	e025      	b.n	80010cc <decodeGGA+0x46c>
 8001080:	200000e4 	.word	0x200000e4
 8001084:	68db8bad 	.word	0x68db8bad
 8001088:	200000e0 	.word	0x200000e0
 800108c:	51eb851f 	.word	0x51eb851f
 8001090:	200000e8 	.word	0x200000e8
 8001094:	200000ec 	.word	0x200000ec
 8001098:	200000fc 	.word	0x200000fc
 800109c:	40590000 	.word	0x40590000
 80010a0:	40240000 	.word	0x40240000
    {
        buffer[i] = GGAbuffer[inx];
 80010a4:	4b88      	ldr	r3, [pc, #544]	@ (80012c8 <decodeGGA+0x668>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	7819      	ldrb	r1, [r3, #0]
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b6:	4413      	add	r3, r2
 80010b8:	460a      	mov	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
        i++;
 80010bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010be:	3301      	adds	r3, #1
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 80010c2:	4b81      	ldr	r3, [pc, #516]	@ (80012c8 <decodeGGA+0x668>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a7f      	ldr	r2, [pc, #508]	@ (80012c8 <decodeGGA+0x668>)
 80010ca:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80010cc:	4b7e      	ldr	r3, [pc, #504]	@ (80012c8 <decodeGGA+0x668>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80010da:	d1e3      	bne.n	80010a4 <decodeGGA+0x444>
    }
    num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fe49 	bl	8002d78 <atoi>
 80010e6:	4603      	mov	r3, r0
 80010e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    j = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80010ee:	e002      	b.n	80010f6 <decodeGGA+0x496>
        j++; // Figure out how many digits before the decimal
 80010f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f2:	3301      	adds	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80010f6:	f107 020c 	add.w	r2, r7, #12
 80010fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b2e      	cmp	r3, #46	@ 0x2e
 8001102:	d1f5      	bne.n	80010f0 <decodeGGA+0x490>
    j++;
 8001104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001106:	3301      	adds	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    declen = (strlen(buffer)) - j;                       // calculate the number of digit after decimal
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f81e 	bl	8000150 <strlen>
 8001114:	4602      	mov	r2, r0
 8001116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	623b      	str	r3, [r7, #32]
    dec = atoi((char *)buffer + j);                      // conver the decimal part a a separate number
 800111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	4413      	add	r3, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fe27 	bl	8002d78 <atoi>
 800112a:	61f8      	str	r0, [r7, #28]
    lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 800112c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f967 	bl	8000404 <__aeabi_i2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b64      	ldr	r3, [pc, #400]	@ (80012cc <decodeGGA+0x66c>)
 800113c:	f7ff faf6 	bl	800072c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4690      	mov	r8, r2
 8001146:	4699      	mov	r9, r3
 8001148:	69f8      	ldr	r0, [r7, #28]
 800114a:	f7ff f95b 	bl	8000404 <__aeabi_i2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	3302      	adds	r3, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f954 	bl	8000404 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	495a      	ldr	r1, [pc, #360]	@ (80012d0 <decodeGGA+0x670>)
 8001166:	f001 fec1 	bl	8002eec <pow>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff fadb 	bl	800072c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4640      	mov	r0, r8
 800117c:	4649      	mov	r1, r9
 800117e:	f7fe fff5 	bl	800016c <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc55 	bl	8000a38 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
    gga->lcation.longitude = lat;                        // save the longitude data into the strucure
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	609a      	str	r2, [r3, #8]
    inx++;
 8001198:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <decodeGGA+0x668>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a4a      	ldr	r2, [pc, #296]	@ (80012c8 <decodeGGA+0x668>)
 80011a0:	6013      	str	r3, [r2, #0]
    gga->lcation.EW = GGAbuffer[inx]; // save the E/W into the structure
 80011a2:	4b49      	ldr	r3, [pc, #292]	@ (80012c8 <decodeGGA+0x668>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	731a      	strb	r2, [r3, #12]

    /**************************************************/
    // skip positition fix
    inx++; // ',' after E/W
 80011b2:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <decodeGGA+0x668>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	4a43      	ldr	r2, [pc, #268]	@ (80012c8 <decodeGGA+0x668>)
 80011ba:	6013      	str	r3, [r2, #0]
    inx++; // position fix
 80011bc:	4b42      	ldr	r3, [pc, #264]	@ (80012c8 <decodeGGA+0x668>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a41      	ldr	r2, [pc, #260]	@ (80012c8 <decodeGGA+0x668>)
 80011c4:	6013      	str	r3, [r2, #0]
    inx++; // ',' after position fix;
 80011c6:	4b40      	ldr	r3, [pc, #256]	@ (80012c8 <decodeGGA+0x668>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a3e      	ldr	r2, [pc, #248]	@ (80012c8 <decodeGGA+0x668>)
 80011ce:	6013      	str	r3, [r2, #0]

    // number of sattelites
    inx++; // Reach the first number in the satellites
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <decodeGGA+0x668>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a3c      	ldr	r2, [pc, #240]	@ (80012c8 <decodeGGA+0x668>)
 80011d8:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	220c      	movs	r2, #12
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fe50 	bl	8002e88 <memset>
    i = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80011ec:	e013      	b.n	8001216 <decodeGGA+0x5b6>
    {
        buffer[i] = GGAbuffer[inx];
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <decodeGGA+0x668>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	7819      	ldrb	r1, [r3, #0]
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	4413      	add	r3, r2
 8001202:	460a      	mov	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
        i++;
 8001206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001208:	3301      	adds	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 800120c:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <decodeGGA+0x668>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a2d      	ldr	r2, [pc, #180]	@ (80012c8 <decodeGGA+0x668>)
 8001214:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8001216:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <decodeGGA+0x668>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b2c      	cmp	r3, #44	@ 0x2c
 8001224:	d1e3      	bne.n	80011ee <decodeGGA+0x58e>
    }
    gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fda4 	bl	8002d78 <atoi>
 8001230:	4602      	mov	r2, r0
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28

    /***************** skip HDOP  *********************/
    inx++;
 8001236:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <decodeGGA+0x668>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <decodeGGA+0x668>)
 800123e:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 8001240:	e004      	b.n	800124c <decodeGGA+0x5ec>
        inx++;
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <decodeGGA+0x668>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <decodeGGA+0x668>)
 800124a:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <decodeGGA+0x668>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b2c      	cmp	r3, #44	@ 0x2c
 800125a:	d1f2      	bne.n	8001242 <decodeGGA+0x5e2>

    /*************** Altitude calculation ********************/
    inx++;
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <decodeGGA+0x668>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <decodeGGA+0x668>)
 8001264:	6013      	str	r3, [r2, #0]
    memset(buffer, '\0', 12);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	220c      	movs	r2, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fe0a 	bl	8002e88 <memset>
    i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (GGAbuffer[inx] != ',')
 8001278:	e013      	b.n	80012a2 <decodeGGA+0x642>
    {
        buffer[i] = GGAbuffer[inx];
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <decodeGGA+0x668>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	7819      	ldrb	r1, [r3, #0]
 8001286:	f107 020c 	add.w	r2, r7, #12
 800128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	701a      	strb	r2, [r3, #0]
        i++;
 8001292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001294:	3301      	adds	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
        inx++;
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <decodeGGA+0x668>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <decodeGGA+0x668>)
 80012a0:	6013      	str	r3, [r2, #0]
    while (GGAbuffer[inx] != ',')
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <decodeGGA+0x668>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b2c      	cmp	r3, #44	@ 0x2c
 80012b0:	d1e3      	bne.n	800127a <decodeGGA+0x61a>
    }
    num = (atoi(buffer));
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fd5e 	bl	8002d78 <atoi>
 80012bc:	4603      	mov	r3, r0
 80012be:	84fb      	strh	r3, [r7, #38]	@ 0x26
    j = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80012c4:	e009      	b.n	80012da <decodeGGA+0x67a>
 80012c6:	bf00      	nop
 80012c8:	200000e4 	.word	0x200000e4
 80012cc:	40590000 	.word	0x40590000
 80012d0:	40240000 	.word	0x40240000
        j++;
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	3301      	adds	r3, #1
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (buffer[j] != '.')
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80012e6:	d1f5      	bne.n	80012d4 <decodeGGA+0x674>
    j++;
 80012e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ea:	3301      	adds	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    declen = (strlen(buffer)) - j;
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff2c 	bl	8000150 <strlen>
 80012f8:	4602      	mov	r2, r0
 80012fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	623b      	str	r3, [r7, #32]
    dec = atoi((char *)buffer + j);
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	f107 020c 	add.w	r2, r7, #12
 8001306:	4413      	add	r3, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fd35 	bl	8002d78 <atoi>
 800130e:	61f8      	str	r0, [r7, #28]
    lat = (num) + (dec / pow(10, (declen)));
 8001310:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f875 	bl	8000404 <__aeabi_i2d>
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	69f8      	ldr	r0, [r7, #28]
 8001320:	f7ff f870 	bl	8000404 <__aeabi_i2d>
 8001324:	4680      	mov	r8, r0
 8001326:	4689      	mov	r9, r1
 8001328:	6a38      	ldr	r0, [r7, #32]
 800132a:	f7ff f86b 	bl	8000404 <__aeabi_i2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	f04f 0000 	mov.w	r0, #0
 8001336:	4917      	ldr	r1, [pc, #92]	@ (8001394 <decodeGGA+0x734>)
 8001338:	f001 fdd8 	bl	8002eec <pow>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4640      	mov	r0, r8
 8001342:	4649      	mov	r1, r9
 8001344:	f7ff f9f2 	bl	800072c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ff0c 	bl	800016c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb6c 	bl	8000a38 <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
    gga->alt.altitude = lat;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	621a      	str	r2, [r3, #32]

    inx++;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <decodeGGA+0x738>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <decodeGGA+0x738>)
 8001372:	6013      	str	r3, [r2, #0]
    gga->alt.unit = GGAbuffer[inx];
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <decodeGGA+0x738>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3730      	adds	r7, #48	@ 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001392:	bf00      	nop
 8001394:	40240000 	.word	0x40240000
 8001398:	200000e4 	.word	0x200000e4

0800139c <decodeRMC>:

static int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc)
{
 800139c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a0:	b090      	sub	sp, #64	@ 0x40
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
    inx = 0;
 80013a8:	4b92      	ldr	r3, [pc, #584]	@ (80015f4 <decodeRMC+0x258>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
    char buffer[12];
    int i = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (RMCbuffer[inx] != ',')
 80013b2:	e004      	b.n	80013be <decodeRMC+0x22>
        inx++; // 1st ,
 80013b4:	4b8f      	ldr	r3, [pc, #572]	@ (80015f4 <decodeRMC+0x258>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a8e      	ldr	r2, [pc, #568]	@ (80015f4 <decodeRMC+0x258>)
 80013bc:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013be:	4b8d      	ldr	r3, [pc, #564]	@ (80015f4 <decodeRMC+0x258>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b2c      	cmp	r3, #44	@ 0x2c
 80013cc:	d1f2      	bne.n	80013b4 <decodeRMC+0x18>
    inx++;
 80013ce:	4b89      	ldr	r3, [pc, #548]	@ (80015f4 <decodeRMC+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a87      	ldr	r2, [pc, #540]	@ (80015f4 <decodeRMC+0x258>)
 80013d6:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013d8:	e004      	b.n	80013e4 <decodeRMC+0x48>
        inx++; // After time ,
 80013da:	4b86      	ldr	r3, [pc, #536]	@ (80015f4 <decodeRMC+0x258>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a84      	ldr	r2, [pc, #528]	@ (80015f4 <decodeRMC+0x258>)
 80013e2:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80013e4:	4b83      	ldr	r3, [pc, #524]	@ (80015f4 <decodeRMC+0x258>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80013f2:	d1f2      	bne.n	80013da <decodeRMC+0x3e>
    inx++;
 80013f4:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <decodeRMC+0x258>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a7e      	ldr	r2, [pc, #504]	@ (80015f4 <decodeRMC+0x258>)
 80013fc:	6013      	str	r3, [r2, #0]
    if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80013fe:	4b7d      	ldr	r3, [pc, #500]	@ (80015f4 <decodeRMC+0x258>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b41      	cmp	r3, #65	@ 0x41
 800140c:	d10d      	bne.n	800142a <decodeRMC+0x8e>
    {
        rmc->isValid = 1;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	615a      	str	r2, [r3, #20]
    else
    {
        rmc->isValid = 0;
        return 1;
    }
    inx++;
 8001414:	4b77      	ldr	r3, [pc, #476]	@ (80015f4 <decodeRMC+0x258>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a76      	ldr	r2, [pc, #472]	@ (80015f4 <decodeRMC+0x258>)
 800141c:	6013      	str	r3, [r2, #0]
    inx++;
 800141e:	4b75      	ldr	r3, [pc, #468]	@ (80015f4 <decodeRMC+0x258>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a73      	ldr	r2, [pc, #460]	@ (80015f4 <decodeRMC+0x258>)
 8001426:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001428:	e009      	b.n	800143e <decodeRMC+0xa2>
        rmc->isValid = 0;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
        return 1;
 8001430:	2301      	movs	r3, #1
 8001432:	e1d5      	b.n	80017e0 <decodeRMC+0x444>
        inx++; // after latitude,
 8001434:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <decodeRMC+0x258>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <decodeRMC+0x258>)
 800143c:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <decodeRMC+0x258>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b2c      	cmp	r3, #44	@ 0x2c
 800144c:	d1f2      	bne.n	8001434 <decodeRMC+0x98>
    inx++;
 800144e:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <decodeRMC+0x258>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	4a67      	ldr	r2, [pc, #412]	@ (80015f4 <decodeRMC+0x258>)
 8001456:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001458:	e004      	b.n	8001464 <decodeRMC+0xc8>
        inx++; // after NS ,
 800145a:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <decodeRMC+0x258>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a64      	ldr	r2, [pc, #400]	@ (80015f4 <decodeRMC+0x258>)
 8001462:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001464:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <decodeRMC+0x258>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b2c      	cmp	r3, #44	@ 0x2c
 8001472:	d1f2      	bne.n	800145a <decodeRMC+0xbe>
    inx++;
 8001474:	4b5f      	ldr	r3, [pc, #380]	@ (80015f4 <decodeRMC+0x258>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a5e      	ldr	r2, [pc, #376]	@ (80015f4 <decodeRMC+0x258>)
 800147c:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800147e:	e004      	b.n	800148a <decodeRMC+0xee>
        inx++; // after longitude ,
 8001480:	4b5c      	ldr	r3, [pc, #368]	@ (80015f4 <decodeRMC+0x258>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a5b      	ldr	r2, [pc, #364]	@ (80015f4 <decodeRMC+0x258>)
 8001488:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 800148a:	4b5a      	ldr	r3, [pc, #360]	@ (80015f4 <decodeRMC+0x258>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b2c      	cmp	r3, #44	@ 0x2c
 8001498:	d1f2      	bne.n	8001480 <decodeRMC+0xe4>
    inx++;
 800149a:	4b56      	ldr	r3, [pc, #344]	@ (80015f4 <decodeRMC+0x258>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a54      	ldr	r2, [pc, #336]	@ (80015f4 <decodeRMC+0x258>)
 80014a2:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80014a4:	e004      	b.n	80014b0 <decodeRMC+0x114>
        inx++; // after EW ,
 80014a6:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <decodeRMC+0x258>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a51      	ldr	r2, [pc, #324]	@ (80015f4 <decodeRMC+0x258>)
 80014ae:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 80014b0:	4b50      	ldr	r3, [pc, #320]	@ (80015f4 <decodeRMC+0x258>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80014be:	d1f2      	bne.n	80014a6 <decodeRMC+0x10a>

    // Get Speed
    inx++;
 80014c0:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <decodeRMC+0x258>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a4b      	ldr	r2, [pc, #300]	@ (80015f4 <decodeRMC+0x258>)
 80014c8:	6013      	str	r3, [r2, #0]
    i = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	220c      	movs	r2, #12
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fcd6 	bl	8002e88 <memset>
    while (RMCbuffer[inx] != ',')
 80014dc:	e013      	b.n	8001506 <decodeRMC+0x16a>
    {
        buffer[i] = RMCbuffer[inx];
 80014de:	4b45      	ldr	r3, [pc, #276]	@ (80015f4 <decodeRMC+0x258>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	7819      	ldrb	r1, [r3, #0]
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f0:	4413      	add	r3, r2
 80014f2:	460a      	mov	r2, r1
 80014f4:	701a      	strb	r2, [r3, #0]
        i++;
 80014f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014f8:	3301      	adds	r3, #1
 80014fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 80014fc:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <decodeRMC+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a3c      	ldr	r2, [pc, #240]	@ (80015f4 <decodeRMC+0x258>)
 8001504:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <decodeRMC+0x258>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b2c      	cmp	r3, #44	@ 0x2c
 8001514:	d1e3      	bne.n	80014de <decodeRMC+0x142>
    }

    if (strlen(buffer) > 0)
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d055      	beq.n	80015cc <decodeRMC+0x230>
    {                                 // if the speed have some data
        int16_t num = (atoi(buffer)); // convert the data into the number
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fc27 	bl	8002d78 <atoi>
 800152a:	4603      	mov	r3, r0
 800152c:	867b      	strh	r3, [r7, #50]	@ 0x32
        int j = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (buffer[j] != '.')
 8001532:	e002      	b.n	800153a <decodeRMC+0x19e>
            j++; // same as above
 8001534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001536:	3301      	adds	r3, #1
 8001538:	63bb      	str	r3, [r7, #56]	@ 0x38
        while (buffer[j] != '.')
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b2e      	cmp	r3, #46	@ 0x2e
 8001546:	d1f5      	bne.n	8001534 <decodeRMC+0x198>
        j++;
 8001548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800154a:	3301      	adds	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
        int declen = (strlen(buffer)) - j;
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fdfc 	bl	8000150 <strlen>
 8001558:	4602      	mov	r2, r0
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int dec = atoi((char *)buffer + j);
 8001560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001562:	f107 0208 	add.w	r2, r7, #8
 8001566:	4413      	add	r3, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fc05 	bl	8002d78 <atoi>
 800156e:	62b8      	str	r0, [r7, #40]	@ 0x28
        float lat = num + (dec / pow(10, (declen)));
 8001570:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff45 	bl	8000404 <__aeabi_i2d>
 800157a:	4604      	mov	r4, r0
 800157c:	460d      	mov	r5, r1
 800157e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001580:	f7fe ff40 	bl	8000404 <__aeabi_i2d>
 8001584:	4680      	mov	r8, r0
 8001586:	4689      	mov	r9, r1
 8001588:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800158a:	f7fe ff3b 	bl	8000404 <__aeabi_i2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	4918      	ldr	r1, [pc, #96]	@ (80015f8 <decodeRMC+0x25c>)
 8001598:	f001 fca8 	bl	8002eec <pow>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4640      	mov	r0, r8
 80015a2:	4649      	mov	r1, r9
 80015a4:	f7ff f8c2 	bl	800072c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fddc 	bl	800016c <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fa3c 	bl	8000a38 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
        rmc->speed = lat;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	e003      	b.n	80015d4 <decodeRMC+0x238>
    }
    else
        rmc->speed = 0;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]

    // Get Course
    inx++;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <decodeRMC+0x258>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <decodeRMC+0x258>)
 80015dc:	6013      	str	r3, [r2, #0]
    i = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	220c      	movs	r2, #12
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fc4c 	bl	8002e88 <memset>
    while (RMCbuffer[inx] != ',')
 80015f0:	e018      	b.n	8001624 <decodeRMC+0x288>
 80015f2:	bf00      	nop
 80015f4:	200000e4 	.word	0x200000e4
 80015f8:	40240000 	.word	0x40240000
    {
        buffer[i] = RMCbuffer[inx];
 80015fc:	4b7b      	ldr	r3, [pc, #492]	@ (80017ec <decodeRMC+0x450>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	7819      	ldrb	r1, [r3, #0]
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800160e:	4413      	add	r3, r2
 8001610:	460a      	mov	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
        i++;
 8001614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001616:	3301      	adds	r3, #1
 8001618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 800161a:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <decodeRMC+0x450>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a72      	ldr	r2, [pc, #456]	@ (80017ec <decodeRMC+0x450>)
 8001622:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001624:	4b71      	ldr	r3, [pc, #452]	@ (80017ec <decodeRMC+0x450>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b2c      	cmp	r3, #44	@ 0x2c
 8001632:	d1e3      	bne.n	80015fc <decodeRMC+0x260>
    }

    if (strlen(buffer) > 0)
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d055      	beq.n	80016ea <decodeRMC+0x34e>
    {                                 // if the course have some data
        int16_t num = (atoi(buffer)); // convert the course data into the number
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fb98 	bl	8002d78 <atoi>
 8001648:	4603      	mov	r3, r0
 800164a:	847b      	strh	r3, [r7, #34]	@ 0x22
        int j = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34
        while (buffer[j] != '.')
 8001650:	e002      	b.n	8001658 <decodeRMC+0x2bc>
            j++; // same as above
 8001652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001654:	3301      	adds	r3, #1
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
        while (buffer[j] != '.')
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b2e      	cmp	r3, #46	@ 0x2e
 8001664:	d1f5      	bne.n	8001652 <decodeRMC+0x2b6>
        j++;
 8001666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001668:	3301      	adds	r3, #1
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
        int declen = (strlen(buffer)) - j;
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fd6d 	bl	8000150 <strlen>
 8001676:	4602      	mov	r2, r0
 8001678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]
        int dec = atoi((char *)buffer + j);
 800167e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001680:	f107 0208 	add.w	r2, r7, #8
 8001684:	4413      	add	r3, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fb76 	bl	8002d78 <atoi>
 800168c:	61b8      	str	r0, [r7, #24]
        float lat = num + (dec / pow(10, (declen)));
 800168e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe feb6 	bl	8000404 <__aeabi_i2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f7fe feb1 	bl	8000404 <__aeabi_i2d>
 80016a2:	4680      	mov	r8, r0
 80016a4:	4689      	mov	r9, r1
 80016a6:	69f8      	ldr	r0, [r7, #28]
 80016a8:	f7fe feac 	bl	8000404 <__aeabi_i2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	494e      	ldr	r1, [pc, #312]	@ (80017f0 <decodeRMC+0x454>)
 80016b6:	f001 fc19 	bl	8002eec <pow>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f7ff f833 	bl	800072c <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fd4d 	bl	800016c <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9ad 	bl	8000a38 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	617b      	str	r3, [r7, #20]
        rmc->course = lat;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	e003      	b.n	80016f2 <decodeRMC+0x356>
    }
    else
    {
        rmc->course = 0;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
    }

    // Get Date
    inx++;
 80016f2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ec <decodeRMC+0x450>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a3c      	ldr	r2, [pc, #240]	@ (80017ec <decodeRMC+0x450>)
 80016fa:	6013      	str	r3, [r2, #0]
    i = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset(buffer, '\0', 12);
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	220c      	movs	r2, #12
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fbbd 	bl	8002e88 <memset>
    while (RMCbuffer[inx] != ',')
 800170e:	e013      	b.n	8001738 <decodeRMC+0x39c>
    {
        buffer[i] = RMCbuffer[inx];
 8001710:	4b36      	ldr	r3, [pc, #216]	@ (80017ec <decodeRMC+0x450>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	7819      	ldrb	r1, [r3, #0]
 800171c:	f107 0208 	add.w	r2, r7, #8
 8001720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001722:	4413      	add	r3, r2
 8001724:	460a      	mov	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
        i++;
 8001728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800172a:	3301      	adds	r3, #1
 800172c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        inx++;
 800172e:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <decodeRMC+0x450>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <decodeRMC+0x450>)
 8001736:	6013      	str	r3, [r2, #0]
    while (RMCbuffer[inx] != ',')
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <decodeRMC+0x450>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b2c      	cmp	r3, #44	@ 0x2c
 8001746:	d1e3      	bne.n	8001710 <decodeRMC+0x374>
    }

    // Date in the format 280222
    day = atoi(buffer) / 10000;       // extract 28
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fb13 	bl	8002d78 <atoi>
 8001752:	4603      	mov	r3, r0
 8001754:	4a27      	ldr	r2, [pc, #156]	@ (80017f4 <decodeRMC+0x458>)
 8001756:	fb82 1203 	smull	r1, r2, r2, r3
 800175a:	1312      	asrs	r2, r2, #12
 800175c:	17db      	asrs	r3, r3, #31
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a25      	ldr	r2, [pc, #148]	@ (80017f8 <decodeRMC+0x45c>)
 8001762:	6013      	str	r3, [r2, #0]
    mon = (atoi(buffer) / 100) % 100; // extract 02
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4618      	mov	r0, r3
 800176a:	f001 fb05 	bl	8002d78 <atoi>
 800176e:	4603      	mov	r3, r0
 8001770:	4a22      	ldr	r2, [pc, #136]	@ (80017fc <decodeRMC+0x460>)
 8001772:	fb82 1203 	smull	r1, r2, r2, r3
 8001776:	1152      	asrs	r2, r2, #5
 8001778:	17db      	asrs	r3, r3, #31
 800177a:	1ad2      	subs	r2, r2, r3
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <decodeRMC+0x460>)
 800177e:	fb83 1302 	smull	r1, r3, r3, r2
 8001782:	1159      	asrs	r1, r3, #5
 8001784:	17d3      	asrs	r3, r2, #31
 8001786:	1acb      	subs	r3, r1, r3
 8001788:	2164      	movs	r1, #100	@ 0x64
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a1b      	ldr	r2, [pc, #108]	@ (8001800 <decodeRMC+0x464>)
 8001792:	6013      	str	r3, [r2, #0]
    yr = atoi(buffer) % 100;          // extract 22
 8001794:	f107 0308 	add.w	r3, r7, #8
 8001798:	4618      	mov	r0, r3
 800179a:	f001 faed 	bl	8002d78 <atoi>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <decodeRMC+0x460>)
 80017a2:	fb83 1302 	smull	r1, r3, r3, r2
 80017a6:	1159      	asrs	r1, r3, #5
 80017a8:	17d3      	asrs	r3, r2, #31
 80017aa:	1acb      	subs	r3, r1, r3
 80017ac:	2164      	movs	r1, #100	@ 0x64
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <decodeRMC+0x468>)
 80017b6:	6013      	str	r3, [r2, #0]

    day = day + daychange; // correction due to GMT shift
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <decodeRMC+0x45c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <decodeRMC+0x46c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <decodeRMC+0x45c>)
 80017c4:	6013      	str	r3, [r2, #0]

    // save the data into the structure
    rmc->date.Day = day;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <decodeRMC+0x45c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	601a      	str	r2, [r3, #0]
    rmc->date.Mon = mon;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <decodeRMC+0x464>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]
    rmc->date.Yr = yr;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <decodeRMC+0x468>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	609a      	str	r2, [r3, #8]

    return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3740      	adds	r7, #64	@ 0x40
 80017e4:	46bd      	mov	sp, r7
 80017e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017ea:	bf00      	nop
 80017ec:	200000e4 	.word	0x200000e4
 80017f0:	40240000 	.word	0x40240000
 80017f4:	68db8bad 	.word	0x68db8bad
 80017f8:	200000f0 	.word	0x200000f0
 80017fc:	51eb851f 	.word	0x51eb851f
 8001800:	200000f4 	.word	0x200000f4
 8001804:	200000f8 	.word	0x200000f8
 8001808:	200000fc 	.word	0x200000fc

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b092      	sub	sp, #72	@ 0x48
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001812:	f000 f983 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001816:	f000 f813 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181a:	f000 f881 	bl	8001920 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800181e:	f000 f855 	bl	80018cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  GPS_HAL_Init(&huart1);
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <main+0x30>)
 8001824:	f7ff f958 	bl	8000ad8 <GPS_HAL_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPS_HAL_Receive_Decode_Data(&gps_data);
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f9f6 	bl	8000c1c <GPS_HAL_Receive_Decode_Data>
	  HAL_Delay(1000);
 8001830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001834:	f000 f9d4 	bl	8001be0 <HAL_Delay>
	  GPS_HAL_Receive_Decode_Data(&gps_data);
 8001838:	bf00      	nop
 800183a:	e7f5      	b.n	8001828 <main+0x1c>
 800183c:	20000100 	.word	0x20000100

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	@ 0x40
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	2228      	movs	r2, #40	@ 0x28
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fb1a 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2302      	movs	r3, #2
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800187e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fc35 	bl	80020f8 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001894:	f000 f866 	bl	8001964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	230f      	movs	r3, #15
 800189a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2302      	movs	r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fea2 	bl	80025fc <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018be:	f000 f851 	bl	8001964 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3740      	adds	r7, #64	@ 0x40
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_USART1_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 8001904:	f001 f808 	bl	8002918 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f000 f829 	bl	8001964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000100 	.word	0x20000100
 800191c:	40013800 	.word	0x40013800

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_GPIO_Init+0x40>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <MX_GPIO_Init+0x40>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_GPIO_Init+0x40>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_GPIO_Init+0x40>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <MX_GPIO_Init+0x40>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <MX_GPIO_Init+0x40>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000

08001964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <Error_Handler+0x8>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <HAL_MspInit+0x5c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6193      	str	r3, [r2, #24]
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_MspInit+0x5c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_MspInit+0x60>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_MspInit+0x60>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000

080019d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <HAL_UART_MspInit+0x8c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d131      	bne.n	8001a58 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_UART_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <HAL_UART_MspInit+0x94>)
 8001a3a:	f000 f9d9 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <HAL_UART_MspInit+0x94>)
 8001a54:	f000 f9cc 	bl	8001df0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <NMI_Handler+0x4>

08001a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <MemManage_Handler+0x4>

08001a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f874 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad0:	f7ff fff8 	bl	8001ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aec:	4c09      	ldr	r4, [pc, #36]	@ (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f001 f9d3 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff fe85 	bl	800180c <main>
  bx lr
 8001b02:	4770      	bx	lr
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b0c:	08003e98 	.word	0x08003e98
  ldr r2, =_sbss
 8001b10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b14:	20000284 	.word	0x20000284

08001b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_2_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x28>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f92b 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff ff1a 	bl	8001970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f935 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b84:	f000 f90b 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a03      	ldr	r2, [pc, #12]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000148 	.word	0x20000148

08001bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000148 	.word	0x20000148

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffe0 	bl	8001bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff49 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff5e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffb0 	bl	8001d44 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	@ 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	@ (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	@ (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	@ (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	@ (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	@ (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	@ (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	@ 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	@ (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	@ (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	@ (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	@ (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	492c      	ldr	r1, [pc, #176]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4922      	ldr	r1, [pc, #136]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4918      	ldr	r1, [pc, #96]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	490e      	ldr	r1, [pc, #56]	@ (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	@ (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	@ 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e272      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002118:	4b92      	ldr	r3, [pc, #584]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b04      	cmp	r3, #4
 8002122:	d00c      	beq.n	800213e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002124:	4b8f      	ldr	r3, [pc, #572]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d112      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
 8002130:	4b8c      	ldr	r3, [pc, #560]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800213c:	d10b      	bne.n	8002156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	4b89      	ldr	r3, [pc, #548]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06c      	beq.n	8002224 <HAL_RCC_OscConfig+0x12c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d168      	bne.n	8002224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e24c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x76>
 8002160:	4b80      	ldr	r3, [pc, #512]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a7f      	ldr	r2, [pc, #508]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x98>
 8002176:	4b7b      	ldr	r3, [pc, #492]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7a      	ldr	r2, [pc, #488]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b78      	ldr	r3, [pc, #480]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a77      	ldr	r2, [pc, #476]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0xbc>
 800219a:	4b72      	ldr	r3, [pc, #456]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a71      	ldr	r2, [pc, #452]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0xd4>
 80021b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a67      	ldr	r2, [pc, #412]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fcfa 	bl	8001bcc <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fcf6 	bl	8001bcc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	@ 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e200      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0xe4>
 80021fa:	e014      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fce6 	bl	8001bcc <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7ff fce2 	bl	8001bcc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1ec      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x10c>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	4b4c      	ldr	r3, [pc, #304]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223e:	4b49      	ldr	r3, [pc, #292]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11c      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
 800224a:	4b46      	ldr	r3, [pc, #280]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	4b43      	ldr	r3, [pc, #268]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1c0      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4939      	ldr	r1, [pc, #228]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	e03a      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <HAL_RCC_OscConfig+0x270>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002292:	f7ff fc9b 	bl	8001bcc <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff fc97 	bl	8001bcc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1a1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4927      	ldr	r1, [pc, #156]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e015      	b.n	80022fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ce:	4b26      	ldr	r3, [pc, #152]	@ (8002368 <HAL_RCC_OscConfig+0x270>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc7a 	bl	8001bcc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fc76 	bl	8001bcc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e180      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03a      	beq.n	800237c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <HAL_RCC_OscConfig+0x274>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fc5a 	bl	8001bcc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fc56 	bl	8001bcc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e160      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_RCC_OscConfig+0x26c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 face 	bl	80028dc <RCC_Delay>
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_RCC_OscConfig+0x274>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fc40 	bl	8001bcc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fc3c 	bl	8001bcc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d908      	bls.n	8002370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e146      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	42420000 	.word	0x42420000
 800236c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	4b92      	ldr	r3, [pc, #584]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e9      	bne.n	8002350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a6 	beq.w	80024d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b8b      	ldr	r3, [pc, #556]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b88      	ldr	r3, [pc, #544]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a87      	ldr	r2, [pc, #540]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b85      	ldr	r3, [pc, #532]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b82      	ldr	r3, [pc, #520]	@ (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b7f      	ldr	r3, [pc, #508]	@ (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	@ (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbfd 	bl	8001bcc <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff fbf9 	bl	8001bcc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b64      	cmp	r3, #100	@ 0x64
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e103      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b75      	ldr	r3, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x4c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x312>
 80023fc:	4b6f      	ldr	r3, [pc, #444]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6e      	ldr	r2, [pc, #440]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e02d      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x334>
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a69      	ldr	r2, [pc, #420]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b67      	ldr	r3, [pc, #412]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a66      	ldr	r2, [pc, #408]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x356>
 8002434:	4b61      	ldr	r3, [pc, #388]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a60      	ldr	r2, [pc, #384]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	4b5e      	ldr	r3, [pc, #376]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a5d      	ldr	r2, [pc, #372]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x36e>
 800244e:	4b5b      	ldr	r3, [pc, #364]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a5a      	ldr	r2, [pc, #360]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b58      	ldr	r3, [pc, #352]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a57      	ldr	r2, [pc, #348]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fbad 	bl	8001bcc <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff fba9 	bl	8001bcc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b4b      	ldr	r3, [pc, #300]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x37e>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff fb97 	bl	8001bcc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7ff fb93 	bl	8001bcc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d061      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d146      	bne.n	8002582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b33      	ldr	r3, [pc, #204]	@ (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fb67 	bl	8001bcc <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff fb63 	bl	8001bcc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e06d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252a:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4921      	ldr	r1, [pc, #132]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a19      	ldr	r1, [r3, #32]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	430b      	orrs	r3, r1
 800254e:	491b      	ldr	r1, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff fb37 	bl	8001bcc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff fb33 	bl	8001bcc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e03d      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x46a>
 8002580:	e035      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_RCC_OscConfig+0x4cc>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fb20 	bl	8001bcc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7ff fb1c 	bl	8001bcc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x498>
 80025ae:	e01e      	b.n	80025ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e019      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_OscConfig+0x500>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0d0      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4965      	ldr	r1, [pc, #404]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a58      	ldr	r2, [pc, #352]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a52      	ldr	r2, [pc, #328]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800267a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e073      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b39      	ldr	r3, [pc, #228]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4936      	ldr	r1, [pc, #216]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ec:	f7ff fa6e 	bl	8001bcc <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7ff fa6a 	bl	8001bcc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e053      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4922      	ldr	r1, [pc, #136]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1cc>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1d0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f9cc 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08003d18 	.word	0x08003d18
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x30>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x36>
 80027fe:	e027      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	e027      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a17      	ldr	r2, [pc, #92]	@ (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c5b      	lsrs	r3, r3, #17
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	4a11      	ldr	r2, [pc, #68]	@ (8002870 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	fb03 f202 	mul.w	r2, r3, r2
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e004      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	613b      	str	r3, [r7, #16]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	613b      	str	r3, [r7, #16]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	693b      	ldr	r3, [r7, #16]
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	007a1200 	.word	0x007a1200
 800286c:	08003d30 	.word	0x08003d30
 8002870:	08003d40 	.word	0x08003d40
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08003d28 	.word	0x08003d28

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	@ (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08003d28 	.word	0x08003d28

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e042      	b.n	80029b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f848 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	@ 0x24
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800295a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f97d 	bl	8002c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	@ 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 8081 	bne.w	8002adc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_UART_Receive+0x2e>
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e079      	b.n	8002ade <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2222      	movs	r2, #34	@ 0x22
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029fe:	f7ff f8e5 	bl	8001bcc <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a18:	d108      	bne.n	8002a2c <HAL_UART_Receive+0x74>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	e003      	b.n	8002a34 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a34:	e047      	b.n	8002ac6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2120      	movs	r1, #32
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f850 	bl	8002ae6 <UART_WaitOnFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e042      	b.n	8002ade <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3302      	adds	r3, #2
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	e01f      	b.n	8002ab8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a80:	d007      	beq.n	8002a92 <HAL_UART_Receive+0xda>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_UART_Receive+0xe8>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e008      	b.n	8002ab2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1b2      	bne.n	8002a36 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	e03b      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002afe:	d037      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b00:	f7ff f864 	bl	8001bcc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	6a3a      	ldr	r2, [r7, #32]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d302      	bcc.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e03a      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b80      	cmp	r3, #128	@ 0x80
 8002b2c:	d020      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d01d      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d116      	bne.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f81d 	bl	8002b98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2208      	movs	r2, #8
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00f      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d0b4      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b095      	sub	sp, #84	@ 0x54
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d119      	bne.n	8002c44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0310 	bic.w	r3, r3, #16
 8002c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c30:	61ba      	str	r2, [r7, #24]
 8002c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e5      	bne.n	8002c10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c52:	bf00      	nop
 8002c54:	3754      	adds	r7, #84	@ 0x54
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c96:	f023 030c 	bic.w	r3, r3, #12
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8002d70 <UART_SetConfig+0x114>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cc4:	f7ff fdf6 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	e002      	b.n	8002cd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ccc:	f7ff fdde 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8002cd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <UART_SetConfig+0x118>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	0119      	lsls	r1, r3, #4
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009a      	lsls	r2, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d08:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <UART_SetConfig+0x118>)
 8002d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2064      	movs	r0, #100	@ 0x64
 8002d12:	fb00 f303 	mul.w	r3, r0, r3
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	3332      	adds	r3, #50	@ 0x32
 8002d1c:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <UART_SetConfig+0x118>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d28:	4419      	add	r1, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	009a      	lsls	r2, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <UART_SetConfig+0x118>)
 8002d42:	fba3 0302 	umull	r0, r3, r3, r2
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2064      	movs	r0, #100	@ 0x64
 8002d4a:	fb00 f303 	mul.w	r3, r0, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	3332      	adds	r3, #50	@ 0x32
 8002d54:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <UART_SetConfig+0x118>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	440a      	add	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40013800 	.word	0x40013800
 8002d74:	51eb851f 	.word	0x51eb851f

08002d78 <atoi>:
 8002d78:	220a      	movs	r2, #10
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f000 b87a 	b.w	8002e74 <strtol>

08002d80 <_strtol_l.isra.0>:
 8002d80:	2b24      	cmp	r3, #36	@ 0x24
 8002d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d86:	4686      	mov	lr, r0
 8002d88:	4690      	mov	r8, r2
 8002d8a:	d801      	bhi.n	8002d90 <_strtol_l.isra.0+0x10>
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <_strtol_l.isra.0+0x1e>
 8002d90:	f000 f882 	bl	8002e98 <__errno>
 8002d94:	2316      	movs	r3, #22
 8002d96:	6003      	str	r3, [r0, #0]
 8002d98:	2000      	movs	r0, #0
 8002d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4833      	ldr	r0, [pc, #204]	@ (8002e70 <_strtol_l.isra.0+0xf0>)
 8002da2:	462a      	mov	r2, r5
 8002da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002da8:	5d06      	ldrb	r6, [r0, r4]
 8002daa:	f016 0608 	ands.w	r6, r6, #8
 8002dae:	d1f8      	bne.n	8002da2 <_strtol_l.isra.0+0x22>
 8002db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8002db2:	d110      	bne.n	8002dd6 <_strtol_l.isra.0+0x56>
 8002db4:	2601      	movs	r6, #1
 8002db6:	782c      	ldrb	r4, [r5, #0]
 8002db8:	1c95      	adds	r5, r2, #2
 8002dba:	f033 0210 	bics.w	r2, r3, #16
 8002dbe:	d115      	bne.n	8002dec <_strtol_l.isra.0+0x6c>
 8002dc0:	2c30      	cmp	r4, #48	@ 0x30
 8002dc2:	d10d      	bne.n	8002de0 <_strtol_l.isra.0+0x60>
 8002dc4:	782a      	ldrb	r2, [r5, #0]
 8002dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002dca:	2a58      	cmp	r2, #88	@ 0x58
 8002dcc:	d108      	bne.n	8002de0 <_strtol_l.isra.0+0x60>
 8002dce:	786c      	ldrb	r4, [r5, #1]
 8002dd0:	3502      	adds	r5, #2
 8002dd2:	2310      	movs	r3, #16
 8002dd4:	e00a      	b.n	8002dec <_strtol_l.isra.0+0x6c>
 8002dd6:	2c2b      	cmp	r4, #43	@ 0x2b
 8002dd8:	bf04      	itt	eq
 8002dda:	782c      	ldrbeq	r4, [r5, #0]
 8002ddc:	1c95      	addeq	r5, r2, #2
 8002dde:	e7ec      	b.n	8002dba <_strtol_l.isra.0+0x3a>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f6      	bne.n	8002dd2 <_strtol_l.isra.0+0x52>
 8002de4:	2c30      	cmp	r4, #48	@ 0x30
 8002de6:	bf14      	ite	ne
 8002de8:	230a      	movne	r3, #10
 8002dea:	2308      	moveq	r3, #8
 8002dec:	2200      	movs	r2, #0
 8002dee:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002df2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8002df6:	fbbc f9f3 	udiv	r9, ip, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	fb03 ca19 	mls	sl, r3, r9, ip
 8002e00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002e04:	2f09      	cmp	r7, #9
 8002e06:	d80f      	bhi.n	8002e28 <_strtol_l.isra.0+0xa8>
 8002e08:	463c      	mov	r4, r7
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	dd1b      	ble.n	8002e46 <_strtol_l.isra.0+0xc6>
 8002e0e:	1c57      	adds	r7, r2, #1
 8002e10:	d007      	beq.n	8002e22 <_strtol_l.isra.0+0xa2>
 8002e12:	4581      	cmp	r9, r0
 8002e14:	d314      	bcc.n	8002e40 <_strtol_l.isra.0+0xc0>
 8002e16:	d101      	bne.n	8002e1c <_strtol_l.isra.0+0x9c>
 8002e18:	45a2      	cmp	sl, r4
 8002e1a:	db11      	blt.n	8002e40 <_strtol_l.isra.0+0xc0>
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	fb00 4003 	mla	r0, r0, r3, r4
 8002e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e26:	e7eb      	b.n	8002e00 <_strtol_l.isra.0+0x80>
 8002e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002e2c:	2f19      	cmp	r7, #25
 8002e2e:	d801      	bhi.n	8002e34 <_strtol_l.isra.0+0xb4>
 8002e30:	3c37      	subs	r4, #55	@ 0x37
 8002e32:	e7ea      	b.n	8002e0a <_strtol_l.isra.0+0x8a>
 8002e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002e38:	2f19      	cmp	r7, #25
 8002e3a:	d804      	bhi.n	8002e46 <_strtol_l.isra.0+0xc6>
 8002e3c:	3c57      	subs	r4, #87	@ 0x57
 8002e3e:	e7e4      	b.n	8002e0a <_strtol_l.isra.0+0x8a>
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e44:	e7ed      	b.n	8002e22 <_strtol_l.isra.0+0xa2>
 8002e46:	1c53      	adds	r3, r2, #1
 8002e48:	d108      	bne.n	8002e5c <_strtol_l.isra.0+0xdc>
 8002e4a:	2322      	movs	r3, #34	@ 0x22
 8002e4c:	4660      	mov	r0, ip
 8002e4e:	f8ce 3000 	str.w	r3, [lr]
 8002e52:	f1b8 0f00 	cmp.w	r8, #0
 8002e56:	d0a0      	beq.n	8002d9a <_strtol_l.isra.0+0x1a>
 8002e58:	1e69      	subs	r1, r5, #1
 8002e5a:	e006      	b.n	8002e6a <_strtol_l.isra.0+0xea>
 8002e5c:	b106      	cbz	r6, 8002e60 <_strtol_l.isra.0+0xe0>
 8002e5e:	4240      	negs	r0, r0
 8002e60:	f1b8 0f00 	cmp.w	r8, #0
 8002e64:	d099      	beq.n	8002d9a <_strtol_l.isra.0+0x1a>
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	d1f6      	bne.n	8002e58 <_strtol_l.isra.0+0xd8>
 8002e6a:	f8c8 1000 	str.w	r1, [r8]
 8002e6e:	e794      	b.n	8002d9a <_strtol_l.isra.0+0x1a>
 8002e70:	08003d43 	.word	0x08003d43

08002e74 <strtol>:
 8002e74:	4613      	mov	r3, r2
 8002e76:	460a      	mov	r2, r1
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4802      	ldr	r0, [pc, #8]	@ (8002e84 <strtol+0x10>)
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	f7ff bf7f 	b.w	8002d80 <_strtol_l.isra.0>
 8002e82:	bf00      	nop
 8002e84:	2000000c 	.word	0x2000000c

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__errno>:
 8002e98:	4b01      	ldr	r3, [pc, #4]	@ (8002ea0 <__errno+0x8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	@ (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	f000 ff24 	bl	8003d00 <_init>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4d0a      	ldr	r5, [pc, #40]	@ (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08003e90 	.word	0x08003e90
 8002ee0:	08003e90 	.word	0x08003e90
 8002ee4:	08003e90 	.word	0x08003e90
 8002ee8:	08003e94 	.word	0x08003e94

08002eec <pow>:
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4689      	mov	r9, r1
 8002ef8:	f000 f866 	bl	8002fc8 <__ieee754_pow>
 8002efc:	4622      	mov	r2, r4
 8002efe:	4606      	mov	r6, r0
 8002f00:	460f      	mov	r7, r1
 8002f02:	462b      	mov	r3, r5
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd fd80 	bl	8000a0c <__aeabi_dcmpun>
 8002f0c:	bbc8      	cbnz	r0, 8002f82 <pow+0x96>
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2300      	movs	r3, #0
 8002f12:	4640      	mov	r0, r8
 8002f14:	4649      	mov	r1, r9
 8002f16:	f7fd fd47 	bl	80009a8 <__aeabi_dcmpeq>
 8002f1a:	b1b8      	cbz	r0, 8002f4c <pow+0x60>
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2300      	movs	r3, #0
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d141      	bne.n	8002fb0 <pow+0xc4>
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4629      	mov	r1, r5
 8002f30:	f000 f844 	bl	8002fbc <finite>
 8002f34:	b328      	cbz	r0, 8002f82 <pow+0x96>
 8002f36:	2200      	movs	r2, #0
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	f7fd fd3d 	bl	80009bc <__aeabi_dcmplt>
 8002f42:	b1f0      	cbz	r0, 8002f82 <pow+0x96>
 8002f44:	f7ff ffa8 	bl	8002e98 <__errno>
 8002f48:	2322      	movs	r3, #34	@ 0x22
 8002f4a:	e019      	b.n	8002f80 <pow+0x94>
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	4639      	mov	r1, r7
 8002f50:	f000 f834 	bl	8002fbc <finite>
 8002f54:	b9c8      	cbnz	r0, 8002f8a <pow+0x9e>
 8002f56:	4640      	mov	r0, r8
 8002f58:	4649      	mov	r1, r9
 8002f5a:	f000 f82f 	bl	8002fbc <finite>
 8002f5e:	b1a0      	cbz	r0, 8002f8a <pow+0x9e>
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f000 f82a 	bl	8002fbc <finite>
 8002f68:	b178      	cbz	r0, 8002f8a <pow+0x9e>
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4630      	mov	r0, r6
 8002f70:	4639      	mov	r1, r7
 8002f72:	f7fd fd4b 	bl	8000a0c <__aeabi_dcmpun>
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d0e4      	beq.n	8002f44 <pow+0x58>
 8002f7a:	f7ff ff8d 	bl	8002e98 <__errno>
 8002f7e:	2321      	movs	r3, #33	@ 0x21
 8002f80:	6003      	str	r3, [r0, #0]
 8002f82:	4630      	mov	r0, r6
 8002f84:	4639      	mov	r1, r7
 8002f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	4630      	mov	r0, r6
 8002f90:	4639      	mov	r1, r7
 8002f92:	f7fd fd09 	bl	80009a8 <__aeabi_dcmpeq>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0f3      	beq.n	8002f82 <pow+0x96>
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	f000 f80d 	bl	8002fbc <finite>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0ed      	beq.n	8002f82 <pow+0x96>
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f000 f807 	bl	8002fbc <finite>
 8002fae:	e7c8      	b.n	8002f42 <pow+0x56>
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	4f01      	ldr	r7, [pc, #4]	@ (8002fb8 <pow+0xcc>)
 8002fb4:	e7e5      	b.n	8002f82 <pow+0x96>
 8002fb6:	bf00      	nop
 8002fb8:	3ff00000 	.word	0x3ff00000

08002fbc <finite>:
 8002fbc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8002fc0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8002fc4:	0fc0      	lsrs	r0, r0, #31
 8002fc6:	4770      	bx	lr

08002fc8 <__ieee754_pow>:
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	b091      	sub	sp, #68	@ 0x44
 8002fce:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd2:	468b      	mov	fp, r1
 8002fd4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8002fd8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8002fdc:	4682      	mov	sl, r0
 8002fde:	ea57 0001 	orrs.w	r0, r7, r1
 8002fe2:	d112      	bne.n	800300a <__ieee754_pow+0x42>
 8002fe4:	4653      	mov	r3, sl
 8002fe6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8002fea:	18db      	adds	r3, r3, r3
 8002fec:	4152      	adcs	r2, r2
 8002fee:	4298      	cmp	r0, r3
 8002ff0:	4b93      	ldr	r3, [pc, #588]	@ (8003240 <__ieee754_pow+0x278>)
 8002ff2:	4193      	sbcs	r3, r2
 8002ff4:	f080 84cd 	bcs.w	8003992 <__ieee754_pow+0x9ca>
 8002ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ffc:	4650      	mov	r0, sl
 8002ffe:	4659      	mov	r1, fp
 8003000:	f7fd f8b4 	bl	800016c <__adddf3>
 8003004:	b011      	add	sp, #68	@ 0x44
 8003006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300a:	4b8e      	ldr	r3, [pc, #568]	@ (8003244 <__ieee754_pow+0x27c>)
 800300c:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8003010:	429d      	cmp	r5, r3
 8003012:	465e      	mov	r6, fp
 8003014:	46d1      	mov	r9, sl
 8003016:	d80b      	bhi.n	8003030 <__ieee754_pow+0x68>
 8003018:	d105      	bne.n	8003026 <__ieee754_pow+0x5e>
 800301a:	f1ba 0f00 	cmp.w	sl, #0
 800301e:	d1eb      	bne.n	8002ff8 <__ieee754_pow+0x30>
 8003020:	42af      	cmp	r7, r5
 8003022:	d8e9      	bhi.n	8002ff8 <__ieee754_pow+0x30>
 8003024:	e001      	b.n	800302a <__ieee754_pow+0x62>
 8003026:	429f      	cmp	r7, r3
 8003028:	d802      	bhi.n	8003030 <__ieee754_pow+0x68>
 800302a:	429f      	cmp	r7, r3
 800302c:	d10f      	bne.n	800304e <__ieee754_pow+0x86>
 800302e:	b171      	cbz	r1, 800304e <__ieee754_pow+0x86>
 8003030:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8003034:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8003038:	ea56 0609 	orrs.w	r6, r6, r9
 800303c:	d1dc      	bne.n	8002ff8 <__ieee754_pow+0x30>
 800303e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003042:	18db      	adds	r3, r3, r3
 8003044:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003048:	4152      	adcs	r2, r2
 800304a:	429e      	cmp	r6, r3
 800304c:	e7d0      	b.n	8002ff0 <__ieee754_pow+0x28>
 800304e:	2e00      	cmp	r6, #0
 8003050:	462b      	mov	r3, r5
 8003052:	da42      	bge.n	80030da <__ieee754_pow+0x112>
 8003054:	4a7c      	ldr	r2, [pc, #496]	@ (8003248 <__ieee754_pow+0x280>)
 8003056:	4297      	cmp	r7, r2
 8003058:	d856      	bhi.n	8003108 <__ieee754_pow+0x140>
 800305a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800305e:	4297      	cmp	r7, r2
 8003060:	f240 84a6 	bls.w	80039b0 <__ieee754_pow+0x9e8>
 8003064:	153a      	asrs	r2, r7, #20
 8003066:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800306a:	2a14      	cmp	r2, #20
 800306c:	dd18      	ble.n	80030a0 <__ieee754_pow+0xd8>
 800306e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003072:	fa21 f402 	lsr.w	r4, r1, r2
 8003076:	fa04 f202 	lsl.w	r2, r4, r2
 800307a:	428a      	cmp	r2, r1
 800307c:	f040 8498 	bne.w	80039b0 <__ieee754_pow+0x9e8>
 8003080:	f004 0401 	and.w	r4, r4, #1
 8003084:	f1c4 0402 	rsb	r4, r4, #2
 8003088:	2900      	cmp	r1, #0
 800308a:	d159      	bne.n	8003140 <__ieee754_pow+0x178>
 800308c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8003090:	d149      	bne.n	8003126 <__ieee754_pow+0x15e>
 8003092:	4652      	mov	r2, sl
 8003094:	465b      	mov	r3, fp
 8003096:	4650      	mov	r0, sl
 8003098:	4659      	mov	r1, fp
 800309a:	f7fd fa1d 	bl	80004d8 <__aeabi_dmul>
 800309e:	e7b1      	b.n	8003004 <__ieee754_pow+0x3c>
 80030a0:	2900      	cmp	r1, #0
 80030a2:	d14c      	bne.n	800313e <__ieee754_pow+0x176>
 80030a4:	f1c2 0214 	rsb	r2, r2, #20
 80030a8:	fa47 f402 	asr.w	r4, r7, r2
 80030ac:	fa04 f202 	lsl.w	r2, r4, r2
 80030b0:	42ba      	cmp	r2, r7
 80030b2:	f040 847a 	bne.w	80039aa <__ieee754_pow+0x9e2>
 80030b6:	f004 0401 	and.w	r4, r4, #1
 80030ba:	f1c4 0402 	rsb	r4, r4, #2
 80030be:	4a63      	ldr	r2, [pc, #396]	@ (800324c <__ieee754_pow+0x284>)
 80030c0:	4297      	cmp	r7, r2
 80030c2:	d1e3      	bne.n	800308c <__ieee754_pow+0xc4>
 80030c4:	f1b8 0f00 	cmp.w	r8, #0
 80030c8:	f280 846b 	bge.w	80039a2 <__ieee754_pow+0x9da>
 80030cc:	4652      	mov	r2, sl
 80030ce:	465b      	mov	r3, fp
 80030d0:	2000      	movs	r0, #0
 80030d2:	495e      	ldr	r1, [pc, #376]	@ (800324c <__ieee754_pow+0x284>)
 80030d4:	f7fd fb2a 	bl	800072c <__aeabi_ddiv>
 80030d8:	e794      	b.n	8003004 <__ieee754_pow+0x3c>
 80030da:	2400      	movs	r4, #0
 80030dc:	bb81      	cbnz	r1, 8003140 <__ieee754_pow+0x178>
 80030de:	4a59      	ldr	r2, [pc, #356]	@ (8003244 <__ieee754_pow+0x27c>)
 80030e0:	4297      	cmp	r7, r2
 80030e2:	d1ec      	bne.n	80030be <__ieee754_pow+0xf6>
 80030e4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 80030e8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80030ec:	ea53 0309 	orrs.w	r3, r3, r9
 80030f0:	f000 844f 	beq.w	8003992 <__ieee754_pow+0x9ca>
 80030f4:	4b56      	ldr	r3, [pc, #344]	@ (8003250 <__ieee754_pow+0x288>)
 80030f6:	429d      	cmp	r5, r3
 80030f8:	d908      	bls.n	800310c <__ieee754_pow+0x144>
 80030fa:	f1b8 0f00 	cmp.w	r8, #0
 80030fe:	f280 844c 	bge.w	800399a <__ieee754_pow+0x9d2>
 8003102:	2000      	movs	r0, #0
 8003104:	2100      	movs	r1, #0
 8003106:	e77d      	b.n	8003004 <__ieee754_pow+0x3c>
 8003108:	2402      	movs	r4, #2
 800310a:	e7e7      	b.n	80030dc <__ieee754_pow+0x114>
 800310c:	f1b8 0f00 	cmp.w	r8, #0
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	f6bf af74 	bge.w	8003004 <__ieee754_pow+0x3c>
 800311c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003120:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003124:	e76e      	b.n	8003004 <__ieee754_pow+0x3c>
 8003126:	4a4b      	ldr	r2, [pc, #300]	@ (8003254 <__ieee754_pow+0x28c>)
 8003128:	4590      	cmp	r8, r2
 800312a:	d109      	bne.n	8003140 <__ieee754_pow+0x178>
 800312c:	2e00      	cmp	r6, #0
 800312e:	db07      	blt.n	8003140 <__ieee754_pow+0x178>
 8003130:	4650      	mov	r0, sl
 8003132:	4659      	mov	r1, fp
 8003134:	b011      	add	sp, #68	@ 0x44
 8003136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313a:	f000 bd0f 	b.w	8003b5c <__ieee754_sqrt>
 800313e:	2400      	movs	r4, #0
 8003140:	4650      	mov	r0, sl
 8003142:	4659      	mov	r1, fp
 8003144:	9302      	str	r3, [sp, #8]
 8003146:	f000 fc69 	bl	8003a1c <fabs>
 800314a:	9b02      	ldr	r3, [sp, #8]
 800314c:	f1b9 0f00 	cmp.w	r9, #0
 8003150:	d127      	bne.n	80031a2 <__ieee754_pow+0x1da>
 8003152:	4a3e      	ldr	r2, [pc, #248]	@ (800324c <__ieee754_pow+0x284>)
 8003154:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8003158:	4594      	cmp	ip, r2
 800315a:	d000      	beq.n	800315e <__ieee754_pow+0x196>
 800315c:	bb0d      	cbnz	r5, 80031a2 <__ieee754_pow+0x1da>
 800315e:	f1b8 0f00 	cmp.w	r8, #0
 8003162:	da05      	bge.n	8003170 <__ieee754_pow+0x1a8>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	2000      	movs	r0, #0
 800316a:	4938      	ldr	r1, [pc, #224]	@ (800324c <__ieee754_pow+0x284>)
 800316c:	f7fd fade 	bl	800072c <__aeabi_ddiv>
 8003170:	2e00      	cmp	r6, #0
 8003172:	f6bf af47 	bge.w	8003004 <__ieee754_pow+0x3c>
 8003176:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800317a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800317e:	4325      	orrs	r5, r4
 8003180:	d108      	bne.n	8003194 <__ieee754_pow+0x1cc>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fc ffed 	bl	8000168 <__aeabi_dsub>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	e79f      	b.n	80030d4 <__ieee754_pow+0x10c>
 8003194:	2c01      	cmp	r4, #1
 8003196:	f47f af35 	bne.w	8003004 <__ieee754_pow+0x3c>
 800319a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800319e:	4619      	mov	r1, r3
 80031a0:	e730      	b.n	8003004 <__ieee754_pow+0x3c>
 80031a2:	0ff2      	lsrs	r2, r6, #31
 80031a4:	3a01      	subs	r2, #1
 80031a6:	ea52 0c04 	orrs.w	ip, r2, r4
 80031aa:	d102      	bne.n	80031b2 <__ieee754_pow+0x1ea>
 80031ac:	4652      	mov	r2, sl
 80031ae:	465b      	mov	r3, fp
 80031b0:	e7e9      	b.n	8003186 <__ieee754_pow+0x1be>
 80031b2:	f04f 0900 	mov.w	r9, #0
 80031b6:	3c01      	subs	r4, #1
 80031b8:	4314      	orrs	r4, r2
 80031ba:	bf14      	ite	ne
 80031bc:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800324c <__ieee754_pow+0x284>
 80031c0:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8003258 <__ieee754_pow+0x290>
 80031c4:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80031c8:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80031cc:	f240 8104 	bls.w	80033d8 <__ieee754_pow+0x410>
 80031d0:	4b22      	ldr	r3, [pc, #136]	@ (800325c <__ieee754_pow+0x294>)
 80031d2:	429f      	cmp	r7, r3
 80031d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <__ieee754_pow+0x288>)
 80031d6:	d913      	bls.n	8003200 <__ieee754_pow+0x238>
 80031d8:	429d      	cmp	r5, r3
 80031da:	d808      	bhi.n	80031ee <__ieee754_pow+0x226>
 80031dc:	f1b8 0f00 	cmp.w	r8, #0
 80031e0:	da08      	bge.n	80031f4 <__ieee754_pow+0x22c>
 80031e2:	2000      	movs	r0, #0
 80031e4:	b011      	add	sp, #68	@ 0x44
 80031e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ea:	f000 bcb1 	b.w	8003b50 <__math_oflow>
 80031ee:	f1b8 0f00 	cmp.w	r8, #0
 80031f2:	dcf6      	bgt.n	80031e2 <__ieee754_pow+0x21a>
 80031f4:	2000      	movs	r0, #0
 80031f6:	b011      	add	sp, #68	@ 0x44
 80031f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	f000 bca3 	b.w	8003b46 <__math_uflow>
 8003200:	429d      	cmp	r5, r3
 8003202:	d20c      	bcs.n	800321e <__ieee754_pow+0x256>
 8003204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	2300      	movs	r3, #0
 800320c:	f7fd fbd6 	bl	80009bc <__aeabi_dcmplt>
 8003210:	3800      	subs	r0, #0
 8003212:	bf18      	it	ne
 8003214:	2001      	movne	r0, #1
 8003216:	f1b8 0f00 	cmp.w	r8, #0
 800321a:	daec      	bge.n	80031f6 <__ieee754_pow+0x22e>
 800321c:	e7e2      	b.n	80031e4 <__ieee754_pow+0x21c>
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <__ieee754_pow+0x284>)
 8003220:	2200      	movs	r2, #0
 8003222:	429d      	cmp	r5, r3
 8003224:	d91c      	bls.n	8003260 <__ieee754_pow+0x298>
 8003226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800322a:	2300      	movs	r3, #0
 800322c:	f7fd fbc6 	bl	80009bc <__aeabi_dcmplt>
 8003230:	3800      	subs	r0, #0
 8003232:	bf18      	it	ne
 8003234:	2001      	movne	r0, #1
 8003236:	f1b8 0f00 	cmp.w	r8, #0
 800323a:	dcd3      	bgt.n	80031e4 <__ieee754_pow+0x21c>
 800323c:	e7db      	b.n	80031f6 <__ieee754_pow+0x22e>
 800323e:	bf00      	nop
 8003240:	fff00000 	.word	0xfff00000
 8003244:	7ff00000 	.word	0x7ff00000
 8003248:	433fffff 	.word	0x433fffff
 800324c:	3ff00000 	.word	0x3ff00000
 8003250:	3fefffff 	.word	0x3fefffff
 8003254:	3fe00000 	.word	0x3fe00000
 8003258:	bff00000 	.word	0xbff00000
 800325c:	43f00000 	.word	0x43f00000
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <__ieee754_pow+0x400>)
 8003262:	f7fc ff81 	bl	8000168 <__aeabi_dsub>
 8003266:	a350      	add	r3, pc, #320	@ (adr r3, 80033a8 <__ieee754_pow+0x3e0>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	4604      	mov	r4, r0
 800326e:	460d      	mov	r5, r1
 8003270:	f7fd f932 	bl	80004d8 <__aeabi_dmul>
 8003274:	a34e      	add	r3, pc, #312	@ (adr r3, 80033b0 <__ieee754_pow+0x3e8>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	4606      	mov	r6, r0
 800327c:	460f      	mov	r7, r1
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f7fd f929 	bl	80004d8 <__aeabi_dmul>
 8003286:	2200      	movs	r2, #0
 8003288:	4682      	mov	sl, r0
 800328a:	468b      	mov	fp, r1
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <__ieee754_pow+0x404>)
 8003292:	f7fd f921 	bl	80004d8 <__aeabi_dmul>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	a147      	add	r1, pc, #284	@ (adr r1, 80033b8 <__ieee754_pow+0x3f0>)
 800329c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032a0:	f7fc ff62 	bl	8000168 <__aeabi_dsub>
 80032a4:	4622      	mov	r2, r4
 80032a6:	462b      	mov	r3, r5
 80032a8:	f7fd f916 	bl	80004d8 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	2000      	movs	r0, #0
 80032b2:	4947      	ldr	r1, [pc, #284]	@ (80033d0 <__ieee754_pow+0x408>)
 80032b4:	f7fc ff58 	bl	8000168 <__aeabi_dsub>
 80032b8:	4622      	mov	r2, r4
 80032ba:	4680      	mov	r8, r0
 80032bc:	4689      	mov	r9, r1
 80032be:	462b      	mov	r3, r5
 80032c0:	4620      	mov	r0, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7fd f908 	bl	80004d8 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4640      	mov	r0, r8
 80032ce:	4649      	mov	r1, r9
 80032d0:	f7fd f902 	bl	80004d8 <__aeabi_dmul>
 80032d4:	a33a      	add	r3, pc, #232	@ (adr r3, 80033c0 <__ieee754_pow+0x3f8>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd f8fd 	bl	80004d8 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4650      	mov	r0, sl
 80032e4:	4659      	mov	r1, fp
 80032e6:	f7fc ff3f 	bl	8000168 <__aeabi_dsub>
 80032ea:	2400      	movs	r4, #0
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4680      	mov	r8, r0
 80032f2:	4689      	mov	r9, r1
 80032f4:	4630      	mov	r0, r6
 80032f6:	4639      	mov	r1, r7
 80032f8:	f7fc ff38 	bl	800016c <__adddf3>
 80032fc:	4632      	mov	r2, r6
 80032fe:	463b      	mov	r3, r7
 8003300:	4620      	mov	r0, r4
 8003302:	460d      	mov	r5, r1
 8003304:	f7fc ff30 	bl	8000168 <__aeabi_dsub>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4640      	mov	r0, r8
 800330e:	4649      	mov	r1, r9
 8003310:	f7fc ff2a 	bl	8000168 <__aeabi_dsub>
 8003314:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003318:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800331c:	2300      	movs	r3, #0
 800331e:	9304      	str	r3, [sp, #16]
 8003320:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003324:	4606      	mov	r6, r0
 8003326:	460f      	mov	r7, r1
 8003328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800332c:	465b      	mov	r3, fp
 800332e:	4652      	mov	r2, sl
 8003330:	f7fc ff1a 	bl	8000168 <__aeabi_dsub>
 8003334:	4622      	mov	r2, r4
 8003336:	462b      	mov	r3, r5
 8003338:	f7fd f8ce 	bl	80004d8 <__aeabi_dmul>
 800333c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003340:	4680      	mov	r8, r0
 8003342:	4689      	mov	r9, r1
 8003344:	4630      	mov	r0, r6
 8003346:	4639      	mov	r1, r7
 8003348:	f7fd f8c6 	bl	80004d8 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4640      	mov	r0, r8
 8003352:	4649      	mov	r1, r9
 8003354:	f7fc ff0a 	bl	800016c <__adddf3>
 8003358:	465b      	mov	r3, fp
 800335a:	4606      	mov	r6, r0
 800335c:	460f      	mov	r7, r1
 800335e:	4652      	mov	r2, sl
 8003360:	4620      	mov	r0, r4
 8003362:	4629      	mov	r1, r5
 8003364:	f7fd f8b8 	bl	80004d8 <__aeabi_dmul>
 8003368:	460b      	mov	r3, r1
 800336a:	4602      	mov	r2, r0
 800336c:	4680      	mov	r8, r0
 800336e:	4689      	mov	r9, r1
 8003370:	4630      	mov	r0, r6
 8003372:	4639      	mov	r1, r7
 8003374:	f7fc fefa 	bl	800016c <__adddf3>
 8003378:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <__ieee754_pow+0x40c>)
 800337a:	4604      	mov	r4, r0
 800337c:	4299      	cmp	r1, r3
 800337e:	460d      	mov	r5, r1
 8003380:	468b      	mov	fp, r1
 8003382:	f340 81fd 	ble.w	8003780 <__ieee754_pow+0x7b8>
 8003386:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800338a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800338e:	4303      	orrs	r3, r0
 8003390:	f000 81dc 	beq.w	800374c <__ieee754_pow+0x784>
 8003394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	2300      	movs	r3, #0
 800339c:	f7fd fb0e 	bl	80009bc <__aeabi_dcmplt>
 80033a0:	3800      	subs	r0, #0
 80033a2:	bf18      	it	ne
 80033a4:	2001      	movne	r0, #1
 80033a6:	e71d      	b.n	80031e4 <__ieee754_pow+0x21c>
 80033a8:	60000000 	.word	0x60000000
 80033ac:	3ff71547 	.word	0x3ff71547
 80033b0:	f85ddf44 	.word	0xf85ddf44
 80033b4:	3e54ae0b 	.word	0x3e54ae0b
 80033b8:	55555555 	.word	0x55555555
 80033bc:	3fd55555 	.word	0x3fd55555
 80033c0:	652b82fe 	.word	0x652b82fe
 80033c4:	3ff71547 	.word	0x3ff71547
 80033c8:	3ff00000 	.word	0x3ff00000
 80033cc:	3fd00000 	.word	0x3fd00000
 80033d0:	3fe00000 	.word	0x3fe00000
 80033d4:	408fffff 	.word	0x408fffff
 80033d8:	4ad3      	ldr	r2, [pc, #844]	@ (8003728 <__ieee754_pow+0x760>)
 80033da:	4032      	ands	r2, r6
 80033dc:	2a00      	cmp	r2, #0
 80033de:	f040 817a 	bne.w	80036d6 <__ieee754_pow+0x70e>
 80033e2:	4bd2      	ldr	r3, [pc, #840]	@ (800372c <__ieee754_pow+0x764>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	f7fd f877 	bl	80004d8 <__aeabi_dmul>
 80033ea:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80033ee:	460b      	mov	r3, r1
 80033f0:	151a      	asrs	r2, r3, #20
 80033f2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80033f6:	4422      	add	r2, r4
 80033f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80033fa:	4acd      	ldr	r2, [pc, #820]	@ (8003730 <__ieee754_pow+0x768>)
 80033fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003400:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8003404:	4293      	cmp	r3, r2
 8003406:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800340a:	dd08      	ble.n	800341e <__ieee754_pow+0x456>
 800340c:	4ac9      	ldr	r2, [pc, #804]	@ (8003734 <__ieee754_pow+0x76c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f340 8163 	ble.w	80036da <__ieee754_pow+0x712>
 8003414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003416:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800341a:	3301      	adds	r3, #1
 800341c:	930a      	str	r3, [sp, #40]	@ 0x28
 800341e:	2600      	movs	r6, #0
 8003420:	00f3      	lsls	r3, r6, #3
 8003422:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003424:	4bc4      	ldr	r3, [pc, #784]	@ (8003738 <__ieee754_pow+0x770>)
 8003426:	4629      	mov	r1, r5
 8003428:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800342c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003430:	461a      	mov	r2, r3
 8003432:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003436:	4623      	mov	r3, r4
 8003438:	4682      	mov	sl, r0
 800343a:	f7fc fe95 	bl	8000168 <__aeabi_dsub>
 800343e:	4652      	mov	r2, sl
 8003440:	462b      	mov	r3, r5
 8003442:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800344a:	f7fc fe8f 	bl	800016c <__adddf3>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	2000      	movs	r0, #0
 8003454:	49b9      	ldr	r1, [pc, #740]	@ (800373c <__ieee754_pow+0x774>)
 8003456:	f7fd f969 	bl	800072c <__aeabi_ddiv>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003466:	f7fd f837 	bl	80004d8 <__aeabi_dmul>
 800346a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800346e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003472:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	46ab      	mov	fp, r5
 800347c:	106d      	asrs	r5, r5, #1
 800347e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003482:	9304      	str	r3, [sp, #16]
 8003484:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003488:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800348c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003490:	4640      	mov	r0, r8
 8003492:	4649      	mov	r1, r9
 8003494:	4614      	mov	r4, r2
 8003496:	461d      	mov	r5, r3
 8003498:	f7fd f81e 	bl	80004d8 <__aeabi_dmul>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80034a4:	f7fc fe60 	bl	8000168 <__aeabi_dsub>
 80034a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034ac:	4606      	mov	r6, r0
 80034ae:	460f      	mov	r7, r1
 80034b0:	4620      	mov	r0, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	f7fc fe58 	bl	8000168 <__aeabi_dsub>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4650      	mov	r0, sl
 80034be:	4659      	mov	r1, fp
 80034c0:	f7fc fe52 	bl	8000168 <__aeabi_dsub>
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	f7fd f806 	bl	80004d8 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4630      	mov	r0, r6
 80034d2:	4639      	mov	r1, r7
 80034d4:	f7fc fe48 	bl	8000168 <__aeabi_dsub>
 80034d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80034dc:	f7fc fffc 	bl	80004d8 <__aeabi_dmul>
 80034e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80034e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7fc fff4 	bl	80004d8 <__aeabi_dmul>
 80034f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80036e0 <__ieee754_pow+0x718>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	4604      	mov	r4, r0
 80034f8:	460d      	mov	r5, r1
 80034fa:	f7fc ffed 	bl	80004d8 <__aeabi_dmul>
 80034fe:	a37a      	add	r3, pc, #488	@ (adr r3, 80036e8 <__ieee754_pow+0x720>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fc fe32 	bl	800016c <__adddf3>
 8003508:	4622      	mov	r2, r4
 800350a:	462b      	mov	r3, r5
 800350c:	f7fc ffe4 	bl	80004d8 <__aeabi_dmul>
 8003510:	a377      	add	r3, pc, #476	@ (adr r3, 80036f0 <__ieee754_pow+0x728>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fc fe29 	bl	800016c <__adddf3>
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f7fc ffdb 	bl	80004d8 <__aeabi_dmul>
 8003522:	a375      	add	r3, pc, #468	@ (adr r3, 80036f8 <__ieee754_pow+0x730>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f7fc fe20 	bl	800016c <__adddf3>
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	f7fc ffd2 	bl	80004d8 <__aeabi_dmul>
 8003534:	a372      	add	r3, pc, #456	@ (adr r3, 8003700 <__ieee754_pow+0x738>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fc fe17 	bl	800016c <__adddf3>
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	f7fc ffc9 	bl	80004d8 <__aeabi_dmul>
 8003546:	a370      	add	r3, pc, #448	@ (adr r3, 8003708 <__ieee754_pow+0x740>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fc fe0e 	bl	800016c <__adddf3>
 8003550:	4622      	mov	r2, r4
 8003552:	4606      	mov	r6, r0
 8003554:	460f      	mov	r7, r1
 8003556:	462b      	mov	r3, r5
 8003558:	4620      	mov	r0, r4
 800355a:	4629      	mov	r1, r5
 800355c:	f7fc ffbc 	bl	80004d8 <__aeabi_dmul>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4630      	mov	r0, r6
 8003566:	4639      	mov	r1, r7
 8003568:	f7fc ffb6 	bl	80004d8 <__aeabi_dmul>
 800356c:	4604      	mov	r4, r0
 800356e:	460d      	mov	r5, r1
 8003570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	f7fc fdf8 	bl	800016c <__adddf3>
 800357c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003580:	f7fc ffaa 	bl	80004d8 <__aeabi_dmul>
 8003584:	4622      	mov	r2, r4
 8003586:	462b      	mov	r3, r5
 8003588:	f7fc fdf0 	bl	800016c <__adddf3>
 800358c:	4642      	mov	r2, r8
 800358e:	4682      	mov	sl, r0
 8003590:	468b      	mov	fp, r1
 8003592:	464b      	mov	r3, r9
 8003594:	4640      	mov	r0, r8
 8003596:	4649      	mov	r1, r9
 8003598:	f7fc ff9e 	bl	80004d8 <__aeabi_dmul>
 800359c:	2200      	movs	r2, #0
 800359e:	4b68      	ldr	r3, [pc, #416]	@ (8003740 <__ieee754_pow+0x778>)
 80035a0:	4606      	mov	r6, r0
 80035a2:	460f      	mov	r7, r1
 80035a4:	f7fc fde2 	bl	800016c <__adddf3>
 80035a8:	4652      	mov	r2, sl
 80035aa:	465b      	mov	r3, fp
 80035ac:	f7fc fdde 	bl	800016c <__adddf3>
 80035b0:	2400      	movs	r4, #0
 80035b2:	460d      	mov	r5, r1
 80035b4:	4622      	mov	r2, r4
 80035b6:	460b      	mov	r3, r1
 80035b8:	4640      	mov	r0, r8
 80035ba:	4649      	mov	r1, r9
 80035bc:	f7fc ff8c 	bl	80004d8 <__aeabi_dmul>
 80035c0:	2200      	movs	r2, #0
 80035c2:	4680      	mov	r8, r0
 80035c4:	4689      	mov	r9, r1
 80035c6:	4620      	mov	r0, r4
 80035c8:	4629      	mov	r1, r5
 80035ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003740 <__ieee754_pow+0x778>)
 80035cc:	f7fc fdcc 	bl	8000168 <__aeabi_dsub>
 80035d0:	4632      	mov	r2, r6
 80035d2:	463b      	mov	r3, r7
 80035d4:	f7fc fdc8 	bl	8000168 <__aeabi_dsub>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4650      	mov	r0, sl
 80035de:	4659      	mov	r1, fp
 80035e0:	f7fc fdc2 	bl	8000168 <__aeabi_dsub>
 80035e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035e8:	f7fc ff76 	bl	80004d8 <__aeabi_dmul>
 80035ec:	4622      	mov	r2, r4
 80035ee:	4606      	mov	r6, r0
 80035f0:	460f      	mov	r7, r1
 80035f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80035f6:	462b      	mov	r3, r5
 80035f8:	f7fc ff6e 	bl	80004d8 <__aeabi_dmul>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4630      	mov	r0, r6
 8003602:	4639      	mov	r1, r7
 8003604:	f7fc fdb2 	bl	800016c <__adddf3>
 8003608:	2400      	movs	r4, #0
 800360a:	4606      	mov	r6, r0
 800360c:	460f      	mov	r7, r1
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4640      	mov	r0, r8
 8003614:	4649      	mov	r1, r9
 8003616:	f7fc fda9 	bl	800016c <__adddf3>
 800361a:	a33d      	add	r3, pc, #244	@ (adr r3, 8003710 <__ieee754_pow+0x748>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	4620      	mov	r0, r4
 8003622:	460d      	mov	r5, r1
 8003624:	f7fc ff58 	bl	80004d8 <__aeabi_dmul>
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fc fd98 	bl	8000168 <__aeabi_dsub>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4630      	mov	r0, r6
 800363e:	4639      	mov	r1, r7
 8003640:	f7fc fd92 	bl	8000168 <__aeabi_dsub>
 8003644:	a334      	add	r3, pc, #208	@ (adr r3, 8003718 <__ieee754_pow+0x750>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fc ff45 	bl	80004d8 <__aeabi_dmul>
 800364e:	a334      	add	r3, pc, #208	@ (adr r3, 8003720 <__ieee754_pow+0x758>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	4606      	mov	r6, r0
 8003656:	460f      	mov	r7, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc ff3c 	bl	80004d8 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4630      	mov	r0, r6
 8003666:	4639      	mov	r1, r7
 8003668:	f7fc fd80 	bl	800016c <__adddf3>
 800366c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800366e:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <__ieee754_pow+0x77c>)
 8003670:	2400      	movs	r4, #0
 8003672:	4413      	add	r3, r2
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f7fc fd78 	bl	800016c <__adddf3>
 800367c:	4682      	mov	sl, r0
 800367e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003680:	468b      	mov	fp, r1
 8003682:	f7fc febf 	bl	8000404 <__aeabi_i2d>
 8003686:	4606      	mov	r6, r0
 8003688:	460f      	mov	r7, r1
 800368a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <__ieee754_pow+0x780>)
 800368e:	4413      	add	r3, r2
 8003690:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003694:	4652      	mov	r2, sl
 8003696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800369a:	465b      	mov	r3, fp
 800369c:	f7fc fd66 	bl	800016c <__adddf3>
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	f7fc fd62 	bl	800016c <__adddf3>
 80036a8:	4632      	mov	r2, r6
 80036aa:	463b      	mov	r3, r7
 80036ac:	f7fc fd5e 	bl	800016c <__adddf3>
 80036b0:	4632      	mov	r2, r6
 80036b2:	463b      	mov	r3, r7
 80036b4:	4620      	mov	r0, r4
 80036b6:	460d      	mov	r5, r1
 80036b8:	f7fc fd56 	bl	8000168 <__aeabi_dsub>
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	f7fc fd52 	bl	8000168 <__aeabi_dsub>
 80036c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036c8:	f7fc fd4e 	bl	8000168 <__aeabi_dsub>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4650      	mov	r0, sl
 80036d2:	4659      	mov	r1, fp
 80036d4:	e61c      	b.n	8003310 <__ieee754_pow+0x348>
 80036d6:	2400      	movs	r4, #0
 80036d8:	e68a      	b.n	80033f0 <__ieee754_pow+0x428>
 80036da:	2601      	movs	r6, #1
 80036dc:	e6a0      	b.n	8003420 <__ieee754_pow+0x458>
 80036de:	bf00      	nop
 80036e0:	4a454eef 	.word	0x4a454eef
 80036e4:	3fca7e28 	.word	0x3fca7e28
 80036e8:	93c9db65 	.word	0x93c9db65
 80036ec:	3fcd864a 	.word	0x3fcd864a
 80036f0:	a91d4101 	.word	0xa91d4101
 80036f4:	3fd17460 	.word	0x3fd17460
 80036f8:	518f264d 	.word	0x518f264d
 80036fc:	3fd55555 	.word	0x3fd55555
 8003700:	db6fabff 	.word	0xdb6fabff
 8003704:	3fdb6db6 	.word	0x3fdb6db6
 8003708:	33333303 	.word	0x33333303
 800370c:	3fe33333 	.word	0x3fe33333
 8003710:	e0000000 	.word	0xe0000000
 8003714:	3feec709 	.word	0x3feec709
 8003718:	dc3a03fd 	.word	0xdc3a03fd
 800371c:	3feec709 	.word	0x3feec709
 8003720:	145b01f5 	.word	0x145b01f5
 8003724:	be3e2fe0 	.word	0xbe3e2fe0
 8003728:	7ff00000 	.word	0x7ff00000
 800372c:	43400000 	.word	0x43400000
 8003730:	0003988e 	.word	0x0003988e
 8003734:	000bb679 	.word	0x000bb679
 8003738:	08003e68 	.word	0x08003e68
 800373c:	3ff00000 	.word	0x3ff00000
 8003740:	40080000 	.word	0x40080000
 8003744:	08003e48 	.word	0x08003e48
 8003748:	08003e58 	.word	0x08003e58
 800374c:	a39a      	add	r3, pc, #616	@ (adr r3, 80039b8 <__ieee754_pow+0x9f0>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	4630      	mov	r0, r6
 8003754:	4639      	mov	r1, r7
 8003756:	f7fc fd09 	bl	800016c <__adddf3>
 800375a:	4642      	mov	r2, r8
 800375c:	e9cd 0100 	strd	r0, r1, [sp]
 8003760:	464b      	mov	r3, r9
 8003762:	4620      	mov	r0, r4
 8003764:	4629      	mov	r1, r5
 8003766:	f7fc fcff 	bl	8000168 <__aeabi_dsub>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003772:	f7fd f941 	bl	80009f8 <__aeabi_dcmpgt>
 8003776:	2800      	cmp	r0, #0
 8003778:	f47f ae0c 	bne.w	8003394 <__ieee754_pow+0x3cc>
 800377c:	4ba0      	ldr	r3, [pc, #640]	@ (8003a00 <__ieee754_pow+0xa38>)
 800377e:	e022      	b.n	80037c6 <__ieee754_pow+0x7fe>
 8003780:	4ca0      	ldr	r4, [pc, #640]	@ (8003a04 <__ieee754_pow+0xa3c>)
 8003782:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003786:	42a3      	cmp	r3, r4
 8003788:	d919      	bls.n	80037be <__ieee754_pow+0x7f6>
 800378a:	4b9f      	ldr	r3, [pc, #636]	@ (8003a08 <__ieee754_pow+0xa40>)
 800378c:	440b      	add	r3, r1
 800378e:	4303      	orrs	r3, r0
 8003790:	d009      	beq.n	80037a6 <__ieee754_pow+0x7de>
 8003792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	2300      	movs	r3, #0
 800379a:	f7fd f90f 	bl	80009bc <__aeabi_dcmplt>
 800379e:	3800      	subs	r0, #0
 80037a0:	bf18      	it	ne
 80037a2:	2001      	movne	r0, #1
 80037a4:	e527      	b.n	80031f6 <__ieee754_pow+0x22e>
 80037a6:	4642      	mov	r2, r8
 80037a8:	464b      	mov	r3, r9
 80037aa:	f7fc fcdd 	bl	8000168 <__aeabi_dsub>
 80037ae:	4632      	mov	r2, r6
 80037b0:	463b      	mov	r3, r7
 80037b2:	f7fd f917 	bl	80009e4 <__aeabi_dcmpge>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1eb      	bne.n	8003792 <__ieee754_pow+0x7ca>
 80037ba:	4b94      	ldr	r3, [pc, #592]	@ (8003a0c <__ieee754_pow+0xa44>)
 80037bc:	e003      	b.n	80037c6 <__ieee754_pow+0x7fe>
 80037be:	4a94      	ldr	r2, [pc, #592]	@ (8003a10 <__ieee754_pow+0xa48>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f240 80e1 	bls.w	8003988 <__ieee754_pow+0x9c0>
 80037c6:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80037ca:	151b      	asrs	r3, r3, #20
 80037cc:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80037d0:	fa4a fa03 	asr.w	sl, sl, r3
 80037d4:	44da      	add	sl, fp
 80037d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80037da:	488e      	ldr	r0, [pc, #568]	@ (8003a14 <__ieee754_pow+0xa4c>)
 80037dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80037e0:	4108      	asrs	r0, r1
 80037e2:	ea00 030a 	and.w	r3, r0, sl
 80037e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80037ea:	f1c1 0114 	rsb	r1, r1, #20
 80037ee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80037f2:	4640      	mov	r0, r8
 80037f4:	fa4a fa01 	asr.w	sl, sl, r1
 80037f8:	f1bb 0f00 	cmp.w	fp, #0
 80037fc:	4649      	mov	r1, r9
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	bfb8      	it	lt
 8003804:	f1ca 0a00 	rsblt	sl, sl, #0
 8003808:	f7fc fcae 	bl	8000168 <__aeabi_dsub>
 800380c:	4680      	mov	r8, r0
 800380e:	4689      	mov	r9, r1
 8003810:	2400      	movs	r4, #0
 8003812:	4632      	mov	r2, r6
 8003814:	463b      	mov	r3, r7
 8003816:	4640      	mov	r0, r8
 8003818:	4649      	mov	r1, r9
 800381a:	f7fc fca7 	bl	800016c <__adddf3>
 800381e:	a368      	add	r3, pc, #416	@ (adr r3, 80039c0 <__ieee754_pow+0x9f8>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	4620      	mov	r0, r4
 8003826:	460d      	mov	r5, r1
 8003828:	f7fc fe56 	bl	80004d8 <__aeabi_dmul>
 800382c:	4642      	mov	r2, r8
 800382e:	464b      	mov	r3, r9
 8003830:	e9cd 0100 	strd	r0, r1, [sp]
 8003834:	4620      	mov	r0, r4
 8003836:	4629      	mov	r1, r5
 8003838:	f7fc fc96 	bl	8000168 <__aeabi_dsub>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4630      	mov	r0, r6
 8003842:	4639      	mov	r1, r7
 8003844:	f7fc fc90 	bl	8000168 <__aeabi_dsub>
 8003848:	a35f      	add	r3, pc, #380	@ (adr r3, 80039c8 <__ieee754_pow+0xa00>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fc fe43 	bl	80004d8 <__aeabi_dmul>
 8003852:	a35f      	add	r3, pc, #380	@ (adr r3, 80039d0 <__ieee754_pow+0xa08>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	4680      	mov	r8, r0
 800385a:	4689      	mov	r9, r1
 800385c:	4620      	mov	r0, r4
 800385e:	4629      	mov	r1, r5
 8003860:	f7fc fe3a 	bl	80004d8 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4640      	mov	r0, r8
 800386a:	4649      	mov	r1, r9
 800386c:	f7fc fc7e 	bl	800016c <__adddf3>
 8003870:	4604      	mov	r4, r0
 8003872:	460d      	mov	r5, r1
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800387c:	f7fc fc76 	bl	800016c <__adddf3>
 8003880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003884:	4680      	mov	r8, r0
 8003886:	4689      	mov	r9, r1
 8003888:	f7fc fc6e 	bl	8000168 <__aeabi_dsub>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fc fc68 	bl	8000168 <__aeabi_dsub>
 8003898:	4642      	mov	r2, r8
 800389a:	4606      	mov	r6, r0
 800389c:	460f      	mov	r7, r1
 800389e:	464b      	mov	r3, r9
 80038a0:	4640      	mov	r0, r8
 80038a2:	4649      	mov	r1, r9
 80038a4:	f7fc fe18 	bl	80004d8 <__aeabi_dmul>
 80038a8:	a34b      	add	r3, pc, #300	@ (adr r3, 80039d8 <__ieee754_pow+0xa10>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	f7fc fe11 	bl	80004d8 <__aeabi_dmul>
 80038b6:	a34a      	add	r3, pc, #296	@ (adr r3, 80039e0 <__ieee754_pow+0xa18>)
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f7fc fc54 	bl	8000168 <__aeabi_dsub>
 80038c0:	4622      	mov	r2, r4
 80038c2:	462b      	mov	r3, r5
 80038c4:	f7fc fe08 	bl	80004d8 <__aeabi_dmul>
 80038c8:	a347      	add	r3, pc, #284	@ (adr r3, 80039e8 <__ieee754_pow+0xa20>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fc4d 	bl	800016c <__adddf3>
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	f7fc fdff 	bl	80004d8 <__aeabi_dmul>
 80038da:	a345      	add	r3, pc, #276	@ (adr r3, 80039f0 <__ieee754_pow+0xa28>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fc42 	bl	8000168 <__aeabi_dsub>
 80038e4:	4622      	mov	r2, r4
 80038e6:	462b      	mov	r3, r5
 80038e8:	f7fc fdf6 	bl	80004d8 <__aeabi_dmul>
 80038ec:	a342      	add	r3, pc, #264	@ (adr r3, 80039f8 <__ieee754_pow+0xa30>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fc3b 	bl	800016c <__adddf3>
 80038f6:	4622      	mov	r2, r4
 80038f8:	462b      	mov	r3, r5
 80038fa:	f7fc fded 	bl	80004d8 <__aeabi_dmul>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4640      	mov	r0, r8
 8003904:	4649      	mov	r1, r9
 8003906:	f7fc fc2f 	bl	8000168 <__aeabi_dsub>
 800390a:	4604      	mov	r4, r0
 800390c:	460d      	mov	r5, r1
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f7fc fddf 	bl	80004d8 <__aeabi_dmul>
 800391a:	2200      	movs	r2, #0
 800391c:	e9cd 0100 	strd	r0, r1, [sp]
 8003920:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	f7fc fc1e 	bl	8000168 <__aeabi_dsub>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003934:	f7fc fefa 	bl	800072c <__aeabi_ddiv>
 8003938:	4632      	mov	r2, r6
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	463b      	mov	r3, r7
 8003940:	4640      	mov	r0, r8
 8003942:	4649      	mov	r1, r9
 8003944:	f7fc fdc8 	bl	80004d8 <__aeabi_dmul>
 8003948:	4632      	mov	r2, r6
 800394a:	463b      	mov	r3, r7
 800394c:	f7fc fc0e 	bl	800016c <__adddf3>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4620      	mov	r0, r4
 8003956:	4629      	mov	r1, r5
 8003958:	f7fc fc06 	bl	8000168 <__aeabi_dsub>
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	f7fc fc02 	bl	8000168 <__aeabi_dsub>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	2000      	movs	r0, #0
 800396a:	492b      	ldr	r1, [pc, #172]	@ (8003a18 <__ieee754_pow+0xa50>)
 800396c:	f7fc fbfc 	bl	8000168 <__aeabi_dsub>
 8003970:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003974:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8003978:	da09      	bge.n	800398e <__ieee754_pow+0x9c6>
 800397a:	4652      	mov	r2, sl
 800397c:	f000 f854 	bl	8003a28 <scalbn>
 8003980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003984:	f7ff bb89 	b.w	800309a <__ieee754_pow+0xd2>
 8003988:	f8dd a010 	ldr.w	sl, [sp, #16]
 800398c:	e740      	b.n	8003810 <__ieee754_pow+0x848>
 800398e:	4621      	mov	r1, r4
 8003990:	e7f6      	b.n	8003980 <__ieee754_pow+0x9b8>
 8003992:	2000      	movs	r0, #0
 8003994:	4920      	ldr	r1, [pc, #128]	@ (8003a18 <__ieee754_pow+0xa50>)
 8003996:	f7ff bb35 	b.w	8003004 <__ieee754_pow+0x3c>
 800399a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800399e:	f7ff bb31 	b.w	8003004 <__ieee754_pow+0x3c>
 80039a2:	4650      	mov	r0, sl
 80039a4:	4659      	mov	r1, fp
 80039a6:	f7ff bb2d 	b.w	8003004 <__ieee754_pow+0x3c>
 80039aa:	460c      	mov	r4, r1
 80039ac:	f7ff bb87 	b.w	80030be <__ieee754_pow+0xf6>
 80039b0:	2400      	movs	r4, #0
 80039b2:	f7ff bb69 	b.w	8003088 <__ieee754_pow+0xc0>
 80039b6:	bf00      	nop
 80039b8:	652b82fe 	.word	0x652b82fe
 80039bc:	3c971547 	.word	0x3c971547
 80039c0:	00000000 	.word	0x00000000
 80039c4:	3fe62e43 	.word	0x3fe62e43
 80039c8:	fefa39ef 	.word	0xfefa39ef
 80039cc:	3fe62e42 	.word	0x3fe62e42
 80039d0:	0ca86c39 	.word	0x0ca86c39
 80039d4:	be205c61 	.word	0xbe205c61
 80039d8:	72bea4d0 	.word	0x72bea4d0
 80039dc:	3e663769 	.word	0x3e663769
 80039e0:	c5d26bf1 	.word	0xc5d26bf1
 80039e4:	3ebbbd41 	.word	0x3ebbbd41
 80039e8:	af25de2c 	.word	0xaf25de2c
 80039ec:	3f11566a 	.word	0x3f11566a
 80039f0:	16bebd93 	.word	0x16bebd93
 80039f4:	3f66c16c 	.word	0x3f66c16c
 80039f8:	5555553e 	.word	0x5555553e
 80039fc:	3fc55555 	.word	0x3fc55555
 8003a00:	40900000 	.word	0x40900000
 8003a04:	4090cbff 	.word	0x4090cbff
 8003a08:	3f6f3400 	.word	0x3f6f3400
 8003a0c:	4090cc00 	.word	0x4090cc00
 8003a10:	3fe00000 	.word	0x3fe00000
 8003a14:	fff00000 	.word	0xfff00000
 8003a18:	3ff00000 	.word	0x3ff00000

08003a1c <fabs>:
 8003a1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003a20:	4619      	mov	r1, r3
 8003a22:	4770      	bx	lr
 8003a24:	0000      	movs	r0, r0
	...

08003a28 <scalbn>:
 8003a28:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a32:	4683      	mov	fp, r0
 8003a34:	468c      	mov	ip, r1
 8003a36:	460b      	mov	r3, r1
 8003a38:	b982      	cbnz	r2, 8003a5c <scalbn+0x34>
 8003a3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003a3e:	4303      	orrs	r3, r0
 8003a40:	d035      	beq.n	8003aae <scalbn+0x86>
 8003a42:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <scalbn+0xd0>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	f7fc fd47 	bl	80004d8 <__aeabi_dmul>
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003afc <scalbn+0xd4>)
 8003a4c:	4683      	mov	fp, r0
 8003a4e:	429e      	cmp	r6, r3
 8003a50:	468c      	mov	ip, r1
 8003a52:	da0d      	bge.n	8003a70 <scalbn+0x48>
 8003a54:	a324      	add	r3, pc, #144	@ (adr r3, 8003ae8 <scalbn+0xc0>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	e019      	b.n	8003a90 <scalbn+0x68>
 8003a5c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8003a60:	42ba      	cmp	r2, r7
 8003a62:	d109      	bne.n	8003a78 <scalbn+0x50>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f7fc fb81 	bl	800016c <__adddf3>
 8003a6a:	4683      	mov	fp, r0
 8003a6c:	468c      	mov	ip, r1
 8003a6e:	e01e      	b.n	8003aae <scalbn+0x86>
 8003a70:	460b      	mov	r3, r1
 8003a72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a76:	3a36      	subs	r2, #54	@ 0x36
 8003a78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003a7c:	428e      	cmp	r6, r1
 8003a7e:	dd0a      	ble.n	8003a96 <scalbn+0x6e>
 8003a80:	a31b      	add	r3, pc, #108	@ (adr r3, 8003af0 <scalbn+0xc8>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	4665      	mov	r5, ip
 8003a88:	f363 051e 	bfi	r5, r3, #0, #31
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	481c      	ldr	r0, [pc, #112]	@ (8003b00 <scalbn+0xd8>)
 8003a90:	f7fc fd22 	bl	80004d8 <__aeabi_dmul>
 8003a94:	e7e9      	b.n	8003a6a <scalbn+0x42>
 8003a96:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003a9a:	4432      	add	r2, r6
 8003a9c:	428a      	cmp	r2, r1
 8003a9e:	dcef      	bgt.n	8003a80 <scalbn+0x58>
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	dd08      	ble.n	8003ab6 <scalbn+0x8e>
 8003aa4:	f36f 531e 	bfc	r3, #20, #11
 8003aa8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003aac:	46ac      	mov	ip, r5
 8003aae:	4658      	mov	r0, fp
 8003ab0:	4661      	mov	r1, ip
 8003ab2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003ab6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003aba:	da09      	bge.n	8003ad0 <scalbn+0xa8>
 8003abc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003ac0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003ac4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003ac8:	480e      	ldr	r0, [pc, #56]	@ (8003b04 <scalbn+0xdc>)
 8003aca:	f041 011f 	orr.w	r1, r1, #31
 8003ace:	e7c1      	b.n	8003a54 <scalbn+0x2c>
 8003ad0:	3236      	adds	r2, #54	@ 0x36
 8003ad2:	f36f 531e 	bfc	r3, #20, #11
 8003ad6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ada:	4658      	mov	r0, fp
 8003adc:	4629      	mov	r1, r5
 8003ade:	2200      	movs	r2, #0
 8003ae0:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <scalbn+0xe0>)
 8003ae2:	e7d5      	b.n	8003a90 <scalbn+0x68>
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	c2f8f359 	.word	0xc2f8f359
 8003aec:	01a56e1f 	.word	0x01a56e1f
 8003af0:	8800759c 	.word	0x8800759c
 8003af4:	7e37e43c 	.word	0x7e37e43c
 8003af8:	43500000 	.word	0x43500000
 8003afc:	ffff3cb0 	.word	0xffff3cb0
 8003b00:	8800759c 	.word	0x8800759c
 8003b04:	c2f8f359 	.word	0xc2f8f359
 8003b08:	3c900000 	.word	0x3c900000

08003b0c <with_errno>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	460d      	mov	r5, r1
 8003b12:	4616      	mov	r6, r2
 8003b14:	f7ff f9c0 	bl	8002e98 <__errno>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	6006      	str	r6, [r0, #0]
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}

08003b20 <xflow>:
 8003b20:	b513      	push	{r0, r1, r4, lr}
 8003b22:	4604      	mov	r4, r0
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	b10c      	cbz	r4, 8003b2e <xflow+0xe>
 8003b2a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b36:	f7fc fccf 	bl	80004d8 <__aeabi_dmul>
 8003b3a:	2222      	movs	r2, #34	@ 0x22
 8003b3c:	b002      	add	sp, #8
 8003b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b42:	f7ff bfe3 	b.w	8003b0c <with_errno>

08003b46 <__math_uflow>:
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003b4c:	f7ff bfe8 	b.w	8003b20 <xflow>

08003b50 <__math_oflow>:
 8003b50:	2200      	movs	r2, #0
 8003b52:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8003b56:	f7ff bfe3 	b.w	8003b20 <xflow>
	...

08003b5c <__ieee754_sqrt>:
 8003b5c:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <__ieee754_sqrt+0x198>)
 8003b5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b62:	438a      	bics	r2, r1
 8003b64:	4606      	mov	r6, r0
 8003b66:	460f      	mov	r7, r1
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	d10e      	bne.n	8003b8c <__ieee754_sqrt+0x30>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f7fc fcb2 	bl	80004d8 <__aeabi_dmul>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4630      	mov	r0, r6
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	f7fc faf6 	bl	800016c <__adddf3>
 8003b80:	4606      	mov	r6, r0
 8003b82:	460f      	mov	r7, r1
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	dc0c      	bgt.n	8003baa <__ieee754_sqrt+0x4e>
 8003b90:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8003b94:	4302      	orrs	r2, r0
 8003b96:	d0f5      	beq.n	8003b84 <__ieee754_sqrt+0x28>
 8003b98:	b189      	cbz	r1, 8003bbe <__ieee754_sqrt+0x62>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f7fc fae4 	bl	8000168 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	f7fc fdc2 	bl	800072c <__aeabi_ddiv>
 8003ba8:	e7ea      	b.n	8003b80 <__ieee754_sqrt+0x24>
 8003baa:	150a      	asrs	r2, r1, #20
 8003bac:	d115      	bne.n	8003bda <__ieee754_sqrt+0x7e>
 8003bae:	2100      	movs	r1, #0
 8003bb0:	e009      	b.n	8003bc6 <__ieee754_sqrt+0x6a>
 8003bb2:	0ae3      	lsrs	r3, r4, #11
 8003bb4:	3a15      	subs	r2, #21
 8003bb6:	0564      	lsls	r4, r4, #21
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0fa      	beq.n	8003bb2 <__ieee754_sqrt+0x56>
 8003bbc:	e7f7      	b.n	8003bae <__ieee754_sqrt+0x52>
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	e7fa      	b.n	8003bb8 <__ieee754_sqrt+0x5c>
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	3101      	adds	r1, #1
 8003bc6:	02d8      	lsls	r0, r3, #11
 8003bc8:	d5fb      	bpl.n	8003bc2 <__ieee754_sqrt+0x66>
 8003bca:	1e48      	subs	r0, r1, #1
 8003bcc:	1a12      	subs	r2, r2, r0
 8003bce:	f1c1 0020 	rsb	r0, r1, #32
 8003bd2:	fa24 f000 	lsr.w	r0, r4, r0
 8003bd6:	4303      	orrs	r3, r0
 8003bd8:	408c      	lsls	r4, r1
 8003bda:	2700      	movs	r7, #0
 8003bdc:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8003be0:	2116      	movs	r1, #22
 8003be2:	07d2      	lsls	r2, r2, #31
 8003be4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003be8:	463a      	mov	r2, r7
 8003bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bf2:	bf5c      	itt	pl
 8003bf4:	005b      	lslpl	r3, r3, #1
 8003bf6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003bfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003bfe:	bf58      	it	pl
 8003c00:	0064      	lslpl	r4, r4, #1
 8003c02:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003c06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003c0a:	0064      	lsls	r4, r4, #1
 8003c0c:	1815      	adds	r5, r2, r0
 8003c0e:	429d      	cmp	r5, r3
 8003c10:	bfde      	ittt	le
 8003c12:	182a      	addle	r2, r5, r0
 8003c14:	1b5b      	suble	r3, r3, r5
 8003c16:	183f      	addle	r7, r7, r0
 8003c18:	0fe5      	lsrs	r5, r4, #31
 8003c1a:	3901      	subs	r1, #1
 8003c1c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003c20:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003c24:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003c28:	d1f0      	bne.n	8003c0c <__ieee754_sqrt+0xb0>
 8003c2a:	460d      	mov	r5, r1
 8003c2c:	2620      	movs	r6, #32
 8003c2e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003c32:	4293      	cmp	r3, r2
 8003c34:	eb00 0c01 	add.w	ip, r0, r1
 8003c38:	dc02      	bgt.n	8003c40 <__ieee754_sqrt+0xe4>
 8003c3a:	d113      	bne.n	8003c64 <__ieee754_sqrt+0x108>
 8003c3c:	45a4      	cmp	ip, r4
 8003c3e:	d811      	bhi.n	8003c64 <__ieee754_sqrt+0x108>
 8003c40:	f1bc 0f00 	cmp.w	ip, #0
 8003c44:	eb0c 0100 	add.w	r1, ip, r0
 8003c48:	da3e      	bge.n	8003cc8 <__ieee754_sqrt+0x16c>
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	db3c      	blt.n	8003cc8 <__ieee754_sqrt+0x16c>
 8003c4e:	f102 0e01 	add.w	lr, r2, #1
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	4672      	mov	r2, lr
 8003c56:	45a4      	cmp	ip, r4
 8003c58:	bf88      	it	hi
 8003c5a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8003c5e:	eba4 040c 	sub.w	r4, r4, ip
 8003c62:	4405      	add	r5, r0
 8003c64:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8003c68:	3e01      	subs	r6, #1
 8003c6a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003c6e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003c72:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003c76:	d1dc      	bne.n	8003c32 <__ieee754_sqrt+0xd6>
 8003c78:	431c      	orrs	r4, r3
 8003c7a:	d01a      	beq.n	8003cb2 <__ieee754_sqrt+0x156>
 8003c7c:	4c1e      	ldr	r4, [pc, #120]	@ (8003cf8 <__ieee754_sqrt+0x19c>)
 8003c7e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8003cfc <__ieee754_sqrt+0x1a0>
 8003c82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003c86:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003c8a:	f7fc fa6d 	bl	8000168 <__aeabi_dsub>
 8003c8e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4650      	mov	r0, sl
 8003c98:	4659      	mov	r1, fp
 8003c9a:	f7fc fe99 	bl	80009d0 <__aeabi_dcmple>
 8003c9e:	b140      	cbz	r0, 8003cb2 <__ieee754_sqrt+0x156>
 8003ca0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003ca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003ca8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8003cac:	d10e      	bne.n	8003ccc <__ieee754_sqrt+0x170>
 8003cae:	4635      	mov	r5, r6
 8003cb0:	3701      	adds	r7, #1
 8003cb2:	107b      	asrs	r3, r7, #1
 8003cb4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8003cb8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8003cbc:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8003cc0:	086b      	lsrs	r3, r5, #1
 8003cc2:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8003cc6:	e75b      	b.n	8003b80 <__ieee754_sqrt+0x24>
 8003cc8:	4696      	mov	lr, r2
 8003cca:	e7c2      	b.n	8003c52 <__ieee754_sqrt+0xf6>
 8003ccc:	f7fc fa4e 	bl	800016c <__adddf3>
 8003cd0:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4650      	mov	r0, sl
 8003cda:	4659      	mov	r1, fp
 8003cdc:	f7fc fe6e 	bl	80009bc <__aeabi_dcmplt>
 8003ce0:	b120      	cbz	r0, 8003cec <__ieee754_sqrt+0x190>
 8003ce2:	1cab      	adds	r3, r5, #2
 8003ce4:	bf08      	it	eq
 8003ce6:	3701      	addeq	r7, #1
 8003ce8:	3502      	adds	r5, #2
 8003cea:	e7e2      	b.n	8003cb2 <__ieee754_sqrt+0x156>
 8003cec:	1c6b      	adds	r3, r5, #1
 8003cee:	f023 0501 	bic.w	r5, r3, #1
 8003cf2:	e7de      	b.n	8003cb2 <__ieee754_sqrt+0x156>
 8003cf4:	7ff00000 	.word	0x7ff00000
 8003cf8:	08003e80 	.word	0x08003e80
 8003cfc:	08003e78 	.word	0x08003e78

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
